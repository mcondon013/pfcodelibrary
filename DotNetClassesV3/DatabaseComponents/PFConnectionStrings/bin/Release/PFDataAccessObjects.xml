<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PFDataAccessObjects</name>
    </assembly>
    <members>
        <member name="T:PFDataAccessObjects.PFOleDb">
            <summary>
            Class contains functionality for accessing databases using System.Data.OleDb namespace.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.GetConnectionStringKeyVals">
            <summary>
            Returns a list of key/value pairs that contains all the keys and their associated values for the current connection string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.CreateTable(System.Data.DataTable)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <returns>True if table created; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.CreateTable(System.Data.DataTable,System.String@)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="createScript">Copy of the script used to create the table.</param>
            <returns>True if table created; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.CreateTableUsingOleDbSyntax(System.Data.DataTable,System.String@)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="createScript">Copy of the script used to create the table.</param>
            <returns>True if table created; otherwise false.</returns>
            <remarks>This method is used for testing only. Use the CreateTable method for application work.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.CreateTableUsingCustomScript(System.String)">
            <summary>
            Method creates a table in the database using a custom SQL create table script built by the caller.
            </summary>
            <param name="createScript">Copy of the script used to create the table.</param>
            <returns>True if table created; otherwise false.</returns>
            <remarks>This method runs an OLEDB ExecuteNonQuery command.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.BuildTableCreateStatement(System.Data.DataTable)">
            <summary>
            Builds a SQL table create statement using the properties on the specified data table.
            </summary>
            <param name="dt">Object containing the table definition.</param>
            <returns>String containing a SQL table create statement.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.GetDatabasePlatform">
            <summary>
            Routine to determine what database platform is supported by the current OLEDB provider.
            </summary>
            <returns>Type of DatabasePlatform.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.TypeIsUserTable(System.Data.DataRow)">
            <summary>
            Function to determine if the type of table object is a user (base) table. This function is used to eliminate system tables from the output.
            </summary>
            <param name="dr">DataRow returned by GetSchema.</param>
            <returns>True if the table is a user or base table.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.GetFullTableName(System.Data.DataRow)">
            <summary>
            Function to build a qualified table name. Ususally this means attaching schema name in front of table name. In some cases both the catalog name and the schema name will be prepended to the table namne.
             Result depends on the requirements of the database platform implementing this function.
            </summary>
            <param name="dr">DataRow returned by GetSchema that contains Tables information.</param>
            <returns>Full table name in either schemaname.tablename or catalogname.schemaname.tablename format.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.GetTableNameQualifiers(System.Data.DataRow)">
            <summary>
            Function to return the catalog, schema and name parts of a fully qualified table name. Some databases will only return the schema and name since catalog is not used by those database engines.
            </summary>
            <param name="dr">DataRow returned by GetSchema that contains Tables information.</param>
            <returns>Object containing the different qualifiers in the table name.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.RebuildFullTableName(PFDataAccessObjects.PFTableDef,System.String)">
            <summary>
            Routine to recreate with a different schema name. Used when transferring a table definition to a new database.
            </summary>
            <param name="tabDef">Object containing the table definition to be reformatted.</param>
            <param name="newSchemaName">Schema name to apply to the reformatted table name.</param>
            <returns>Table name that includes the new schema name.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.TableExists(PFDataAccessObjects.PFTableDef)">
            <summary>
            Routine uses table name information supplied by a PFTableDef object to determine if a table exists in the database.
            </summary>
            <param name="td">Object containing table definition information.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.DropTable(PFDataAccessObjects.PFTableDef)">
            <summary>
            Routine retrieves table name information supplied by a PFTableDef object to drop (delete) a table in the database.
            </summary>
            <param name="td">Object containing table definition information.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.TableExists(System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.TableExists(System.String,System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="schemaName">Name of the schema, if there is one. If not, set to empty string.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.TableExists(System.String,System.String,System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="catalogName">Name of the database, if necessary for lookup. Otherwise, set to string.empty.</param>
            <param name="schemaName">Name of the schema, if there is one. If not, set to empty string.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.DropTable(System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.DropTable(System.String,System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="schemaName">Name of the schema, if there is one for the table to delete. If not, set to empty string.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.DropTable(System.String,System.String,System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="catalogName">Name of the database, if necessary to identify table to delete. Otherwise, set to string.empty.</param>
            <param name="schemaName">Name of the schema, if there is one for the table to delete. If not, set to empty string.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.OpenConnection">
            <summary>
            Opens connection to database.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.CloseConnection">
            <summary>
            Closes connection to database.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.RunQueryDataReader">
            <summary>
            Runs query specified via properties.
            </summary>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.RunQueryDataReader(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.RunQueryDataSet">
            <summary>
            Runs query.
            </summary>
            <returns>Returns dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.RunQueryDataSet(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.RunQueryDataTable">
            <summary>
            Runs query.
            </summary>
            <returns>Returns dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.RunQueryDataTable(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.RunNonQuery">
            <summary>
            Runs a non-query (e.g. update, insert, delete statements).
            </summary>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.RunNonQuery(System.String,System.Data.CommandType)">
            <summary>
            Runs a non-query (e.g. update, insert, delete statements) using the query specified in the parameters.
            </summary>
            <param name="sqlText">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.GetQueryDataSchema">
            <summary>
            Retrieves the data schema represented by the query text provided to this instance of the class.
            </summary>
            <returns>Returns data table object that contains schema for the query defined for this instance.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.GetQueryDataSchema(System.String,System.Data.CommandType)">
            <summary>
            Retrieves the data schema represented by the query text provided to this routine.
            </summary>
            <param name="sqlQuery">SQL to parse.</param>
            <param name="pCommandType">Type of command represented by the query: text or stored procedure.</param>
            <returns>DataTable object containing the schema information for the columns that would be returned by this query.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ConvertDataReaderToDataTable(System.Data.Common.DbDataReader)">
            <summary>
            Transforms a DataReader object into a DataTable object.
            </summary>
            <param name="rdr">DataReader object.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ConvertDataReaderToDataTable(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Transforms a DataReader object into a DataTable object.
            </summary>
            <param name="rdr">DataReader object.</param>
            <param name="tableName">Name that identifies the table.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ProcessDataReader(System.Data.Common.DbDataReader)">
            <summary>
            Returns data from a DataReader object to the caller.
            </summary>
            <param name="rdr">DataReader object containing data to be returned to the caller.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ProcessDataSet(System.Data.DataSet)">
            <summary>
            Returns data from a DataSet to the caller.
            </summary>
            <param name="ds">DataSet object containing data to be returned to the caller.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ProcessDataTable(System.Data.DataTable)">
            <summary>
            Returns data from a DataTable to the caller.
            </summary>
            <param name="tab">DataTable object containing data to be returned to the caller.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ProcessDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Returns data from a DataTable to the caller.
            </summary>
            <param name="tab">DataTable object containing data to be returned to the caller.</param>
            <param name="tableNumber">Arbitrary number used for identifying multiple DataTables.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ImportDataFromDataTable(System.Data.DataTable)">
            <summary>
            Loads rows contained in an ADO.NET data table to an ODBC database table. Table must already exist. See CreateTable methods to create a new table.
            </summary>
            <param name="dt">DataTable object containing data to load.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ImportDataFromDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Loads rows contained in an ADO.NET data table to an ODBC database table. Table must already exist. See CreateTable methods to create a new table.
            </summary>
            <param name="dt">DataTable object containing data to load.</param>
            <param name="updateBatchSize">Number of individual SQL modification statements to include in a table modification operation.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ExtractDelimitedDataFromDataReader(System.Data.Common.DbDataReader,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="rdr">Data reader object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ExtractDelimitedDataFromDataSet(System.Data.DataSet,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ExtractDelimitedDataFromTable(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="tab">DataTable object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ExtractFixedLengthDataFromDataReader(System.Data.Common.DbDataReader,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="rdr">Data reader object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ExtractFixedLengthDataFromDataSet(System.Data.DataSet,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ExtractFixedLengthDataFromTable(System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="tab">DataTable object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.LoadXmlFileToDataTable(System.String)">
            <summary>
            Reads contents of xml file into a DataTable
            </summary>
            <param name="filePath">Location of Xml file.</param>
            <returns>DataTable with data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.LoadXmlFileToDataSet(System.String)">
            <summary>
            Reads contents of xml file into a DataSet
            </summary>
            <param name="filePath">Location of Xml file.</param>
            <returns>DataSet with data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.SaveDataReaderToXmlFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes contents of DataReader in Xml format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.SaveDataReaderWithSchemaToXmlFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes contents of DataReader plus the data schema in Xml format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.SaveDataReaderToXmlSchemaFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes data schema in Xsd format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.SaveDataTableToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Writes contents of DataTable in Xml format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.SaveDataTableWithSchemaToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Writes both the contents of DataTable and the assoicated data schema in Xml format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.SaveDataTableToXmlSchemaFile(System.Data.DataTable,System.String)">
            <summary>
            Writes the data schema in Xsd format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.SaveDataSetToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Writes contents of DataSet in Xml format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.SaveDataSetWithSchemaToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Writes both the contents of DataSet and the assoicated data schema in Xml format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.SaveDataSetToXmlSchemaFile(System.Data.DataSet,System.String)">
            <summary>
            Writes data schema of DataSet in Xsd format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.GetTableList">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.GetTableList(System.String[],System.String[])">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <param name="includePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="excludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.ConvertTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},System.String)">
            <summary>
            Method to convert table definitions from another database format to the data format supported by this class.
            </summary>
            <param name="tableDefs">Object containing the list of table definitions to be converted.</param>
            <param name="newSchemaName">Specify a new schema (owner) name for the tables when they are recreated in the database managed by the current instance.</param>
            <returns>Object containing the list of table definitions after they have been converted to match the data formats of the current instance.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.CreateTablesFromTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef})">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <returns>Number of tables created.</returns>
            <remarks>Will not create table if table already exists.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.CreateTablesFromTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.CopyTableDataFromTableDefs(PFDataAccessObjects.PFDatabase,System.String,System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="sourceDatabase">Database containing source tables..</param>
            <param name="newSchemaName">Schema to use for identifying the destination tables.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOleDb.CopyTableDataFromTableDefs(PFDataAccessObjects.PFDatabase,System.String[],System.String[],System.String,System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="sourceDatabase">Database containing source tables..</param>
            <param name="tableIncludePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="tableExcludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <param name="newSchemaName">Schema to use for identifying the destination tables.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.DbPlatform">
            <summary>
            Identifies the database platform supported by this class.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.Connection">
            <summary>
            ADO.NET connection object for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.Command">
            <summary>
            ADO.NET command object for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.CommandType">
            <summary>
            Type of command: text or stored procedure.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.CommandTimeout">
            <summary>
            Number of seconds to wait before a command is timed out.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.SQLQuery">
            <summary>
            SQL text to execute.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.ConnectionString">
            <summary>
            Connection string to be used for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.Provider">
            <summary>
            Gets or sets a string that contains the name of the data provider associated with the current connection string.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.DataSource">
            <summary>
            Gets or sets the name of the data source to connect to.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.UDLFileName">
            <summary>
            Gets or sets the name of the Universal Data Link (UDL) file for connecting to the data source.
            UDL files can be created by first creating a blank new.txt file and renaming it to db.udl. Double-click the db.udl file to bring up the DataLink Properties application and use the displayed forms to define your data connection properties.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.PersistSecurityInfo">
            <summary>
            Gets or sets a Boolean value that indicates whether security-sensitive information, such as the password, is returned as part of the connection if the connection is open or has ever been in an open state.
            </summary>
            <remakr>Default is false.</remakr>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.OleDbServices">
            <summary>
            Gets or sets the value to be passed for the OLE DB Services key within the connection string.
            </summary>
            <remarks>Default is -13 which corresponds to a request for resource pooling, automatic transaction enlistment, session-level aggregation, and no client cursor engine. See MSDN for more information.</remarks>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.ConnectionStringKeyVals">
            <summary>
            Returns list of all the keys and their values contained in the current connection string.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.IsConnected">
            <summary>
            Returns true if current connection state is Open.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOleDb.CurrentConnectionState">
            <summary>
            Returns the current connection state of this instance.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.PFDBKeyValueListProcessor`2">
            <summary>
            Basic prototype for a ProFast application or library class.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDBKeyValueListProcessor`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDBKeyValueListProcessor`2.SaveToDatabase(PFCollectionsObjects.PFKeyValueList{`0,`1},System.String,System.String)">
            <summary>
            Saves the public property values contained in the current instance to the database specified by the connection string.
            </summary>
            <param name="kvlist">Key/Value list object to be saved to a database.</param>
            <param name="connectionString">Contains information needed to open the database.</param>
            <param name="listName">Name of the list in the database.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDBKeyValueListProcessor`2.LoadFromDatabase(System.String,System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance from a database record.
            </summary>
            <param name="connectionString">Connection parameters for the database.</param>
            <param name="listName">Name of the list in the database.</param>
            <returns>PFListEx object.</returns>
        </member>
        <member name="T:PFDataAccessObjects.PFTableDef">
            <summary>
            Class for storing and manipulating database table and column information. Class contains a SQL statement that can be used to create the table encapsulated by the instance of this class.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDef.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDef.SaveToXmlFile(System.String)">
            <summary>
            Saves the public property values contained in the current instance to the specified file. Serialization is used for the save.
            </summary>
            <param name="filePath">Full path for output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDef.LoadFromXmlFile(System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance from a file.
            </summary>
            <param name="filePath">Full path for the input file.</param>
            <returns>An instance of PFTableDef.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDef.ToString">
            <summary>
            Routine overrides default ToString method and outputs name, type, scope and value for all class properties and fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDef.PropertiesToString">
            <summary>
            Routine outputs name and value for all properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDef.FieldsToString">
            <summary>
            Routine outputs name and value for all fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDef.ToXmlString">
            <summary>
            Returns a string containing the contents of the object in XML format.
            </summary>
            <returns>String value in xml format.</returns>
            ///<remarks>XML Serialization is used for the transformation.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDef.LoadFromXmlString(System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance stored as a xml formatted string.
            </summary>
            <param name="xmlString">String containing the xml formatted representation of an instance of this class.</param>
            <returns>An instance of PFTableDef.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDef.ToXmlDocument">
            <summary>
            Converts instance of this class into an XML document.
            </summary>
            <returns>XmlDocument</returns>
            ///<remarks>XML Serialization and XmlDocument class are used for the transformation.</remarks>
        </member>
        <member name="P:PFDataAccessObjects.PFTableDef.DbPlatform">
            <summary>
            DbPlatform Property.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFTableDef.DbConnectionString">
            <summary>
            DbConnectionString Property.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFTableDef.TableFullName">
            <summary>
            TableFullName Property.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFTableDef.TableCatalog">
            <summary>
            TableCatalog Property.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFTableDef.TableOwner">
            <summary>
            TableOwner Property.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFTableDef.TableName">
            <summary>
            TableName Property.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFTableDef.TableCreateStatement">
            <summary>
            TableCreateStatement Property.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFTableDef.TableObject">
            <summary>
            TableObject Property.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.PFDataImporter">
            <summary>
            Class to manage the importing of XML and Text objects into ADO.NET objects.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportXmlDocumentToDataSet(System.Xml.XmlDocument)">
            <summary>
            Converts an XML formatted document into an ADO.NET DataSet.
            </summary>
            <param name="xmlDoc">XML document to be converted to a DataSet.</param>
            <returns>ADO.NET DataSet.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportXmlFileToDataSet(System.String)">
            <summary>
            Converts an XML formatted document into an ADO.NET DataSet.
            </summary>
            <param name="xmlFile">Path to file containing XML document to be converted to a DataSet.</param>
            <returns>ADO.NET DataSet.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportXmlFileToDataSet(System.String,System.String)">
            <summary>
            Converts an XML formatted document into an ADO.NET DataSet.
            </summary>
            <param name="xmlFile">Path to file containing XML document to be converted to a DataSet.</param>
            <param name="xsdFile">Path to XML Schema Definition file to be used.</param>
            <returns>ADO.NET DataSet.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportXmlDocumentToDataTable(System.Xml.XmlDocument)">
            <summary>
            Converts an XML formatted document into an ADO.NET DataTable.
            </summary>
            <param name="xmlDoc">XML document to be converted to a DataTable.</param>
            <returns>ADO.NET DataTable.</returns>
            <remarks>Input document must have a schema associated with it. Use Import to DataSet if input has no schema.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportXmlFileToDataTable(System.String)">
            <summary>
            Converts an XML formatted document into an ADO.NET DataTable.
            </summary>
            <param name="xmlFile">Path to XML file containing XML document to convert.</param>
            <returns>ADO.NET DataTable.</returns>
            <remarks>Schema must be included in the XML file. Use Import to DataSet if input has no schema.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportXmlFileToDataTable(System.String,System.String)">
            <summary>
            Converts an XML formatted document into an ADO.NET DataTable.
            </summary>
            <param name="xmlFile">Path to XML file containing XML document to convert.</param>
            <param name="xsdFile">Path to XML Schema Definition file to be used.</param>
            <returns>ADO.NET DataTable.</returns>
            <remarks>Schema must be included in the XML file. Use Import to DataSet if input has no schema.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportXmlSchemaToDataTable(System.String)">
            <summary>
            Converts an XML formatted document schema into an ADO.NET DataTable.
            </summary>
            <param name="file">Path to file containing XML document schema.</param>
            <returns>ADO.NET DataTable.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportDelimitedTextFileToDataSet(System.String,PFTextFiles.PFDelimitedDataLine)">
            <summary>
            Routine to copy data from a delimited data text file to a table in a dataset.
            </summary>
            <param name="dataFileName">Path to file containing the data.</param>
            <param name="lineDef">PFDelimitedDataLine object containing the line formatting information for the specified data file.</param>
            <returns>ADO.NET DataSet.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportDelimitedTextFileToDataSet(System.String,System.String)">
            <summary>
            Routine to copy data from a delimited data text file to a table in a dataset.
            </summary>
            <param name="lineDefFileName">Path to file containing the PFDelimitedDataLine object that encapsulates the line formatting information for the specified data file.</param>
            <param name="dataFileName">Path to file containing the data.</param>
            <returns>ADO.NET DataSet.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportDelimitedTextFileToDataTable(System.String,PFTextFiles.PFDelimitedDataLine)">
            <summary>
            Routine to copy data from a delimited data text file to an ADO.NET DataTable object.
            </summary>
            <param name="dataFileName">Path to file containing the data.</param>
            <param name="lineDef">PFDelimitedDataLine object containing the line formatting information for the specified data file.</param>
            <returns>ADO.NET DataTable.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportDelimitedTextFileToDataTable(System.String,System.String)">
            <summary>
            Routine to copy data from a delimited data text file to an ADO.NET DataTable object.
            </summary>
            <param name="dataFileName">Path to file containing the data.</param>
            <param name="lineDefFileName">Path to file containing the PFDelimitedDataLine object that encapsulates the line formatting information for the specified data file.</param>
            <returns>ADO.NET DataTable.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.CreateDelimitedLineDefinitionFromTextFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Routine to parse the first line of a delimited text file and infer the file's column definitions.
            </summary>
            <param name="textFilePath">Path to file containing delimited data.</param>
            <param name="columnDelimiter">Delimiter character used to separate column data.</param>
            <param name="lineTerminator">Delimiter that marks the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, first line of file contains column names. Otherwise, file does not contain column names.</param>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.CreateDelimitedLineDefinitionFromTextFile(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Routine to parse the first line of a delimited text file and infer the file's column definitions.
            </summary>
            <param name="textFilePath">Path to file containing delimited data.</param>
            <param name="columnDelimiter">Delimiter character used to separate column data.</param>
            <param name="lineTerminator">Delimiter that marks the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, first line of file contains column names. Otherwise, file does not contain column names.</param>
            <param name="stringValuesSurroundedWithQuotationMarks">If true, values in file are surrounded by double quotes.</param>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.GetDelimitedTextFileSchemaTable(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Routine to get DataTable containing schema information only for a delimited text file.
            </summary>
            <param name="textFilePath">Path to delimited text file.</param>
            <param name="columnDelimiter">Value used to separate columns.</param>
            <param name="lineTerminator">Value used to indicate end of line.</param>
            <param name="columnNamesOnFirstLine">If true, first line of file contains column names. Otherwise, file does not contain column names.</param>
            <returns>DataTable containing schema.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportDelimitedTextFileToDatabase(System.String,System.String,PFDataAccessObjects.PFDatabase,System.String,System.Int32)">
            <summary>
            Routine to copy data from a delimited data text file to a database table.
            </summary>
            <param name="dataFileName">Path to file containing the data.</param>
            <param name="lineDefFileName">Path to file containing the PFDelimitedDataLine object that encapsulates the line formatting information for the specified data file.</param>
            <param name="db">Database object for the target database.</param>
            <param name="tableName">Name of table in database to which data is to be copied.</param>
            <param name="updateBatchSize">Number of individual SQL modification statements to include in a table modification operation.</param>
            <returns>Number of rows uploaded to the database.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportFixedLengthTextFileToDataSet(System.String,PFTextFiles.PFFixedLengthDataLine)">
            <summary>
            Routine to copy data from a fixed length data text file to a table in a dataset.
            </summary>
            <param name="dataFileName">Path to file containing the data.</param>
            <param name="lineDef">PFFixedLengthDataLine object containing the line formatting information for the specified data file.</param>
            <returns>ADO.NET DataSet.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportFixedLengthTextFileToDataSet(System.String,System.String)">
            <summary>
            Routine to copy data from a fixed length data text file to a table in a dataset.
            </summary>
            <param name="lineDefFileName">Path to file containing the PFFixedLengthDataLine object that encapsulates the line formatting information for the specified data file.</param>
            <param name="dataFileName">Path to file containing the data.</param>
            <returns>ADO.NET DataSet.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportFixedLengthTextFileToDataTable(System.String,PFTextFiles.PFFixedLengthDataLine)">
            <summary>
            Routine to copy data from a fixed length data text file to an ADO.NET DataTable object.
            </summary>
            <param name="dataFileName">Path to file containing the data.</param>
            <param name="lineDef">PFFixedLengthDataLine object containing the line formatting information for the specified data file.</param>
            <returns>ADO.NET DataTable.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportFixedLengthTextFileToDataTable(System.String,System.String)">
            <summary>
            Routine to copy data from a fixed length data text file to an ADO.NET DataTable object.
            </summary>
            <param name="dataFileName">Path to file containing the data.</param>
            <param name="lineDefFileName">Path to file containing the PFFixedLengthDataLine object that encapsulates the line formatting information for the specified data file.</param>
            <returns>ADO.NET DataTable.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.ImportFixedLengthTextFileToDatabase(System.String,System.String,PFDataAccessObjects.PFDatabase,System.String,System.Int32)">
            <summary>
            Routine to copy data from a fixed length data text file to a database table.
            </summary>
            <param name="dataFileName">Path to file containing the data.</param>
            <param name="lineDefFileName">Path to file containing the PFFixedLengthDataLine object that encapsulates the line formatting information for the specified data file.</param>
            <param name="db">Database object for the target database.</param>
            <param name="tableName">Name of table in database to which data is to be copied.</param>
            <param name="updateBatchSize">Number of individual SQL modification statements to include in a table modification operation.</param>
            <returns>Number of rows uploaded to the database.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataImporter.GetFixedLengthTextFileSchemaTable(PFTextFiles.PFFixedLengthDataLine,System.String)">
            <summary>
            Routine to get DataTable containing schema information only for a delimited text file.
            </summary>
            <param name="fxlDataLine">Object containing definition of data line for a fixed length text file.</param>
            <param name="textFilePath">Path to delimited text file.</param>
            <returns>DataTable containing schema.</returns>
        </member>
        <member name="T:PFDataAccessObjects.PFOdbc">
            <summary>
            Class contains functionality for accessing databases using System.Data.Odbc namespace.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.GetConnectionStringKeyVals">
            <summary>
            Returns a list of key/value pairs that contains all the keys and their associated values for the current connection string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.CreateTable(System.Data.DataTable)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <returns>True if table created; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.CreateTable(System.Data.DataTable,System.String@)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="createScript">Copy of the script used to create the table.</param>
            <returns>True if table created; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.CreateTableUsingOdbcSyntax(System.Data.DataTable,System.String@)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="createScript">Copy of the script used to create the table.</param>
            <returns>True if table created; otherwise false.</returns>
            <remarks>This method is used for testing only. Use the CreateTable method for application work.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.CreateTableUsingCustomScript(System.String)">
            <summary>
            Method creates a table in the database using a custom SQL create table script built by the caller.
            </summary>
            <param name="createScript">Copy of the script used to create the table.</param>
            <returns>True if table created; otherwise false.</returns>
            <remarks>This method runs an ODBC ExecuteNonQuery command.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.BuildTableCreateStatement(System.Data.DataTable)">
            <summary>
            Builds a SQL table create statement using the properties on the specified data table.
            </summary>
            <param name="dt">Object containing the table definition.</param>
            <returns>String containing a SQL table create statement.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.GetDatabasePlatform">
            <summary>
            Routine to determine what database platform is supported by the current ODBC driver.
            </summary>
            <returns>Type of DatabasePlatform.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.TypeIsUserTable(System.Data.DataRow)">
            <summary>
            Function to determine if the type of table object is a user (base) table. This function is used to eliminate system tables from the output.
            </summary>
            <param name="dr">DataRow returned by GetSchema.</param>
            <returns>True if the table is a user or base table.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.GetFullTableName(System.Data.DataRow)">
            <summary>
            Function to build a qualified table name. Ususally this means attaching schema name in front of table name. In some cases both the catalog name and the schema name will be prepended to the table namne.
             Result depends on the requirements of the database platform implementing this function.
            </summary>
            <param name="dr">DataRow returned by GetSchema that contains Tables information.</param>
            <returns>Full table name in either schemaname.tablename or catalogname.schemaname.tablename format.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.GetTableNameQualifiers(System.Data.DataRow)">
            <summary>
            Function to return the catalog, schema and name parts of a fully qualified table name. Some databases will only return the schema and name since catalog is not used by those database engines.
            </summary>
            <param name="dr">DataRow returned by GetSchema that contains Tables information.</param>
            <returns>Object containing the different qualifiers in the table name.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.RebuildFullTableName(PFDataAccessObjects.PFTableDef,System.String)">
            <summary>
            Routine to recreate with a different schema name. Used when transferring a table definition to a new database.
            </summary>
            <param name="tabDef">Object containing the table definition to be reformatted.</param>
            <param name="newSchemaName">Schema name to apply to the reformatted table name.</param>
            <returns>Table name that includes the new schema name.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.TableExists(PFDataAccessObjects.PFTableDef)">
            <summary>
            Routine uses table name information supplied by a PFTableDef object to determine if a table exists in the database.
            </summary>
            <param name="td">Object containing table definition information.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.DropTable(PFDataAccessObjects.PFTableDef)">
            <summary>
            Routine retrieves table name information supplied by a PFTableDef object to drop (delete) a table in the database.
            </summary>
            <param name="td">Object containing table definition information.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.TableExists(System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.TableExists(System.String,System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="schemaName">Name of the schema, if there is one. If not, set to empty string.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.TableExists(System.String,System.String,System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="catalogName">Name of the database, if necessary for lookup. Otherwise, set to string.empty.</param>
            <param name="schemaName">Name of the schema, if there is one. If not, set to empty string.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.DropTable(System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.DropTable(System.String,System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="schemaName">Name of the schema, if there is one for the table to delete. If not, set to empty string.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.DropTable(System.String,System.String,System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="catalogName">Name of the database, if necessary to identify table to delete. Otherwise, set to string.empty.</param>
            <param name="schemaName">Name of the schema, if there is one for the table to delete. If not, set to empty string.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.OpenConnection">
            <summary>
            Opens connection to database.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.CloseConnection">
            <summary>
            Closes connection to database.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.RunQueryDataReader">
            <summary>
            Runs query specified via properties.
            </summary>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.RunQueryDataReader(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.RunQueryDataSet">
            <summary>
            Runs query.
            </summary>
            <returns>Returns dataset object.</returns>
            <remarks>This implementation limits result to one table in the dataset that is returned.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.RunQueryDataSet(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Dataset object.</returns>
            <remarks>This implementation limits result to one table in the dataset that is returned.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.RunQueryDataTable">
            <summary>
            Runs query.
            </summary>
            <returns>Returns dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.RunQueryDataTable(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.RunNonQuery">
            <summary>
            Runs a non-query (e.g. update, insert, delete statements).
            </summary>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.RunNonQuery(System.String,System.Data.CommandType)">
            <summary>
            Runs a non-query (e.g. update, insert, delete statements) using the query specified in the parameters.
            </summary>
            <param name="sqlText">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.GetQueryDataSchema">
            <summary>
            Retrieves the data schema represented by the query text provided to this instance of the class.
            </summary>
            <returns>Returns data table object that contains schema for the query defined for this instance.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.GetQueryDataSchema(System.String,System.Data.CommandType)">
            <summary>
            Retrieves the data schema represented by the query text provided to this routine.
            </summary>
            <param name="sqlQuery">SQL to parse.</param>
            <param name="pCommandType">Type of command represented by the query: text or stored procedure.</param>
            <returns>DataTable object containing the schema information for the columns that would be returned by this query.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ConvertDataReaderToDataTable(System.Data.Common.DbDataReader)">
            <summary>
            Transforms a DataReader object into a DataTable object.
            </summary>
            <param name="rdr">DataReader object.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ConvertDataReaderToDataTable(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Transforms a DataReader object into a DataTable object.
            </summary>
            <param name="rdr">DataReader object.</param>
            <param name="tableName">Name that identifies the table.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ProcessDataReader(System.Data.Common.DbDataReader)">
            <summary>
            Returns data from a DataReader object to the caller.
            </summary>
            <param name="rdr">DataReader object containing data to be returned to the caller.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ProcessDataSet(System.Data.DataSet)">
            <summary>
            Returns data from a DataSet to the caller.
            </summary>
            <param name="ds">DataSet object containing data to be returned to the caller.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ProcessDataTable(System.Data.DataTable)">
            <summary>
            Returns data from a DataTable to the caller.
            </summary>
            <param name="tab">DataTable object containing data to be returned to the caller.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ProcessDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Returns data from a DataTable to the caller.
            </summary>
            <param name="tab">DataTable object containing data to be returned to the caller.</param>
            <param name="tableNumber">Arbitrary number used for identifying multiple DataTables.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ImportDataFromDataTable(System.Data.DataTable)">
            <summary>
            Loads rows contained in an ADO.NET data table to an ODBC database table. Table must already exist. See CreateTable methods to create a new table.
            </summary>
            <param name="dt">DataTable object containing data to load.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ImportDataFromDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Loads rows contained in an ADO.NET data table to an ODBC database table. Table must already exist. See CreateTable methods to create a new table.
            </summary>
            <param name="dt">DataTable object containing data to load.</param>
            <param name="updateBatchSize">Number of individual SQL modification statements to include in a table modification operation.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ExtractDelimitedDataFromDataReader(System.Data.Common.DbDataReader,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="rdr">Data reader object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ExtractDelimitedDataFromDataSet(System.Data.DataSet,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ExtractDelimitedDataFromTable(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="tab">DataTable object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ExtractFixedLengthDataFromDataReader(System.Data.Common.DbDataReader,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="rdr">Data reader object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ExtractFixedLengthDataFromDataSet(System.Data.DataSet,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ExtractFixedLengthDataFromTable(System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="tab">DataTable object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.LoadXmlFileToDataTable(System.String)">
            <summary>
            Reads contents of xml file into a DataTable
            </summary>
            <param name="filePath">Location of Xml file.</param>
            <returns>DataTable with data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.LoadXmlFileToDataSet(System.String)">
            <summary>
            Reads contents of xml file into a DataSet
            </summary>
            <param name="filePath">Location of Xml file.</param>
            <returns>DataSet with data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.SaveDataReaderToXmlFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes contents of DataReader in Xml format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.SaveDataReaderWithSchemaToXmlFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes contents of DataReader plus the data schema in Xml format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.SaveDataReaderToXmlSchemaFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes data schema in Xsd format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.SaveDataTableToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Writes contents of DataTable in Xml format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.SaveDataTableWithSchemaToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Writes both the contents of DataTable and the assoicated data schema in Xml format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.SaveDataTableToXmlSchemaFile(System.Data.DataTable,System.String)">
            <summary>
            Writes the data schema in Xsd format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.SaveDataSetToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Writes contents of DataSet in Xml format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.SaveDataSetWithSchemaToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Writes both the contents of DataSet and the assoicated data schema in Xml format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.SaveDataSetToXmlSchemaFile(System.Data.DataSet,System.String)">
            <summary>
            Writes data schema of DataSet in Xsd format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.GetTableList">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.GetTableList(System.String[],System.String[])">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <param name="includePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="excludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.ConvertTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},System.String)">
            <summary>
            Method to convert table definitions from another database format to the data format supported by this class.
            </summary>
            <param name="tableDefs">Object containing the list of table definitions to be converted.</param>
            <param name="newSchemaName">Specify a new schema (owner) name for the tables when they are recreated in the database managed by the current instance.</param>
            <returns>Object containing the list of table definitions after they have been converted to match the data formats of the current instance.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.CreateTablesFromTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef})">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <returns>Number of tables created.</returns>
            <remarks>Will not create table if table already exists.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.CreateTablesFromTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.CopyTableDataFromTableDefs(PFDataAccessObjects.PFDatabase,System.String,System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="sourceDatabase">Database containing source tables..</param>
            <param name="newSchemaName">Schema to use for identifying the destination tables.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFOdbc.CopyTableDataFromTableDefs(PFDataAccessObjects.PFDatabase,System.String[],System.String[],System.String,System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="sourceDatabase">Database containing source tables..</param>
            <param name="tableIncludePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="tableExcludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <param name="newSchemaName">Schema to use for identifying the destination tables.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="P:PFDataAccessObjects.PFOdbc.Connection">
            <summary>
            ADO.NET connection object for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOdbc.Command">
            <summary>
            ADO.NET command object for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOdbc.CommandType">
            <summary>
            Type of command: text or stored procedure.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOdbc.CommandTimeout">
            <summary>
            Number of seconds to wait before a command is timed out.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOdbc.SQLQuery">
            <summary>
            SQL text to execute.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOdbc.ConnectionString">
            <summary>
            Connection string to be used for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOdbc.Driver">
            <summary>
            Name of ODBC driver to use for this connection.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOdbc.Dsn">
            <summary>
            Name of DSN containing connection properties. Usually defined via the Windows system ODBC Administrator program. DataSources (ODBC) or odbcadm32.exe applications.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOdbc.ConnectionStringKeyVals">
            <summary>
            Returns list of all the keys and their values contained in the current connection string.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOdbc.IsConnected">
            <summary>
            Returns true if current connection state is Open.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOdbc.CurrentConnectionState">
            <summary>
            Returns the current connection state of this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFOdbc.DbPlatform">
            <summary>
            Specifies the underlying database platform supported by the ODBC driver (if known)
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.DatabasePlatform">
            <summary>
            Type of database in which the data access operations are occurring.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.DataCategory">
            <summary>
            Enumerates the categories of data types that the .NET data types fall into.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.DataTypeMapping">
            <summary>
            Struct used in constucting generic odbc and oledb create table statements.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.TableCopyResult">
            <summary>
            Enum for describing result of a table copy operation.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.TableCopyDetails">
            <summary>
            Detailed table copy information.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.TableNameQualifiers">
            <summary>
            Three common parts to a table name.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.enSQLCE35Defaults">
            <summary>
            Maximum values for key SQLCE 3.5 connection string parameters.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.enSQLCE40Defaults">
            <summary>
            Maximum values for key SQLCE 4.0 connection string parameters.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.SQLCE35EncryptionMode">
            <summary>
            Enumeration of valid SQL Server CE 3.5 encryption modes.
            </summary>
        </member>
        <member name="F:PFDataAccessObjects.SQLCE35EncryptionMode.Unknown">
            <summary>
            Not specified or do not know.
            </summary>
        </member>
        <member name="F:PFDataAccessObjects.SQLCE35EncryptionMode.EngineDefault">
            <summary>
            In this mode, the database is encrypted using AES256_SHA512, where AES256 is the encryption algorithm and SHA512 is the secure hash algorithm. The default key length is used to maintain backward compatibility with SQL Server Compact 3.5.
            </summary>
        </member>
        <member name="F:PFDataAccessObjects.SQLCE35EncryptionMode.PlatformDefault">
            <summary>
            The algorithms used in this mode are AES128_SHA256, where AES128 is the encryption algorithm with 128-bit key and SHA256 is the hash algorithm with 256-bit key. This is the default encryption mode option on all SQL Server Compact 4.0 supported platforms.
            </summary>
        </member>
        <member name="F:PFDataAccessObjects.SQLCE35EncryptionMode.PPC2003Compatibility">
            <summary>
            Pocket PC compatibility mode.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.SQLCE40EncryptionMode">
            <summary>
            Type of encryption for a SQL Server CE 4.0 database.
            </summary>
        </member>
        <member name="F:PFDataAccessObjects.SQLCE40EncryptionMode.Unknown">
            <summary>
            Not specified or do not know.
            </summary>
        </member>
        <member name="F:PFDataAccessObjects.SQLCE40EncryptionMode.EngineDefault">
            <summary>
            In this mode, the database is encrypted using AES256_SHA512, where AES256 is the encryption algorithm and SHA512 is the secure hash algorithm. The default key length is used to maintain backward compatibility with SQL Server Compact 3.5.
            </summary>
        </member>
        <member name="F:PFDataAccessObjects.SQLCE40EncryptionMode.PlatformDefault">
            <summary>
            The algorithms used in this mode are AES128_SHA256, where AES128 is the encryption algorithm with 128-bit key and SHA256 is the hash algorithm with 256-bit key. This is the default encryption mode option on all SQL Server Compact 4.0 supported platforms.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.QueryBuilderDatabasePlatform">
            <summary>
            Used to determine which metadata provider and syntax checker the query builder will use.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.AnsiSQLLevel">
            <summary>
            Used to determine what type of SQL syntax checking to use for OLEDB and ODBC connections.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.PFSQLServer">
            <summary>
            Class to manage access to SQL Server databases.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="serverName">Name of the SQL Server that will be used.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.CreateTable(System.Data.DataTable)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <returns>True if table created; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.CreateTable(System.Data.DataTable,System.String@)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="createScript">Copy of the script used to create the table.</param>
            <returns>True if table created; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.BuildTableCreateStatement(System.Data.DataTable)">
            <summary>
            Builds a SQL table create statement using the properties on the specified data table.
            </summary>
            <param name="dt">Object containing the table definition.</param>
            <returns>String containing a SQL table create statement.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.TableExists(System.String,System.String,System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="catalogName">Name of database. This parameter is ignored and only schema and table name is used for the existence check.</param>
            <param name="schemaName">Name of the schema to which the table belongs.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.DropTable(System.String,System.String,System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="catalogName">Name of database. This parameter is ignored and only schema and table name is used for the existence check.</param>
            <param name="schemaName">Name of the schema to which the table belongs.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.TableExists(System.String,System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="schemaName">Name of the schema to which the table belongs.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.DropTable(System.String,System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="schemaName">Name of the schema to which the table belongs.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.TableExists(System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.DropTable(System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.OpenConnection">
            <summary>
            Opens connection to database.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.CloseConnection">
            <summary>
            Closes connection to database.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.RunQueryDataReader">
            <summary>
            Runs query specified via properties.
            </summary>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.RunQueryDataReader(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.RunQueryDataSet">
            <summary>
            Runs query.
            </summary>
            <returns>Returns dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.RunQueryDataSet(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.RunQueryDataTable">
            <summary>
            Runs query.
            </summary>
            <returns>Returns dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.RunQueryDataTable(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.RunNonQuery">
            <summary>
            Runs a non-query (e.g. update, insert, delete statements).
            </summary>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.RunNonQuery(System.String,System.Data.CommandType)">
            <summary>
            Runs a non-query (e.g. update, insert, delete statements) using the query specified in the parameters.
            </summary>
            <param name="sqlText">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.GetQueryDataSchema">
            <summary>
            Retrieves the data schema represented by the query text provided to this instance of the class.
            </summary>
            <returns>Returns data table object that contains schema for the query defined for this instance.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.GetQueryDataSchema(System.String,System.Data.CommandType)">
            <summary>
            Retrieves the data schema represented by the query text provided to this routine.
            </summary>
            <param name="sqlQuery">SQL to parse.</param>
            <param name="pCommandType">Type of command represented by the query: text or stored procedure.</param>
            <returns>DataTable object containing the schema information for the columns that would be returned by this query.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.GetConnectionStringKeyVals">
            <summary>
            Returns a list of key/value pairs that contains all the keys and their associated values for the current connection string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ConvertDataReaderToDataTable(System.Data.Common.DbDataReader)">
            <summary>
            Transforms a SqlDataReader object into a DataTable object.
            </summary>
            <param name="rdr">SqlDataReader object.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ConvertDataReaderToDataTable(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Transforms a SqlDataReader object into a DataTable object.
            </summary>
            <param name="rdr">SqlDataReader object.</param>
            <param name="tableName">Name that identifies the table.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ProcessDataReader(System.Data.Common.DbDataReader)">
            <summary>
            Returns data from a SqlDataReader object to the caller.
            </summary>
            <param name="rdr">SqlDataReader object containing data to be returned to the caller.</param>
            <remarks>Results can be retrieved by subscribing to the ResultDelegate event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ProcessDataSet(System.Data.DataSet)">
            <summary>
            Returns data from a DataSet to the caller.
            </summary>
            <param name="ds">DataSet object containing data to be returned to the caller.</param>
            <remarks>Results can be retrieved by subscribing to ResultDelegate event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ProcessDataTable(System.Data.DataTable)">
            <summary>
            Returns data from a DataTable to the caller.
            </summary>
            <param name="tab">DataTable object containing data to be returned to the caller.</param>
            <remarks>Results can be retrieved by subscribing to the ResultDelegate event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ImportDataFromDataTable(System.Data.DataTable)">
            <summary>
            Loads rows contained in an ADO.NET data table to a SQLCE database table. Table must already exist. See CreateTable methods to create a new table.
            </summary>
            <param name="dt">DataTable object containing data to load.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ImportDataFromDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Loads rows contained in an ADO.NET data table to a SQLCE database table. Table must already exist. See CreateTable methods to create a new table.
            </summary>
            <param name="dt">DataTable object containing data to load.</param>
            <param name="updateBatchSize">Number of individual SQL modification statements to include in a table modification operation.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ProcessDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Returns data from a DataTable to the caller.
            </summary>
            <param name="tab">DataTable object containing data to be returned to the caller.</param>
            <param name="tableNumber">Arbitrary number used for identifying multiple DataTables.</param>
            <remarks>Results can be retrieved by subscribing to the ResultDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ExtractDelimitedDataFromDataReader(System.Data.Common.DbDataReader,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="rdr">Data reader object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ExtractDelimitedDataFromDataSet(System.Data.DataSet,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ExtractDelimitedDataFromTable(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="tab">DataTable object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ExtractFixedLengthDataFromDataReader(System.Data.Common.DbDataReader,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="rdr">Data reader object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ExtractFixedLengthDataFromDataSet(System.Data.DataSet,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ExtractFixedLengthDataFromTable(System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="tab">DataTable object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.LoadXmlFileToDataTable(System.String)">
            <summary>
            Reads contents of xml file into a DataTable
            </summary>
            <param name="filePath">Location of Xml file.</param>
            <returns>DataTable with data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.LoadXmlFileToDataSet(System.String)">
            <summary>
            Reads contents of xml file into a DataSet
            </summary>
            <param name="filePath">Location of Xml file.</param>
            <returns>DataSet with data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.SaveDataReaderToXmlFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes contents of DataReader in Xml format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.SaveDataReaderWithSchemaToXmlFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes contents of DataReader plus the data schema in Xml format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.SaveDataReaderToXmlSchemaFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes data schema in Xsd format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.SaveDataTableToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Writes contents of DataTable in Xml format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.SaveDataTableWithSchemaToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Writes both the contents of DataTable and the associated data schema in Xml format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.SaveDataTableToXmlSchemaFile(System.Data.DataTable,System.String)">
            <summary>
            Writes the data schema in Xsd format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.SaveDataSetToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Writes contents of DataSet in Xml format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.SaveDataSetWithSchemaToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Writes both the contents of DataSet and the assoicated data schema in Xml format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.SaveDataSetToXmlSchemaFile(System.Data.DataSet,System.String)">
            <summary>
            Writes data schema of DataSet in Xsd format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.TypeIsUserTable(System.Data.DataRow)">
            <summary>
            Function to determine if the type of table object is a user (base) table. This function is used to eliminate system tables from the output.
            </summary>
            <param name="dr">DataRow returned by GetSchema.</param>
            <returns>True if the table is a user or base table.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.GetFullTableName(System.Data.DataRow)">
            <summary>
            Function to build a qualified table name. Ususally this means attaching schema name in front of table name. In some cases both the catalog name and the schema name will be prepended to the table namne.
             Result depends on the requirements of the database platform implementing this function.
            </summary>
            <param name="dr">DataRow returned by GetSchema that contains Tables information.</param>
            <returns>Full table name in either schemaname.tablename or catalogname.schemaname.tablename format.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.GetTableNameQualifiers(System.Data.DataRow)">
            <summary>
            Function to return the catalog, schema and name parts of a fully qualified table name. Some databases will only return the schema and name since catalog is not used by those database engines.
            </summary>
            <param name="dr">DataRow returned by GetSchema that contains Tables information.</param>
            <returns>Object containing the different qualifiers in the table name.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.RebuildFullTableName(PFDataAccessObjects.PFTableDef,System.String)">
            <summary>
            Routine to recreate with a different schema name. Used when transferring a table definition to a new database.
            </summary>
            <param name="tabDef">Object containing the table definition to be reformatted.</param>
            <param name="newSchemaName">Schema name to apply to the reformatted table name.</param>
            <returns>Table name that includes the new schema name.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.TableExists(PFDataAccessObjects.PFTableDef)">
            <summary>
            Routine uses table name information supplied by a PFTableDef object to determine if a table exists in the database.
            </summary>
            <param name="td">Object containing table definition information.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.DropTable(PFDataAccessObjects.PFTableDef)">
            <summary>
            Routine retrieves table name information supplied by a PFTableDef object to drop (delete) a table in the database.
            </summary>
            <param name="td">Object containing table definition information.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.GetTableList">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.GetTableList(System.String[],System.String[])">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <param name="includePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="excludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.ConvertTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},System.String)">
            <summary>
            Method to convert table definitions from another database format to the data format supported by this class.
            </summary>
            <param name="tableDefs">Object containing the list of table definitions to be converted.</param>
            <param name="newSchemaName">Specify a new schema (owner) name for the tables when they are recreated in the database managed by the current instance.</param>
            <returns>Object containing the list of table definitions after they have been converted to match the data formats of the current instance.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.CreateTablesFromTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef})">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <returns>Number of tables created.</returns>
            <remarks>Will not create table if table already exists.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.CreateTablesFromTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.CopyTableDataFromTableDefs(PFDataAccessObjects.PFDatabase,System.String,System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="sourceDatabase">Database containing source tables..</param>
            <param name="newSchemaName">Schema to use for identifying the destination tables.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFSQLServer.CopyTableDataFromTableDefs(PFDataAccessObjects.PFDatabase,System.String[],System.String[],System.String,System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="sourceDatabase">Database containing source tables..</param>
            <param name="tableIncludePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="tableExcludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <param name="newSchemaName">Schema to use for identifying the destination tables.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.DbPlatform">
            <summary>
            Identifies the database platform supported by this class.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.Connection">
            <summary>
            ADO.NET connection object for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.Command">
            <summary>
            ADO.NET command object for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.CommandType">
            <summary>
            Type of command: text or stored procedure.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.CommandTimeout">
            <summary>
            Number of seconds to wait before a command is timed out.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.SQLQuery">
            <summary>
            SQL text to execute.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.ServerName">
            <summary>
            Name of the server containing the data.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.DatabaseName">
            <summary>
            Name of the database containing the data.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.UseIntegratedSecurity">
            <summary>
            If true, Windows integrated security will be used to connect to the database. If false, username and password must be supplied and SQL Server will manage the logon.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.Username">
            <summary>
            Name of user if SQL Server logon security being used (UseIntegratedSecurity=false).
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.Password">
            <summary>
            Password for user if SQL Server logon security being used (UseIntegratedSecurity=false).
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.ConnectionString">
            <summary>
            Connection string to be used for this instance. Is built automatically if server, database, etc. are specified separately via this instance's properties. If a complete connection string is passed into this property, then it is parsed and the various components are stored in this instance's various properties (server, database, etc.).
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.AsynchronousProcessing">
            <summary>
            Specified whether or not to use asynchronous processing for this instance. (Not yet implemented in this class?)
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.ApplicationName">
            <summary>
            Name of application submitting the query.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.WorkstationId">
            <summary>
            Name of workstation submitting the query.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.ConnectionStringKeyVals">
            <summary>
            Returns list of all the keys and their values contained in the current connection string.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFSQLServer.IsConnected">
            <summary>
            Returns true if the connection is open.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.PFDBListProcessor`1">
            <summary>
            Basic prototype for a ProFast application or library class.
            </summary>
            <typeparam name="T">Represents the type contained in the PFList object that will be operated on.</typeparam>
        </member>
        <member name="M:PFDataAccessObjects.PFDBListProcessor`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDBListProcessor`1.SaveToDatabase(PFCollectionsObjects.PFList{`0},System.String,System.String)">
            <summary>
            Saves the public property values contained in the current instance to the database specified by the connection string.
            </summary>
            <param name="list">List object that will be saved to the database.</param>
            <param name="connectionString">Contains information needed to open the database.</param>
            <param name="listName">Name of the list in the database.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDBListProcessor`1.LoadFromDatabase(System.String,System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance from a database record.
            </summary>
            <param name="connectionString">Connection parameters for the database.</param>
            <param name="listName">Name of the list in the database.</param>
            <returns>PFListEx object.</returns>
        </member>
        <member name="T:PFDataAccessObjects.PFMsOracle">
            <summary>
            Class manages access to Oracle databases using the Microsoft .NET Provider for Oracle.
            </summary>
            <remak>Queries that use inner join syntax will fail. Provider cannot handle this when using FillSchema method. Change inner join to join as a workaround.</remak>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="dataSource"></param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.GetConnectionStringKeyVals">
            <summary>
            Returns a list of key/value pairs that contains all the keys and their associated values for the current connection string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.CreateTable(System.Data.DataTable)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <returns>True if table created; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.CreateTable(System.Data.DataTable,System.String@)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="createScript">Copy of the script used to create the table.</param>
            <returns>True if table created; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.TableExists(System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.TableExists(System.String,System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="schemaName">Schema or owner name for the table.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.TableExists(System.String,System.String,System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="catalogName">Catalog name is ignored by this version of method.</param>
            <param name="schemaName">Schema or owner name for the table.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.DropTable(System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
            <remarks>There could be unexpected results from this method because schema name is not specified.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.DropTable(System.String,System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="schemaName">Schema or owner name for the table.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.DropTable(System.String,System.String,System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="catalogName">Catalog name is ignored by this version of method.</param>
            <param name="schemaName">Schema or owner name for the table.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.BuildTableCreateStatement(System.Data.DataTable)">
            <summary>
            Builds a SQL table create statement using the properties on the specified data table.
            </summary>
            <param name="dt">Object containing the table definition.</param>
            <returns>String containing a SQL table create statement.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.OpenConnection">
            <summary>
            Opens connection to database.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.CloseConnection">
            <summary>
            Closes connection to database.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.RunQueryDataReader">
            <summary>
            Runs query specified via properties.
            </summary>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.RunQueryDataReader(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.RunQueryDataSet">
            <summary>
            Runs query.
            </summary>
            <returns>Returns dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.RunQueryDataSet(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.RunQueryDataTable">
            <summary>
            Runs query.
            </summary>
            <returns>Returns dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.RunQueryDataTable(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.RunNonQuery">
            <summary>
            Runs a non-query (e.g. update, insert, delete statements).
            </summary>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.RunNonQuery(System.String,System.Data.CommandType)">
            <summary>
            Runs a non-query (e.g. update, insert, delete statements) using the query specified in the parameters.
            </summary>
            <param name="sqlText">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.GetQueryDataSchema">
            <summary>
            Retrieves the data schema represented by the query text provided to this instance of the class.
            </summary>
            <returns>Returns data table object that contains schema for the query defined for this instance.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.GetQueryDataSchema(System.String,System.Data.CommandType)">
            <summary>
            Retrieves the data schema represented by the query text provided to this routine.
            </summary>
            <param name="sqlQuery">SQL to parse.</param>
            <param name="pCommandType">Type of command represented by the query: text or stored procedure.</param>
            <returns>DataTable object containing the schema information for the columns that would be returned by this query.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ConvertDataReaderToDataTable(System.Data.Common.DbDataReader)">
            <summary>
            Transforms a SqlDataReader object into a DataTable object.
            </summary>
            <param name="rdr">SqlDataReader object.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ConvertDataReaderToDataTable(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Transforms a SqlDataReader object into a DataTable object.
            </summary>
            <param name="rdr">SqlDataReader object.</param>
            <param name="tableName">Name that identifies the table.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ProcessDataReader(System.Data.Common.DbDataReader)">
            <summary>
            Returns data from a SqlDataReader object to the caller.
            </summary>
            <param name="rdr">SqlDataReader object containing data to be returned to the caller.</param>
            <remarks>Results can be retrieved by subscribing to the ResultDelegate event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ProcessDataSet(System.Data.DataSet)">
            <summary>
            Returns data from a DataSet to the caller.
            </summary>
            <param name="ds">DataSet object containing data to be returned to the caller.</param>
            <remarks>Results can be retrieved by subscribing to ResultDelegate event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ProcessDataTable(System.Data.DataTable)">
            <summary>
            Returns data from a DataTable to the caller.
            </summary>
            <param name="tab">DataTable object containing data to be returned to the caller.</param>
            <remarks>Results can be retrieved by subscribing to the ResultDelegate event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ImportDataFromDataTable(System.Data.DataTable)">
            <summary>
            Loads rows contained in an ADO.NET data table to an Oracle database table. Table must already exist. See CreateTable methods to create a new table.
            </summary>
            <param name="dt">DataTable object containing data to load.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ImportDataFromDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Loads rows contained in an ADO.NET data table to an Oracle database table. Table must already exist. See CreateTable methods to create a new table.
            </summary>
            <param name="dt">DataTable object containing data to load.</param>
            <param name="updateBatchSize">Number of individual SQL modification statements to include in a table modification operation.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ProcessDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Returns data from a DataTable to the caller.
            </summary>
            <param name="tab">DataTable object containing data to be returned to the caller.</param>
            <param name="tableNumber">Arbitrary number used for identifying multiple DataTables.</param>
            <remarks>Results can be retrieved by subscribing to the ResultDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ExtractDelimitedDataFromDataReader(System.Data.Common.DbDataReader,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="rdr">Data reader object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ExtractDelimitedDataFromDataSet(System.Data.DataSet,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ExtractDelimitedDataFromTable(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="tab">DataTable object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ExtractFixedLengthDataFromDataReader(System.Data.Common.DbDataReader,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="rdr">Data reader object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ExtractFixedLengthDataFromDataSet(System.Data.DataSet,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ExtractFixedLengthDataFromTable(System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="tab">DataTable object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.LoadXmlFileToDataTable(System.String)">
            <summary>
            Reads contents of xml file into a DataTable
            </summary>
            <param name="filePath">Location of Xml file.</param>
            <returns>DataTable with data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.LoadXmlFileToDataSet(System.String)">
            <summary>
            Reads contents of xml file into a DataSet
            </summary>
            <param name="filePath">Location of Xml file.</param>
            <returns>DataSet with data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.SaveDataReaderToXmlFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes contents of DataReader in Xml format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.SaveDataReaderWithSchemaToXmlFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes contents of DataReader plus the data schema in Xml format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.SaveDataReaderToXmlSchemaFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes data schema in Xsd format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.SaveDataTableToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Writes contents of DataTable in Xml format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.SaveDataTableWithSchemaToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Writes both the contents of DataTable and the associated data schema in Xml format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.SaveDataTableToXmlSchemaFile(System.Data.DataTable,System.String)">
            <summary>
            Writes the data schema in Xsd format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.SaveDataSetToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Writes contents of DataSet in Xml format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.SaveDataSetWithSchemaToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Writes both the contents of DataSet and the assoicated data schema in Xml format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.SaveDataSetToXmlSchemaFile(System.Data.DataSet,System.String)">
            <summary>
            Writes data schema of DataSet in Xsd format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.TypeIsUserTable(System.Data.DataRow)">
            <summary>
            Function to determine if the type of table object is a user (base) table. This function is used to eliminate system tables from the output.
            </summary>
            <param name="dr">DataRow returned by GetSchema.</param>
            <returns>True if the table is a user or base table.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.GetFullTableName(System.Data.DataRow)">
            <summary>
            Function to build a qualified table name. Ususally this means attaching schema name in front of table name. In some cases both the catalog name and the schema name will be prepended to the table namne.
             Result depends on the requirements of the database platform implementing this function.
            </summary>
            <param name="dr">DataRow returned by GetSchema.</param>
            <returns>Full table name in either schemaname.tablename or catalogname.schemaname.tablename format.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.GetTableNameQualifiers(System.Data.DataRow)">
            <summary>
            Function to return the catalog, schema and name parts of a fully qualified table name. Some databases will only return the schema and name since catalog is not used by those database engines.
            </summary>
            <param name="dr">DataRow returned by GetSchema that contains Tables information.</param>
            <returns>Object containing the different qualifiers in the table name.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.RebuildFullTableName(PFDataAccessObjects.PFTableDef,System.String)">
            <summary>
            Routine to recreate with a different schema name. Used when transferring a table definition to a new database.
            </summary>
            <param name="tabDef">Object containing the table definition to be reformatted.</param>
            <param name="newSchemaName">Schema name to apply to the reformatted table name.</param>
            <returns>Table name that includes the new schema name.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.TableExists(PFDataAccessObjects.PFTableDef)">
            <summary>
            Routine uses table name information supplied by a PFTableDef object to determine if a table exists in the database.
            </summary>
            <param name="td">Object containing table definition information.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.DropTable(PFDataAccessObjects.PFTableDef)">
            <summary>
            Routine retrieves table name information supplied by a PFTableDef object to drop (delete) a table in the database.
            </summary>
            <param name="td">Object containing table definition information.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.GetTableList">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.GetTableList(System.String[],System.String[])">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <param name="includePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="excludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.ConvertTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},System.String)">
            <summary>
            Method to convert table definitions from another database format to the data format supported by this class.
            </summary>
            <param name="tableDefs">Object containing the list of table definitions to be converted.</param>
            <param name="newSchemaName">Specify a new schema (owner) name for the tables when they are recreated in the database managed by the current instance.</param>
            <returns>Object containing the list of table definitions after they have been converted to match the data formats of the current instance.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.CreateTablesFromTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef})">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <returns>Number of tables created.</returns>
            <remarks>Will not create table if table already exists.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.CreateTablesFromTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.CopyTableDataFromTableDefs(PFDataAccessObjects.PFDatabase,System.String,System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="sourceDatabase">Database containing source tables..</param>
            <param name="newSchemaName">Schema to use for identifying the destination tables.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsOracle.CopyTableDataFromTableDefs(PFDataAccessObjects.PFDatabase,System.String[],System.String[],System.String,System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="sourceDatabase">Database containing source tables..</param>
            <param name="tableIncludePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="tableExcludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <param name="newSchemaName">Schema to use for identifying the destination tables.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.DbPlatform">
            <summary>
            Identifies the database platform supported by this class.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.Connection">
            <summary>
            ADO.NET connection object for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.Command">
            <summary>
            ADO.NET command object for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.CommandType">
            <summary>
            Determines type of command to run.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.CommandTimeout">
            <summary>
            Number of seconds to wait before a command is timed out.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.SQLQuery">
            <summary>
            SQL to be executed.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.DataSource">
            <summary>
            The name or network address of the instance of Oracle to which to connect. 
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.UseIntegratedSecurity">
            <summary>
            Determines whether or not Windows integrated security will be used.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.Username">
            <summary>
            Logon username.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.Password">
            <summary>
            Logon password.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.ConnectionString">
            <summary>
            String used to open the database.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.IsConnected">
            <summary>
            Returns true if current connection state is Open.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.CurrentConnectionState">
            <summary>
            Returns the current connection state of this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsOracle.ConnectionStringKeyVals">
            <summary>
            Returns list of all the keys and their values contained in the current connection string.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.PFDBKeyValueListSortedProcessor`2">
            <summary>
            Basic prototype for a ProFast application or library class.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDBKeyValueListSortedProcessor`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDBKeyValueListSortedProcessor`2.ConvertPFKeyValueListSortedToPFKeyValueList(PFCollectionsObjects.PFKeyValueListSorted{`0,`1})">
            <summary>
            Converts PFKeyValueListSorted object to PFKeyValueList object.
            </summary>
            <returns>PFKeyValueList object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDBKeyValueListSortedProcessor`2.ConvertPFKeyValueListToSortedList(PFCollectionsObjects.PFKeyValueList{`0,`1})">
            <summary>
            Converts PFKeyValueList object to PFKeyValueListSorted object.
            </summary>
            <param name="kvlist"></param>
            <returns>PFKeyValueListSorted object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDBKeyValueListSortedProcessor`2.SaveToDatabase(PFCollectionsObjects.PFKeyValueListSorted{`0,`1},System.String,System.String)">
            <summary>
            Saves the public property values contained in the current instance to the database specified by the connection string.
            </summary>
            <param name="kvlistSorted">Sorted key value list to be saved to database.</param>
            <param name="connectionString">Contains information needed to open the database.</param>
            <param name="listName">Name to give list in the database.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDBKeyValueListSortedProcessor`2.LoadFromDatabase(System.String,System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance from a database record.
            </summary>
            <param name="connectionString">Connection parameters for the database.</param>
            <param name="listName">Name of the list in the database.</param>
            <returns>PFListEx object.</returns>
        </member>
        <member name="T:PFDataAccessObjects.PFAccessOleDbProvider">
            <summary>
            Enumeration of permitted OleDb providers for processing MsAccess databases.
            </summary>
        </member>
        <member name="F:PFDataAccessObjects.PFAccessOleDbProvider.MicrosoftJetOLEDB_4_0">
            <summary>
            Used for Access 2002-2003 database file.
            </summary>
        </member>
        <member name="F:PFDataAccessObjects.PFAccessOleDbProvider.MicrosoftACEOLEDB_12_0">
            <summary>
            Can be used for using either Access 2003 or Access 2007 database files.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.EngineType">
            <summary>
            Used when constructing a connecting string. Engine type 5 is for Access 2003 databases; engine type 6 is for Access 2007 format databases.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.PFMsAccess">
            <summary>
            Class for processisng Microsoft Access databases.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="databasePath">Full path to the database file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="databasePath">Full path to the database file.</param>
            <param name="dbUsername">Username to use for database logon.</param>
            <param name="dbPassword">Password to use for database logon.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.#ctor(PFDataAccessObjects.PFAccessOleDbProvider,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="dbProvider">Allowed values are specified by the <see cref="T:PFDataAccessObjects.PFAccessOleDbProvider"/> enumeration.</param>
            <param name="databasePath">Full path to the database file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.#ctor(PFDataAccessObjects.PFAccessOleDbProvider,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="dbProvider">Allowed values are specified by the <see cref="T:PFDataAccessObjects.PFAccessOleDbProvider"/> enumeration.</param>
            <param name="databasePath">Full path to the database file.</param>
            <param name="dbUsername">Username to use for database logon.</param>
            <param name="dbPassword">Password to use for database logon.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.CreateDatabase(System.String,PFDataAccessObjects.AccessVersion,System.Boolean,System.String,System.String)">
            <summary>
            Creates an empty Access database in specified databaseVersion format.
            </summary>
            <param name="databasePath">Path including file name of database.</param>
            <param name="databaseVersion">Access 2003 or Access 2007 database versions supported. See <see cref="T:PFDataAccessObjects.AccessVersion"/> enumeration.</param>
            <param name="overwriteExistingFile">True to first delete any file with same name at databasePath. If False, any file exists, an exception will be thrown.</param>
            <param name="dbUsername">Username to logon with. Default is admin.</param>
            <param name="dbPassword">Password to logon with. Default is empty string.</param>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.GetConnectionStringKeyVals">
            <summary>
            Returns a list of key/value pairs that contains all the keys and their associated values for the current connection string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.CreateTable(System.Data.DataTable)">
            <summary>
            Creates a table in the database using the definition contained in a DataTable object.
            </summary>
            <param name="dt">DataTable object containng table name and column definitions.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.CreateTable(System.Data.DataTable,System.String@)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="createScript">Always an empty string for this class. Tables are built using ADO routines, not table create statements.</param>
            <returns>True if table created; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.BuildTableCreateStatement(System.Data.DataTable)">
            <summary>
            Builds a SQL table create statement using the properties on the specified data table.
            </summary>
            <param name="dt">Object containing the table definition.</param>
            <returns>String containing a SQL table create statement.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.TypeIsUserTable(System.Data.DataRow)">
            <summary>
            Function to determine if the type of table object is a user (base) table. This function is used to eliminate system tables from the output.
            </summary>
            <param name="dr">DataRow returned by GetSchema.</param>
            <returns>True if the table is a user or base table.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.GetFullTableName(System.Data.DataRow)">
            <summary>
            Function to build a qualified table name. Ususally this means attaching schema name in front of table name. In some cases both the catalog name and the schema name will be prepended to the table namne.
             Result depends on the requirements of the database platform implementing this function.
            </summary>
            <param name="dr">DataRow returned by GetSchema that contains Tables information.</param>
            <returns>Full table name in either schemaname.tablename or catalogname.schemaname.tablename format.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.GetTableNameQualifiers(System.Data.DataRow)">
            <summary>
            Function to return the catalog, schema and name parts of a fully qualified table name. Some databases will only return the schema and name since catalog is not used by those database engines.
            </summary>
            <param name="dr">DataRow returned by GetSchema that contains Tables information.</param>
            <returns>Object containing the different qualifiers in the table name.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.RebuildFullTableName(PFDataAccessObjects.PFTableDef,System.String)">
            <summary>
            Routine to recreate with a different schema name. Used when transferring a table definition to a new database.
            </summary>
            <param name="tabDef">Object containing the table definition to be reformatted.</param>
            <param name="newSchemaName">Schema name to apply to the reformatted table name. NOTE: NewSchemaName, if any, will not be applied. UltraLite database does not use schema names.</param>
            <returns>Table name. Schema name is ignored by the UltraLite class.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.TableExists(System.String)">
            <summary>
            Method to determine if a table exists.
            </summary>
            <param name="tableName">Name of table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.TableExists(System.String,System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="schemaName">Name of the schema to which the table belongs.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.TableExists(System.String,System.String,System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="catalogName">Name of database. This parameter is ignored and only schema and table name is used for the existence check.</param>
            <param name="schemaName">Name of the schema to which the table belongs.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.TableExists(PFDataAccessObjects.PFTableDef)">
            <summary>
            Routine uses table name information supplied by a PFTableDef object to determine if a table exists in the database.
            </summary>
            <param name="td">Object containing table definition information.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.DropTable(System.String)">
            <summary>
            Method to remove a table from the database.
            </summary>
            <param name="tableName">Name of table to be deleted.</param>
            <returns>Returns true if table deleted; otherwise returns false. </returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.DropTable(System.String,System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="schemaName">Name of the schema to which the table belongs.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.DropTable(System.String,System.String,System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="catalogName">Catalog name is ignored by this version of method.</param>
            <param name="schemaName">Schema or owner name for the table.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.DropTable(PFDataAccessObjects.PFTableDef)">
            <summary>
            Routine retrieves table name information supplied by a PFTableDef object to drop (delete) a table in the database.
            </summary>
            <param name="td">Object containing table definition information.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.OpenConnection">
            <summary>
            Opens connection to database.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.CloseConnection">
            <summary>
            Closes connection to database.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ReopenConnection">
            <summary>
            Opens connection to database.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ConvertDataReaderToDataTable(System.Data.Common.DbDataReader)">
            <summary>
            Transforms a DataReader object into a DataTable object.
            </summary>
            <param name="rdr">DataReader object.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ConvertDataReaderToDataTable(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Transforms a DataReader object into a DataTable object.
            </summary>
            <param name="rdr">DataReader object.</param>
            <param name="tableName">Name that identifies the table.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.RunQueryDataReader">
            <summary>
            Runs query specified via properties.
            </summary>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.RunQueryDataReader(System.String)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.RunQueryDataReader(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.RunQueryDataSet">
            <summary>
            Runs query.
            </summary>
            <returns>Returns dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.RunQueryDataSet(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.RunQueryDataTable">
            <summary>
            Runs query.
            </summary>
            <returns>Returns dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.RunQueryDataTable(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.RunNonQuery">
            <summary>
            Runs a non-query (e.g. update, insert, delete statements).
            </summary>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.RunNonQuery(System.String,System.Data.CommandType)">
            <summary>
            Runs a non-query (e.g. update, insert, delete statements) using the query specified in the parameters.
            </summary>
            <param name="sqlText">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.GetQueryDataSchema">
            <summary>
            Retrieves the data schema represented by the query text provided to this instance of the class.
            </summary>
            <returns>Returns data table object that contains schema for the query defined for this instance.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.GetQueryDataSchema(System.String,System.Data.CommandType)">
            <summary>
            Retrieves the data schema represented by the query text provided to this routine.
            </summary>
            <param name="sqlQuery">SQL to parse.</param>
            <param name="pCommandType">Type of command represented by the query: text or stored procedure.</param>
            <returns>DataTable object containing the schema information for the columns that would be returned by this query.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ProcessDataReader(System.Data.Common.DbDataReader)">
            <summary>
            Returns data from a DataReader object to the caller.
            </summary>
            <param name="rdr">DataReader object containing data to be returned to the caller.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ProcessDataSet(System.Data.DataSet)">
            <summary>
            Returns data from a DataSet to the caller.
            </summary>
            <param name="ds">DataSet object containing data to be returned to the caller.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ProcessDataTable(System.Data.DataTable)">
            <summary>
            Returns data from a DataTable to the caller.
            </summary>
            <param name="tab">DataTable object containing data to be returned to the caller.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ProcessDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Returns data from a DataTable to the caller.
            </summary>
            <param name="tab">DataTable object containing data to be returned to the caller.</param>
            <param name="tableNumber">Arbitrary number used for identifying multiple DataTables.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ImportDataFromDataTable(System.Data.DataTable)">
            <summary>
            Copies data from DataTable to a database table.
            </summary>
            <param name="dt">DataTable object containing data to import.</param>
            <remarks>Table name in the DataTable must be the same as the destination table name in the database.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ImportDataFromDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Copies data from DataTable to a database table.
            </summary>
            <param name="dt">DataTable object containing data to import.</param>
            <remarks>Table name in the DataTable must be the same as the destination table name in the database.</remarks>
            <param name="updateBatchSize">Number of individual SQL modification statements to include in a table modification operation. WARNING: This parameter is ignored and UpdateBatchSize is always set to 1 for this class.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ExtractDelimitedDataFromDataReader(System.Data.Common.DbDataReader,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="rdr">Data reader object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ExtractDelimitedDataFromDataSet(System.Data.DataSet,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ExtractDelimitedDataFromTable(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="tab">DataTable object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ExtractFixedLengthDataFromDataReader(System.Data.Common.DbDataReader,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="rdr">Data reader object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ExtractFixedLengthDataFromDataSet(System.Data.DataSet,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ExtractFixedLengthDataFromTable(System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="tab">DataTable object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.LoadXmlFileToDataTable(System.String)">
            <summary>
            Reads contents of xml file into a DataTable
            </summary>
            <param name="filePath">Location of Xml file.</param>
            <returns>DataTable with data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.LoadXmlFileToDataSet(System.String)">
            <summary>
            Reads contents of xml file into a DataSet
            </summary>
            <param name="filePath">Location of Xml file.</param>
            <returns>DataSet with data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.SaveDataReaderToXmlFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes contents of DataReader in Xml format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.SaveDataReaderWithSchemaToXmlFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes contents of DataReader plus the data schema in Xml format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.SaveDataReaderToXmlSchemaFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes data schema in Xsd format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.SaveDataTableToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Writes contents of DataTable in Xml format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.SaveDataTableWithSchemaToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Writes both the contents of DataTable and the assoicated data schema in Xml format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.SaveDataTableToXmlSchemaFile(System.Data.DataTable,System.String)">
            <summary>
            Writes the data schema in Xsd format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.SaveDataSetToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Writes contents of DataSet in Xml format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.SaveDataSetWithSchemaToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Writes both the contents of DataSet and the assoicated data schema in Xml format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.SaveDataSetToXmlSchemaFile(System.Data.DataSet,System.String)">
            <summary>
            Writes data schema of DataSet in Xsd format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.GetTableList">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.GetTableList(System.String[],System.String[])">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <param name="includePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="excludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.ConvertTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},System.String)">
            <summary>
            Method to convert table definitions from another database format to the data format supported by this class.
            </summary>
            <param name="tableDefs">Object containing the list of table definitions to be converted.</param>
            <param name="newSchemaName">Specify a new schema (owner) name for the tables when they are recreated in the database managed by the current instance.</param>
            <returns>Object containing the list of table definitions after they have been converted to match the data formats of the current instance.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.CreateTablesFromTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef})">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <returns>Number of tables created.</returns>
            <remarks>Will not create table if table already exists.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.CreateTablesFromTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.CopyTableDataFromTableDefs(PFDataAccessObjects.PFDatabase,System.String,System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="sourceDatabase">Database containing source tables..</param>
            <param name="newSchemaName">Schema to use for identifying the destination tables.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFMsAccess.CopyTableDataFromTableDefs(PFDataAccessObjects.PFDatabase,System.String[],System.String[],System.String,System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="sourceDatabase">Database containing source tables..</param>
            <param name="tableIncludePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="tableExcludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <param name="newSchemaName">Schema to use for identifying the destination tables.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.DbPlatform">
            <summary>
            Identifies the database platform supported by this class.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.Connection">
            <summary>
            ADO.NET connection object for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.Command">
            <summary>
            ADO.NET command object for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.CommandTimeout">
            <summary>
            Number of seconds to wait before a command is timed out.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.OleDbProvider">
            <summary>
            OleDbProvider to use when reading and writing the database.
            </summary>
            <remarks>If provider is not specified, default provider Microsoft.ACE.OLEDB.12.0 will be used. </remarks>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.DatabasePath">
            <summary>
            Full path to the database file.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.DatabaseUsername">
            <summary>
            Username for accessing the database.
            </summary>
            <remarks> If username is not specified , admin username will be used.</remarks>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.DatabasePassword">
            <summary>
            Password for the database.
            </summary>
            <remarks> If password is not specified , empty string will be used as password.</remarks>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.CommandType">
            <summary>
            Type of command: text or stored procedure.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.SQLQuery">
            <summary>
            SQL text to execute.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.IsConnected">
            <summary>
            True if connection state is open, executing or fetching. Otherwise false.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.ConnectionString">
            <summary>
            Read-only property. Returns connection string that was built to enable the current connection.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.ConnectionState">
            <summary>
            Returns ConnectState property of the connection object.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFMsAccess.ConnectionStringKeyVals">
            <summary>
            Returns list of all the keys and their values contained in the current connection string.
            </summary>
        </member>
        <member name="T:PFDataAccessObjects.PFDataProcessor">
            <summary>
            Class to manage common data operations on data stored in ADO.NET DataSet and DataTable objects.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDataProcessor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDataProcessor.ProcessDataSet(System.Data.DataSet)">
            <summary>
            Returns results for one or more tables stored in the specified DataSet.
            </summary>
            <param name="ds">DataSet object containing the data to return.</param>
            <remarks>Calling code must retrieve data by handling the returnResult event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDataProcessor.ProcessDataTable(System.Data.DataTable)">
            <summary>
            Returns results via a callback function defined as a ResultDelegate.
            </summary>
            <param name="tab">DataTable object containing the data to return.</param>
            <remarks>Calling code must retrieve data by handling the returnResult event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDataProcessor.LoadXmlFileToDataTable(System.String)">
            <summary>
            Creates a DataTable object from the contents of an xml file.
            </summary>
            <param name="filePath">Location of xml file.</param>
            <returns>DataTable containing the Xml data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataProcessor.LoadXmlFileToDataSet(System.String)">
            <summary>
            Creates a DataSet object from the contents of an xml file.
            </summary>
            <param name="filePath">Location of xml file.</param>
            <returns>Dataset containing the Xml data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataProcessor.CopyDataTableToXmlDocument(System.Data.DataTable)">
            <summary>
            Method to copy a DataTable object to a XmlDocument object.
            </summary>
            <param name="tab">DataTable object containing data to copy.</param>
            <returns>XmlDocument object containing the copied data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataProcessor.CopyDataSetToXmlDocument(System.Data.DataSet)">
            <summary>
            Method to copy a DataSet object to a XmlDocument object.
            </summary>
            <param name="ds">DataSet object containing data to copy.</param>
            <returns>XmlDocument object containing the copied data.</returns>
        </member>
        <member name="T:PFDataAccessObjects.PFDataExporter">
            <summary>
            Class to manage the export of the contents of ADO.NET DataSet and DataTable objects to external files.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExtractDelimitedDataFromDataSet(System.Data.DataSet,System.String,System.String,System.Boolean)">
            <summary>
            Extracts data from DataSet into delimited text format. 
            </summary>
            <param name="ds">DataSet containing the data.</param>
            <param name="columnSeparator">String containing one or more characters that will separate columns in the line of data that is extracted.</param>
            <param name="lineTerminator">String containing one or more characters that will denote the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, a line containing the column names in delimited format will be the first line returned.</param>
            <remarks>If the DataSet contains more than one table, the data from all the tables will be concatenated into one data extract.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExtractDelimitedDataFromTable(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Extracts data from DataTable into delimited text format. 
            </summary>
            <param name="tab">DataTable containing the data.</param>
            <param name="columnSeparator">String containing one or more characters that will separate columns in the line of data that is extracted.</param>
            <param name="lineTerminator">String containing one or more characters that will denote the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, a line containing the column names in delimited format will be the first line returned.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExtractDelimitedDataFromTable(System.Data.DataTable,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Extracts data from DataTable into delimited text format. 
            </summary>
            <param name="tab">DataTable containing the data.</param>
            <param name="columnSeparator">String containing one or more characters that will separate columns in the line of data that is extracted.</param>
            <param name="lineTerminator">String containing one or more characters that will denote the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, a line containing the column names in delimited format will be the first line returned.</param>
            <param name="tableNumber">Arbitrary number used to identify the table.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExtractDelimitedDataFromTable(System.Data.DataTable,System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Extracts data from DataTable into delimited text format. 
            </summary>
            <param name="tab">DataTable containing the data.</param>
            <param name="columnSeparator">String containing one or more characters that will separate columns in the line of data that is extracted.</param>
            <param name="lineTerminator">String containing one or more characters that will denote the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, a line containing the column names in delimited format will be the first line returned.</param>
            <param name="tableNumber">Arbitrary number used to identify the table.</param>
            <param name="stringValuesSurroundedWithQuotationMarks">If true, string values will be surrounded by double quotes.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.GetDelimitedLineDefinitionFromTable(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves object containing line delimiters and column names for a table of delimited text data.
            </summary>
            <param name="tab">DataTable containing the data.</param>
            <param name="columnSeparator">String containing one or more characters that will separate columns in the line of data that is extracted.</param>
            <param name="lineTerminator">String containing one or more characters that will denote the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, a line containing the column names in delimited format will be the first line returned.</param>
            <returns>PFDelimitedDataLine object that contains definition of delimited text format for specified DataTable.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.GetDelimitedLineDefinitionFromTable(System.Data.DataTable,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Retrieves object containing line delimiters and column names for a table of delimited text data.
            </summary>
            <param name="tab">DataTable containing the data.</param>
            <param name="columnSeparator">String containing one or more characters that will separate columns in the line of data that is extracted.</param>
            <param name="lineTerminator">String containing one or more characters that will denote the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, a line containing the column names in delimited format will be the first line returned.</param>
            <param name="tableNumber">Arbitrary number used to identify the table.</param>
            <returns>PFDelimitedDataLine object that contains definition of delimited text format for specified DataTable.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExtractFixedLengthDataFromDataSet(System.Data.DataSet,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Extracts data from DataSet into fixed length text format. 
            </summary>
            <param name="ds">DataSet containing the data.</param>
            <param name="useLineTerminator">String containing one or more characters that will denote the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, a line containing the column names in fixed length format will be the first line returned.</param>
            <param name="allowDataTruncation">If true, data longer than defined column length will be truncated; otherwise an exception will be thrown.</param>
            <remarks>If the DataSet contains more than one table, the data from all the tables will be concatenated into one data extract.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExtractFixedLengthDataFromTable(System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Extracts data from DataTable into fixed text format. 
            </summary>
            <param name="tab">DataTable containing the data.</param>
            <param name="useLineTerminator">String containing one or more characters that will denote the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, a line containing the column names in fixed length format will be the first line returned.</param>
            <param name="allowDataTruncation">If true, data longer than defined column length will be truncated; otherwise an exception will be thrown.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExtractFixedLengthDataFromTable(System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Extracts data from DataTable into fixed length text format. 
            </summary>
            <param name="tab">DataTable containing the data.</param>
            <param name="useLineTerminator">String containing one or more characters that will denote the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, a line containing the column names in delimited format will be the first line returned.</param>
            <param name="allowDataTruncation">If true, data longer than defined column length will be truncated; otherwise an exception will be thrown.</param>
            <param name="tableNumber">Arbitrary number used to identify the table.</param>
            <param name="lineTerminatorChars">Default is CR/LF for characters to mark end of line. You can override the default by setting this parameter.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExtractFixedLengthDataFromTable(PFTextFiles.PFFixedLengthDataLine,System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Extracts data from DataTable into fixed length text format. 
            </summary>
            <param name="fixedLengthLineDef">Object containing column definitions to use for the output fixed length text data.</param>
            <param name="tab">DataTable containing the data.</param>
            <param name="useLineTerminator">String containing one or more characters that will denote the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, a line containing the column names in delimited format will be the first line returned.</param>
            <param name="allowDataTruncation">If true, data longer than defined column length will be truncated; otherwise an exception will be thrown.</param>
            <param name="tableNumber">Arbitrary number used to identify the table.</param>
            <param name="lineTerminatorChars">Default is CR/LF for characters to mark end of line. You can override the default by setting this parameter.</param>
            <remarks>This version of ExtractFixedLengthDataFromTable adjusts column definitions to allow for changes to the data lengths in the data table.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.GetFixedLengthLineDefinitionFromTable(System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieves formatting information for a line in a fixed length text file.
            </summary>
            <param name="tab">DataTable containing the data.</param>
            <param name="useLineTerminator">String containing one or more characters that will denote the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, a line containing the column names in delimited format will be the first line returned.</param>
            <param name="allowDataTruncation">If true, data longer than defined column length will be truncated; otherwise an exception will be thrown.</param>
            <returns>PFFixedLengthDataLine object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.GetFixedLengthLineDefinitionFromTable(System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Retrieves formatting information for a line in a fixed length text file.
            </summary>
            <param name="tab">DataTable containing the data.</param>
            <param name="useLineTerminator">String containing one or more characters that will denote the end of a line of data.</param>
            <param name="columnNamesOnFirstLine">If true, a line containing the column names in delimited format will be the first line returned.</param>
            <param name="allowDataTruncation">If true, data longer than defined column length will be truncated; otherwise an exception will be thrown.</param>
            <param name="tableNumber">Arbitrary number used to identify the table.</param>
            <param name="lineTerminatorChars">Default is CR/LF for characters to mark end of line. You can override the default by setting this parameter.</param>
            <returns>PFFixedLengthDataLine object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExportDataSetToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Saves dataset into an xml file.
            </summary>
            <param name="ds">DataSet object to save.</param>
            <param name="outputPath">Full path for xml file to create.</param>
            <returns>Full path to the xml file; otherwise null if file was not created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExportDataSetWithSchemaToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Saves dataset into an xml file.
            </summary>
            <param name="ds">DataSet object to save.</param>
            <param name="outputPath">Full path for xml file to create.</param>
            <returns>Full path to the xml file; otherwise null if file was not created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExportDataTableToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Saves DataTable into an xml file.
            </summary>
            <param name="dt">DataTable object to save.</param>
            <param name="outputPath">Full path for xml file to create.</param>
            <returns>Full path to the xml file; otherwise null if file was not created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExportDataTableWithSchemaToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Saves DataTable into an xml file.
            </summary>
            <param name="dt">DataTable object to save.</param>
            <param name="outputPath">Full path for xml file to create.</param>
            <returns>Full path to the xml file; otherwise null if file was not created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExportDataSetToXmlSchmaFile(System.Data.DataSet,System.String)">
            <summary>
            Saves dataset into an xml schema file.
            </summary>
            <param name="ds">DataSet object to save.</param>
            <param name="outputPath">Full path for xml schema file to create.</param>
            <returns>Full path to the xml schema file; otherwise null if file was not created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDataExporter.ExportDataTableToXmlSchemaFile(System.Data.DataTable,System.String)">
            <summary>
            Saves DataTable into an xml schema file.
            </summary>
            <param name="dt">DataTable object to save.</param>
            <param name="outputPath">Full path for xml schema file to create.</param>
            <returns>Full path to the xml schema file; otherwise null if file was not created.</returns>
        </member>
        <member name="P:PFDataAccessObjects.PFDataExporter.MaxColumnLengthOverride">
            <summary>
            Use this property to specify a maximum length for any fixed length column. This will override the maximum length contained in the data object if that length is greater than this override length.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFDataExporter.DefaultStringColumnLength">
            <summary>
            Use this property to specify a length for any string column that has its length defined as less than 1.
            </summary>
            <remarks>This property only applies in cases where the length for a string in a data table is -1 and the calling routine has not overriden the -1 when creating the column definitions.</remarks>
        </member>
        <member name="T:PFDataAccessObjects.PFDatabase">
            <summary>
            Class for generic access to databases for read and write operations. Only supports the databases listed in the DatabasePlatform enumeration.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.#ctor(PFDataAccessObjects.DatabasePlatform)">
            <summary>
            Constructor
            </summary>
            <param name="dbPlatform"></param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.#ctor(PFDataAccessObjects.DatabasePlatform,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dbPlatform"></param>
            <param name="dbAssemblyPath">Path to the Windows DLL that implements the specified database platform.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.#ctor(PFDataAccessObjects.DatabasePlatform,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dbPlatform"></param>
            <param name="dbAssemblyPath">Path to the Windows DLL that implements the specified database platform.</param>
            <param name="dbAssemblyNamespace">Namespace and class to use in the DLL. Format of parameter value is namespace.classname (e.g. MyDataObjects.SQLServerDataClass).</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dbPlatformDescription"></param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dbPlatformDescription"></param>
            <param name="dbAssemblyPath">Path to the Windows DLL that implements the specified database platform.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dbPlatformDescription"></param>
            <param name="dbAssemblyPath">Path to the Windows DLL that implements the specified database platform.</param>
            <param name="dbAssemblyNamespace">Namespace and class to use in the DLL. Format of parameter value is namespace.classname (e.g. MyDataObjects.SQLServerDataClass).</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.GetListOfSupportedDatabases">
            <summary>
            Static method for obtaining a list of all database .net providers supported by this class.
            </summary>
            <returns>List of supported database platforms.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.CreateDatabase(System.String,System.String)">
            <summary>
            Creates a new SQL Anywhere .db database file by copying a template .db file.
            </summary>
            <param name="databasePath">Full path to database file to be created.</param>
            <param name="pathToTemplateDatabase">Full path to the database file that will be the template to be copied to the new file name.</param>
            <returns>True if database is created. Otherwise false.</returns>
            <remarks>Database is created without encryption.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.CreateDatabase(System.String)">
            <summary>
            Creates a Desktop database file.
            </summary>
            <param name="connectionString">Supply a connection string for SQLCE 3.5 or SQLCE 4.0 or a full file path for SQL Anywhere or SQL AnywhereUL.</param>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.CreateTable(System.Data.DataTable)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <returns>True if table created; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.CreateTable(System.Data.DataTable,System.String@)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="createScript">Copy of the script used to create the table.</param>
            <returns>True if table created; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.CreateTable(System.Data.DataTable,System.String@,System.String@)">
            <summary>
            Method creates a a table in the database based on the column definitions and table name contained in the DataTable parameter.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="createScript">Copy of the script used to create the table.</param>
            <param name="errorMessages">Text of any error messages reported as a result of the create table operation.</param>
            <returns>True if table created; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.BuildTableCreateStatement(System.Data.DataTable)">
            <summary>
            Builds a SQL table create statement using the properties on the specified data table.
            </summary>
            <param name="dt">Object containing the table definition.</param>
            <returns>String containing a SQL table create statement.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.TableExists(System.String,System.String,System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="catalogName">Name of database in which table is located.</param>
            <param name="schemaName">Name of the schema to which the table belongs.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.TableExists(System.String,System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="schemaName">Name of the schema to which the table belongs.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.TableExists(System.String)">
            <summary>
            Method to determine if a table exists in the database.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>True if table exists; otherwise false.</returns>
            <remarks>If schema is important for identifying the table, the table name should be in schemaname.tablename format. Or you can use the version of this method that takes schema and table name parameters.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.DropTable(System.String,System.String,System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="catalogName">Name of database in which table is located.</param>
            <param name="schemaName">Name of the schema to which the table belongs.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.DropTable(System.String,System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="schemaName">Name of the schema to which the table belongs.</param>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.DropTable(System.String)">
            <summary>
            Method to drop a table from the database.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
            <remarks>If schema is important for identifying the table, the table name should be in schemaname.tablename format. Or you can use the version of this method that takes schema and table name parameters.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.OpenConnection">
            <summary>
            Opens connection to database.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.CloseConnection">
            <summary>
            Closes connection to database.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.RunQueryDataReader">
            <summary>
            Runs query specified via properties.
            </summary>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.RunQueryDataReader(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.RunQueryDataSet">
            <summary>
            Runs query.
            </summary>
            <returns>Returns dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.RunQueryDataSet(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.RunQueryDataTable">
            <summary>
            Runs query.
            </summary>
            <returns>Returns dataset object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.RunQueryDataTable(System.String,System.Data.CommandType)">
            <summary>
            Runs query specified by the parameters.
            </summary>
            <param name="sqlQuery">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.RunNonQuery">
            <summary>
            Runs a non-query (e.g. update, insert, delete statements).
            </summary>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.RunNonQuery(System.String,System.Data.CommandType)">
            <summary>
            Runs a non-query (e.g. update, insert, delete statements) using the query specified in the parameters.
            </summary>
            <param name="sqlText">SQL to execute.</param>
            <param name="pCommandType">Type of command to run: text or stored procedure.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.GetQueryDataSchema">
            <summary>
            Retrieves the data schema represented by the query text provided to this instance of the class.
            </summary>
            <returns>Returns data table object that contains schema for the query defined for this instance.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.GetQueryDataSchema(System.String,System.Data.CommandType)">
            <summary>
            Retrieves the data schema represented by the query text provided to this routine.
            </summary>
            <param name="sqlQuery">SQL to parse.</param>
            <param name="pCommandType">Type of command represented by the query: text or stored procedure.</param>
            <returns>DataTable object containing the schema information for the columns that would be returned by this query.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ConvertDataReaderToDataTable(System.Data.Common.DbDataReader)">
            <summary>
            Transforms a DataReader object into a DataTable object.
            </summary>
            <param name="rdr">DbDataReader object.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ConvertDataReaderToDataTable(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Transforms a DataReader object into a DataTable object.
            </summary>
            <param name="rdr">DbDataReader object.</param>
            <param name="tableName">Name that identifies the table.</param>
            <returns>DataTable object.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ProcessDataReader(System.Data.Common.DbDataReader)">
            <summary>
            Returns data from a DataReader object to the caller.
            </summary>
            <param name="rdr">DbDataReader object containing data to be returned to the caller.</param>
            <remarks>Results can be retrieved by subscribing to the ResultDelegate event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ProcessDataSet(System.Data.DataSet)">
            <summary>
            Returns data from a DataSet to the caller.
            </summary>
            <param name="ds">DataSet object containing data to be returned to the caller.</param>
            <remarks>Results can be retrieved by subscribing to ResultDelegate event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ProcessDataTable(System.Data.DataTable)">
            <summary>
            Returns data from a DataTable to the caller.
            </summary>
            <param name="tab">DataTable object containing data to be returned to the caller.</param>
            <remarks>Results can be retrieved by subscribing to the ResultDelegate event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ImportDataFromDataTable(System.Data.DataTable)">
            <summary>
            Loads rows contained in an ADO.NET data table to a database table. Table must already exist. 
            </summary>
            <param name="dt">DataTable object containing data to load.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ImportDataFromDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Loads rows contained in an ADO.NET data table to a database table. Table must already exist. 
            </summary>
            <param name="dt">DataTable object containing data to load.</param>
            <param name="updateBatchSize">Number of individual SQL modification statements to include in a table modification operation.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ProcessDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Returns data from a DataTable to the caller.
            </summary>
            <param name="tab">DataTable object containing data to be returned to the caller.</param>
            <param name="tableNumber">Arbitrary number used for identifying multiple DataTables.</param>
            <remarks>Results can be retrieved by subscribing to the ResultDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ExtractDelimitedDataFromDataReader(System.Data.Common.DbDataReader,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="rdr">Data reader object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ExtractDelimitedDataFromDataSet(System.Data.DataSet,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ExtractDelimitedDataFromTable(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Produces data in delimited text format.
            </summary>
            <param name="tab">DataTable object.</param>
            <param name="columnSeparator">One or more characters to denote end of a column.</param>
            <param name="lineTerminator">One or more characters to denote end of a line. "\r\n" is the standard line terminator.</param>
            <param name="columnNamesOnFirstLine">If true delimited list of column names is output at top of the data.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ExtractFixedLengthDataFromDataReader(System.Data.Common.DbDataReader,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="rdr">Data reader object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ExtractFixedLengthDataFromDataSet(System.Data.DataSet,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ExtractFixedLengthDataFromTable(System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produces data in fixed length text column format.
            </summary>
            <param name="tab">DataTable object.</param>
            <param name="lineTerminator">If true, the output will be separated into lines using "\r\n" to terminate each line.</param>
            <param name="columnNamesOnFirstLine">If true, a list of column names in fixed length column format is output at top of the data.</param>
            <param name="allowDataTruncation">If true, data longer than column length will be truncated; otherwise an exception will be thrown.</param>
            <remarks>Results can be retrieved by subscribing to the ResultAsStringDelegate Event. </remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.LoadXmlFileToDataTable(System.String)">
            <summary>
            Reads contents of xml file into a DataTable
            </summary>
            <param name="filePath">Location of Xml file.</param>
            <returns>DataTable with data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.LoadXmlFileToDataSet(System.String)">
            <summary>
            Reads contents of xml file into a DataSet
            </summary>
            <param name="filePath">Location of Xml file.</param>
            <returns>DataSet with data.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.SaveDataReaderToXmlFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes contents of DataReader in Xml format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.SaveDataReaderWithSchemaToXmlFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes contents of DataReader plus the data schema in Xml format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.SaveDataReaderToXmlSchemaFile(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Writes data schema in Xsd format to specified output file.
            </summary>
            <param name="rdr">Data Reader object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.SaveDataTableToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Writes contents of DataTable in Xml format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.SaveDataTableWithSchemaToXmlFile(System.Data.DataTable,System.String)">
            <summary>
            Writes both the contents of DataTable and the associated data schema in Xml format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.SaveDataTableToXmlSchemaFile(System.Data.DataTable,System.String)">
            <summary>
            Writes the data schema in Xsd format to specified output file.
            </summary>
            <param name="dt">DataTable object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.SaveDataSetToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Writes contents of DataSet in Xml format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.SaveDataSetWithSchemaToXmlFile(System.Data.DataSet,System.String)">
            <summary>
            Writes both the contents of DataSet and the assoicated data schema in Xml format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xml output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.SaveDataSetToXmlSchemaFile(System.Data.DataSet,System.String)">
            <summary>
            Writes data schema of DataSet in Xsd format to specified output file.
            </summary>
            <param name="ds">DataSet object.</param>
            <param name="filePath">Location of the Xsd output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.TypeIsUserTable(System.Data.DataRow)">
            <summary>
            Function to determine if the type of table object is a user (base) table. This function is used to eliminate system tables from the output.
            </summary>
            <param name="dr">DataRow returned by GetSchema.</param>
            <returns>True if the table is a user or base table.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.GetFullTableName(System.Data.DataRow)">
            <summary>
            Function to build a qualified table name. Ususally this means attaching schema name in front of table name. In some cases both the catalog name and the schema name will be prepended to the table namne.
             Result depends on the requirements of the database platform implementing this function.
            </summary>
            <param name="dr">DataRow returned by GetSchema.</param>
            <returns>Full table name in either schemaname.tablename or catalogname.schemaname.tablename format.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.GetTableNameQualifiers(System.Data.DataRow)">
            <summary>
            Function to return the catalog, schema and name parts of a fully qualified table name. Some databases will only return the schema and name since catalog is not used by those database engines.
            </summary>
            <param name="dr">DataRow returned by GetSchema that contains Tables information.</param>
            <returns>Object containing the different qualifiers in the table name.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.RebuildFullTableName(PFDataAccessObjects.PFTableDef,System.String)">
            <summary>
            Routine to recreate with a different schema name. Used when transferring a table definition to a new database.
            </summary>
            <param name="tabDef">Object containing the table definition to be reformatted.</param>
            <param name="newSchemaName">Schema name to apply to the reformatted table name.</param>
            <returns>Table name that includes the new schema name.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.TableExists(PFDataAccessObjects.PFTableDef)">
            <summary>
            Routine uses table name information supplied by a PFTableDef object to determine if a table exists in the database.
            </summary>
            <param name="td">Object containing table definition information.</param>
            <returns>True if table exists; otherwise false.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.DropTable(PFDataAccessObjects.PFTableDef)">
            <summary>
            Routine retrieves table name information supplied by a PFTableDef object to drop (delete) a table in the database.
            </summary>
            <param name="td">Object containing table definition information.</param>
            <returns>True if table no longer exists; otherwise returns false if table still exists.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.GetTableList">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.GetTableList(System.String[],System.String[])">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <param name="includePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="excludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ConvertTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},System.String)">
            <summary>
            Method to convert table definitions from another database format to the data format supported by this class.
            </summary>
            <param name="tableDefs">Object containing the list of table definitions to be converted.</param>
            <param name="newSchemaName">Specify a new schema (owner) name for the tables when they are recreated in the database managed by the current instance.</param>
            <returns>Object containing the list of table definitions after they have been converted to match the data formats of the current instance.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.CreateTablesFromTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef})">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <returns>Number of tables created.</returns>
            <remarks>Will not create table if table already exists.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.CreateTablesFromTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.CopyTableDataFromTableDefs(PFDataAccessObjects.PFDatabase,System.String,System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="sourceDatabase">Database object representing the source database.</param>
            <param name="newSchemaName">Schema to use for identifying the destination tables.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.CopyTableDataFromTableDefs(PFDataAccessObjects.PFDatabase,System.String[],System.String[],System.String,System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="sourceDatabase">Database containing source tables..</param>
            <param name="tableIncludePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="tableExcludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <param name="newSchemaName">Schema to use for identifying the destination tables.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.ToString">
            <summary>
            Routine overrides default ToString method and outputs name, type, scope and value for all class properties and fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.PropertiesToString">
            <summary>
            Routine outputs name and value for all properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.FieldsToString">
            <summary>
            Routine outputs name and value for all fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.GetPropertyValue(System.String)">
            <summary>
            Method to obtain a property value via Reflection.
            </summary>
            <param name="propertyName">Name of property to be retrieved.</param>
            <returns>Object containing the value for the property.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.SetPropertyValue(System.String,System.Object)">
            <summary>
            Method to set a property value via Reflection.
            </summary>
            <param name="propertyName">Name of property to be set.</param>
            <param name="propertyValue">Object containing the value to set the property to.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFDatabase.GetPropertiesForPlatform">
            <summary>
            Routine to retrieve the property names and their values for the database platform represented by this instance of PFDatabase.
            </summary>
            <returns>Object containing a list of the properties in key/value format.</returns>
        </member>
        <member name="P:PFDataAccessObjects.PFDatabase.DbPlatform">
            <summary>
            Identifies the database platform supported by this class.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFDatabase.Connection">
            <summary>
            ADO.NET connection object for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFDatabase.ConnectionString">
            <summary>
            Connection string to be used for this instance. 
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFDatabase.ConnectionStringKeyVals">
            <summary>
            Returns list of all the keys and their values contained in the current connection string.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFDatabase.Command">
            <summary>
            ADO.NET command object for this instance.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFDatabase.CommandType">
            <summary>
            Type of command: text or stored procedure.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFDatabase.CommandTimeout">
            <summary>
            Number of seconds to wait before a command is timed out.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFDatabase.SQLQuery">
            <summary>
            SQL text to execute.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFDatabase.IsConnected">
            <summary>
            Returns true if the connection is open.
            </summary>
        </member>
        <member name="P:PFDataAccessObjects.PFDatabase.DatabasePath">
            <summary>
            Path to database that will be represented by this instance.
            </summary>
            <remarks>Only needed when creating a desktop database file.</remarks>
        </member>
        <member name="T:PFDataAccessObjects.PFTableDefinitions">
            <summary>
            Contains list of database tables and their schema definitions.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.GetTableList(PFDataAccessObjects.IDatabaseProvider)">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <param name="sourceDatabase">Database from which the table list will be retrieved.</param>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.GetTableList(PFDataAccessObjects.IDatabaseProvider,System.String[],System.String[])">
            <summary>
            Retrieves list of tables and their associated schema information contained in the database pointed to by the current connection.
            </summary>
            <param name="sourceDatabase">Database from which the table list will be retrieved.</param>
            <param name="includePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="excludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <returns>Object containing the list of table definitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.GetSearchPatternRegexObjects(System.String[],System.String)">
            <summary>
            Creates an array of regex objects. There will be one for each of the search patterns specified in the searchPatterns parameter.
            </summary>
            <param name="searchPatterns">An array of one or more search patterns. Set to null if no search patterns are specified.</param>
            <param name="ifNullDefaultPattern">Specifies the default search pattern to create when search patterns is null.</param>
            <returns>An array of PFSearchPattern objects that encapsulate regex processing.</returns>
            <remarks>Search patterns are composed of the Windows wildcard characters for file system searches.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.IsMatchToPattern(PFTextObjects.PFSearchPattern[],System.String)">
            <summary>
            Determines if table name matches search pattern.
            </summary>
            <param name="regexPatterns">Array of search patterns to match against.</param>
            <param name="tabName">Name of table.</param>
            <returns>True if table name matches at least one of the search patterns.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.ConvertTableDefs(PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},PFDataAccessObjects.IDatabaseProvider,System.String)">
            <summary>
            Method to convert table definitions from another database format to the data format supported by the destination database class.
            </summary>
            <param name="tableDefs">Object containing the list of table definitions to be converted.</param>
            <param name="destinationDatabase">Database object pointing to database that will define converted table definitions.</param>
            <param name="newSchemaName">Specify a new schema (owner) name for the tables when they are recreated in the database managed by the current instance.</param>
            <returns>Object containing the list of table definitions after they have been converted to match the data formats of the current instance.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.CreateTablesFromTableDefs(PFDataAccessObjects.IDatabaseProvider,PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef})">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="destinationDatabase">Database object pointing to database where tables will be created.</param>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <returns>Number of tables created.</returns>
            <remarks>Will not create table if table already exists.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.CreateTablesFromTableDefs(PFDataAccessObjects.IDatabaseProvider,PFCollectionsObjects.PFList{PFDataAccessObjects.PFTableDef},System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="destinationDatabase">Database object pointing to database where tables will be created.</param>
            <param name="tableDefs">Object containing list of table definitions.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.CopyTableDataFromTableDefs(PFDataAccessObjects.IDatabaseProvider,System.String[],System.String[],PFDataAccessObjects.IDatabaseProvider,System.String,System.Boolean)">
            <summary>
            Runs the table create statements contained in the provided tableDefs object.
            </summary>
            <param name="sourceDatabase">Database containing source tables..</param>
            <param name="tableIncludePatterns">Wildard pattern to use when selecting which tables to include. Specify * or null or empty string for pattern to include all tables.</param>
            <param name="tableExcludePatterns">Wildard pattern to use when selecting which tables to exclude. Specify * for pattern to exclude all tables. Specify null or empty string to exclude no tables.</param>
            <param name="destinationDatabase">Database were data will be copied to..</param>
            <param name="newSchemaName">Schema to use for identifying the destination tables.</param>
            <param name="dropBeforeCreate">If true and table already exists, table will be dropped and then recreated using the table definition in the supplied PFTableDefs list. If false, table create step is bypassed if table already exists.</param>
            <returns>Number of tables created.</returns>
            <remarks>Include and exclude patterns are the same as Windows File wildcards. * specifies zero or more characters. ? specifies one character.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.SaveToXmlFile(System.String)">
            <summary>
            Saves the public property values contained in the current instance to the specified file. Serialization is used for the save.
            </summary>
            <param name="filePath">Full path for output file.</param>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.LoadFromXmlFile(System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance from a file.
            </summary>
            <param name="filePath">Full path for the input file.</param>
            <returns>An instance of PFTableDefinitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.ToString">
            <summary>
            Routine overrides default ToString method and outputs name, type, scope and value for all class properties and fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.PropertiesToString">
            <summary>
            Routine outputs name and value for all properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.FieldsToString">
            <summary>
            Routine outputs name and value for all fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.ToXmlString">
            <summary>
            Returns a string containing the contents of the object in XML format.
            </summary>
            <returns>String value in xml format.</returns>
            ///<remarks>XML Serialization is used for the transformation.</remarks>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.LoadFromXmlString(System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance stored as a xml formatted string.
            </summary>
            <param name="xmlString">String containing the xml formatted representation of an instance of this class.</param>
            <returns>An instance of PFTableDefinitions.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableDefinitions.ToXmlDocument">
            <summary>
            Converts instance of this class into an XML document.
            </summary>
            <returns>XmlDocument</returns>
            ///<remarks>XML Serialization and XmlDocument class are used for the transformation.</remarks>
        </member>
        <member name="T:PFDataAccessObjects.PFTableBuilder">
            <summary>
            Class to support creation of table create statements by the various data access objects.
             Actual creation of tables in done by specific database provider objects.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFTableBuilder.#ctor(PFDataAccessObjects.DatabasePlatform)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFDataAccessObjects.PFTableBuilder.BuildTableCreateStatement(System.Data.DataTable)">
            <summary>
            Routine for building a table create statement based on the schema of an ADO.NET DataTable object.
            </summary>
            <param name="dt">DataTable containing schema to use.</param>
            <returns>String containing a CREATE TABLE statement.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableBuilder.BuildTableCreateStatement(System.Data.DataTable,System.String)">
            <summary>
            Routine for building a table create statement based on the schema of an ADO.NET DataTable object.
            </summary>
            <param name="dt">DataTable containing schema to use.</param>
            <param name="connectionString">Only needed for the ODBC and OleDB database platforms. Is used to make a connection to the database to get datatype schema information.</param>
            <returns>String containing a CREATE TABLE statement.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableBuilder.GenericTableCreateStatementRestricted(System.Data.DataTable,System.String)">
            <summary>
            Builds a table create statement for any odbc driver or oledb provider. The routine restricts the table definitions to string, integer, double, and byte array values.
             By converting all values to a small subset of types, the should be a higher chance of matching the driver/provider data type support minimum.
            </summary>
            <param name="dt">Data table containing the data definition for the table.</param>
            <param name="connectionString">Connection string for this particular database connection.</param>
            <returns>String containing the create table statement.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableBuilder.GenericTableCreateStatementExt(System.Data.DataTable,System.String)">
            <summary>
            Builds a table create statement for any odbc or oledb driver. The routine tries to match as closely as possible the .NET data type to a database datatype.
            </summary>
            <param name="dt">Data table containing the data definition for the table.</param>
            <param name="connectionString">Connection string for this particular database connection.</param>
            <returns>String containing the create table statement.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableBuilder.GetGenericDataTypeMappingsAll(System.String)">
            <summary>
            Routine that returns all the data type mappings supported by the ODBC driver or the OLEDB provider that is encapsulated by the instance of PFTableBuilder.
            </summary>
            <param name="connectionString">Contains connection parameters needed to connect to the database.</param>
            <returns>A list of DataTypeMapping structs that contain the data mappings supported by the current database driver/provider.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableBuilder.GetGenericDataTypeMappingsEx(System.String)">
            <summary>
            Routine that returns the data type mappings supported by the ODBC driver or the OLEDB provider that is encapsulated by the instance of PFTableBuilder.
            </summary>
            <param name="connectionString">Contains connection parameters needed to connect to the database.</param>
            <returns>A list of DataTypeMapping structs that contain the data mappings supported by the current database driver/provider.</returns>
        </member>
        <member name="M:PFDataAccessObjects.PFTableBuilder.GetDataCategory(System.Type)">
            <summary>
            Routine that categorizes a data type.
            </summary>
            <param name="typ">The system type being categorized.</param>
            <returns>Returns a DataCategory enumeration value.</returns>
        </member>
        <member name="P:PFDataAccessObjects.PFTableBuilder.DatabaseType">
            <summary>
            Specifies database in which the data operations will take place.
            </summary>
        </member>
    </members>
</doc>
