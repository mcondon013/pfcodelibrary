<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PFConnectionObjects</name>
    </assembly>
    <members>
        <member name="T:PFConnectionObjects.PFConnectionManager">
            <summary>
            Class to determine if a .NET data provider is installed on the current system.
            Class is also used to collect and store information on all installed .NET data providers. 
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="providerDefsLocation">File path or connection string for provider definition external storage.</param>
            <param name="providerDefsListLocation">File path for folder containing file with list of all providers.</param>
            <param name="connectionDefsLocation">File path or connection string for connections definition external storage.</param>
            <param name="connectionDefsListLocation">File path for folder containing file with list of all connection strings.</param>
            <remarks>Specify a file path (e.g. C:\DataFiles\providers.xml) if external storage is XML files. 
            Specify a connection string (e.g. data source='C:\DataFiles\providers.sdf') if external storage is a SQLCE 3.5 database.</remarks>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.GetListOfProviderDefinitions">
            <summary>
            Returns list provider definition objects for all supported providers (both installed and not).
            </summary>
            <returns>PFKeyValueList containing provider names and provider definitions. </returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.GetListOfInstalledProviders">
            <summary>
            Gets list of invariant names for each provider supported by ADO.NET DBProviderFactories class.
            </summary>
            <returns>List of invariant names.</returns>
            <remarks>Only returns providers that register with .NET. (For example, SQLAnywhere Ultra Lite does not register with .NET.)</remarks>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.CreateProviderDefinitions">
            <summary>
            Routine to create provider definitions for each of the supported database platforms. 
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.CreateTestConnectionDefinitions">
            <summary>
            Routine will create a set of test connection definitions. This is used for unit testing only.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.ProviderExists(System.String)">
            <summary>
            Determines if a particular provider definition exists in the provider database.
            </summary>
            <param name="providerName">Name of provider.</param>
            <returns>True if provider name found; otherwise false.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.ConnectionExists(System.String)">
            <summary>
            Determines if a particular connection definition exists in the connection database.
            </summary>
            <param name="connectionName">Name of connection.</param>
            <returns>True if connection name found; otherwise false.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.AddProvider(PFConnectionObjects.PFProviderDefinition)">
            <summary>
            Adds specified provider definition object to provider definitions list.
            </summary>
            <param name="provDef">Object containing provider definition.</param>
            <remarks>If definition already exists for the provider name, an exception will be thrown.</remarks>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.AddProvider(PFConnectionObjects.PFProviderDefinition,System.Boolean)">
            <summary>
            Adds specified provider definition object to provider definitions list.
            </summary>
            <param name="provDef">Object containing provider definition.</param>
            <param name="overwriteExistingDefinition">Set to true to overwrite an existing definition with same provider name.</param>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.AddConnection(PFConnectionObjects.PFConnectionDefinition)">
            <summary>
            Adds specified connection definition object to connection definitions list.
            </summary>
            <param name="connDef">Object containing connection definition.</param>
            <remarks>If definition already exists for the connection name, an exception will be thrown.</remarks>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.AddConnection(PFConnectionObjects.PFConnectionDefinition,System.Boolean)">
            <summary>
            Adds specified connection definition object to connection definitions list.
            </summary>
            <param name="connDef">Object containing connection definition.</param>
            <param name="overwriteExistingDefinition">Set to true to overwrite an existing definition with same connection name.</param>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.FindProvider(System.String)">
            <summary>
            Finds and returns the provider definition object associated with the specified provider name.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns>PFProviderDefinition object if name found on provider list; otherwise returns null.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.FindConnection(System.String)">
            <summary>
            Finds and returns the connection definition object associated with the specified connection name.
            </summary>
            <param name="connectionName">Name that was given to the connection.</param>
            <returns>PFConnectionDefinition object if name found on connection list; otherwise returns null.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.DeleteProvider(System.String)">
            <summary>
            Deletes the provider object associated with the specified provider name.
            </summary>
            <param name="providerName">Name of provider object to delete.</param>
            <returns>True if object deleted. Returns false if name not found or if delete operation failed.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.DeleteAllProviders">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.DeleteConnection(System.String)">
            <summary>
            Deletes the connection object associated with the specified connection name.
            </summary>
            <param name="connectionName">Name of connection object to delete.</param>
            <returns>True if object deleted. Returns false if name not found or if delete operation failed.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.DeleteAllConnections">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.SaveAllProviders">
            <summary>
            Saves items in provider list to external storage.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.SaveProvidersListToFile">
            <summary>
            Saves provider list to a single file on external storage.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.SaveProvider(PFConnectionObjects.PFProviderDefinition)">
            <summary>
            Saves specified provider definition to external storage.
            </summary>
            <param name="provdef"></param>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.SaveAllConnections">
            <summary>
            Saves connections list to external storage.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.SaveConnection(PFConnectionObjects.PFConnectionDefinition)">
            <summary>
            Saves specified connection definition to external storage.
            </summary>
            <param name="conndef"></param>
            <returns>Path to saved XML file containing connection definition.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.VerifyProvider(System.String)">
            <summary>
            Determines whether the .NET provider associated with the given providerName exists on the local machine.
            </summary>
            <param name="providerName">Name of the provider to verify.</param>
            <returns>Enumerated value that specifies whether provider is installed, not installed or installation status is unknown.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.VerifyProvider(PFConnectionObjects.PFProviderDefinition)">
            <summary>
            Determines whether the .NET provider associated with the given provider object exists on the local machine.
            </summary>
            <param name="provDef">PFProviderDefinition object to be verified.</param>
            <returns>Enumerated value that specifies whether provider is installed, not installed or installation status is unknown.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.VerifyAllProviders">
            <summary>
            Determines the installation status for all the providers contained in the providers list. Results of the verification process are stored in the InstallationStatus property of each object.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.UpdateProviderInstallationStatus(System.String)">
            <summary>
            Determines and saves to disk whether the .NET provider associated with the given providerName exists on the local machine.
            </summary>
            <param name="providerName">Name of the provider to verify.</param>
            <returns>Enumerated value that specifies whether provider is installed, not installed or installation status is unknown.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.UpdateProviderAvailableForSelectionStatus(System.String,System.Boolean)">
            <summary>
            Updates the AvailableForSelection switch used by applications to determine if a provider can be used.
            </summary>
            <param name="providerName">Name of the provider to update.</param>
            <param name="availableForSelection">True or false value indicating whether or not the provider is available for use by applications.</param>
            <returns>True if provider is available. False if not.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.UpdateAllProvidersInstallationStatus">
            <summary>
            Determines the installation status for all the providers contained in the providers list. Results of the verification process are stored in the InstallationStatus property of each object and the object is saved to disk.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.VerifyConnection(System.String)">
            <summary>
            Determines whether the database connection associated with the given connectionName can be opened.
            </summary>
            <param name="connectionName">Name of the connection to verify.</param>
            <returns>Enumerated value that specifies whether connection is accessible (can be opened), not accessible or connection accessibility is unknown.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.VerifyConnection(PFConnectionObjects.PFConnectionDefinition)">
            <summary>
            Determines whether the database connection associated with the given connection object can be opened.
            </summary>
            <param name="connDef">PFConnectionDefinition object to verify.</param>
            <returns>Enumerated value that specifies whether connection is accessible (can be opened), not accessible or connection accessibility is unknown.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.VerifyAllConnections">
            <summary>
            Determines the accessibility for all the connection definitions contained in the connections list. 
             Results of the verification process are stored in the ConnectionAccessStatus property of each object.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.SaveToXmlFile(System.String)">
            <summary>
            Saves the public property values contained in the current instance to the specified file. Serialization is used for the save.
            </summary>
            <param name="filePath">Full path for output file.</param>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.LoadFromXmlFile(System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance from a file.
            </summary>
            <param name="filePath">Full path for the input file.</param>
            <returns>An instance of PFConnectionManager.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.ToString">
            <summary>
            Routine overrides default ToString method and outputs name, type, scope and value for all class properties and fields.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.PropertiesToString">
            <summary>
            Routine outputs name and value for all properties.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.FieldsToString">
            <summary>
            Routine outputs name and value for all fields.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.ToXmlString">
            <summary>
            Returns a string containing the contents of the object in XML format.
            </summary>
            <returns>String value in xml format.</returns>
            ///<remarks>XML Serialization is used for the transformation.</remarks>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.LoadFromXmlString(System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance stored as a xml formatted string.
            </summary>
            <param name="xmlString">String containing the xml formatted representation of an instance of this class.</param>
            <returns>An instance of PFConnectionManager.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionManager.ToXmlDocument">
            <summary>
            Converts instance of this class into an XML document.
            </summary>
            <returns>XmlDocument</returns>
            ///<remarks>XML Serialization and XmlDocument class are used for the transformation.</remarks>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionManager.ErrorMessages">
            <summary>
            List of error messages reported during lifetime of current instance.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionManager.ProviderDefinitions">
            <summary>
            List of provider definition objects.
            </summary>
            <remarks>Some providers may not be installed on the local machine.</remarks>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionManager.ConnectionDefinitions">
            <summary>
            List of connection definition objects.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionManager.ProviderDefinitionsLocation">
            <summary>
            ProviderDefinitionsLocation Property. This will be either a file path if storage type is XML files or a SQL Compact 3.5 connection string if storage type is database.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionManager.ConnectionDefintionsLocation">
            <summary>
            ConnectionDefintionsLocation Property. This will be either a file path if storage type is XML files or a database connection string if storage type is database.
            </summary>
        </member>
        <member name="T:PFConnectionObjects.PFConnectionDefinition">
            <summary>
            Contains definition for a database connection.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionDefinition.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionDefinition.SaveToXmlFile(System.String)">
            <summary>
            Saves the public property values contained in the current instance to the specified file. Serialization is used for the save.
            </summary>
            <param name="filePath">Full path for output file.</param>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionDefinition.LoadFromXmlFile(System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance from a file.
            </summary>
            <param name="filePath">Full path for the input file.</param>
            <returns>An instance of PFConnectionDefinition.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionDefinition.ToString">
            <summary>
            Routine overrides default ToString method and outputs name, type, scope and value for all class properties and fields.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionDefinition.PropertiesToString">
            <summary>
            Routine outputs name and value for all properties.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionDefinition.FieldsToString">
            <summary>
            Routine outputs name and value for all fields.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionDefinition.ToXmlString">
            <summary>
            Returns a string containing the contents of the object in XML format.
            </summary>
            <returns>String value in xml format.</returns>
            ///<remarks>XML Serialization is used for the transformation.</remarks>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionDefinition.LoadFromXmlString(System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance stored as a xml formatted string.
            </summary>
            <param name="xmlString">String containing the xml formatted representation of an instance of this class.</param>
            <returns>An instance of PFConnectionDefinition.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionDefinition.ToXmlDocument">
            <summary>
            Converts instance of this class into an XML document.
            </summary>
            <returns>XmlDocument</returns>
            ///<remarks>XML Serialization and XmlDocument class are used for the transformation.</remarks>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionDefinition.ProviderDefinition">
            <summary>
            ProviderDefinition object.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionDefinition.DbPlatform">
            <summary>
            Database platform used by the connection.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionDefinition.ConnectionName">
            <summary>
            Name that uniquely identifies this connection.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionDefinition.ConnectionString">
            <summary>
            Connection string to use when connecting to the database represented this PFConnectionDefinition object.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionDefinition.ConnectionAccessStatus">
            <summary>
            Results of latest test connection using the connection string for this connection.
             Posssible values: IsAccessible, NotAccessible, Unknown.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionDefinition.ConnectionKeyElements">
            <summary>
            List of all the connection keys and their values for the current connection string.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionDefinition.DbPlatformConnectionStringProperties">
            <summary>
            List of common properties used to define a connection string for the provider in DbProvider property.
            </summary>
            <remarks>These are the properties displayed on the connecting string form. For list of all possible key/value combinations for the database provider, seerxxxxx the ConnectionKeyElements property.</remarks>
        </member>
        <member name="T:PFConnectionObjects.PFProviderDefinition">
            <summary>
            Class to encapsulate database provider information.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFProviderDefinition.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFProviderDefinition.#ctor(PFDataAccessObjects.DatabasePlatform)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFProviderDefinition.SaveToXmlFile(System.String)">
            <summary>
            Saves the public property values contained in the current instance to the specified file. Serialization is used for the save.
            </summary>
            <param name="filePath">Full path for output file.</param>
        </member>
        <member name="M:PFConnectionObjects.PFProviderDefinition.LoadFromXmlFile(System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance from a file.
            </summary>
            <param name="filePath">Full path for the input file.</param>
            <returns>An instance of PFProviderDefinition.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFProviderDefinition.ToString">
            <summary>
            Routine overrides default ToString method and outputs name, type, scope and value for all class properties and fields.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFProviderDefinition.PropertiesToString">
            <summary>
            Routine outputs name and value for all properties.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFProviderDefinition.FieldsToString">
            <summary>
            Routine outputs name and value for all fields.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFProviderDefinition.ToXmlString">
            <summary>
            Returns a string containing the contents of the object in XML format.
            </summary>
            <returns>String value in xml format.</returns>
            ///<remarks>XML Serialization is used for the transformation.</remarks>
        </member>
        <member name="M:PFConnectionObjects.PFProviderDefinition.LoadFromXmlString(System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance stored as a xml formatted string.
            </summary>
            <param name="xmlString">String containing the xml formatted representation of an instance of this class.</param>
            <returns>An instance of PFProviderDefinition.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFProviderDefinition.ToXmlDocument">
            <summary>
            Converts instance of this class into an XML document.
            </summary>
            <returns>XmlDocument</returns>
            ///<remarks>XML Serialization and XmlDocument class are used for the transformation.</remarks>
        </member>
        <member name="P:PFConnectionObjects.PFProviderDefinition.ProviderName">
            <summary>
            ProviderName Property. This should always be the database platform name in string format.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFProviderDefinition.DbPlatform">
            <summary>
            DbPlatform Property.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFProviderDefinition.InvariantName">
            <summary>
            InvariantName by which the provider is known.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFProviderDefinition.AssemblyNamespace">
            <summary>
            Namespace associated with the assembly containing the provider code..
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFProviderDefinition.AssemblyName">
            <summary>
            Name of the DLL containing the provider code.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFProviderDefinition.InstallationStatus">
            <summary>
            InstallationStatus Property.
            </summary>
            <remarks>Valid results are Installed, NotInstalled or Unknown installation status.</remarks>
        </member>
        <member name="P:PFConnectionObjects.PFProviderDefinition.AvailableForSelection">
            <summary>
            If true, provider will be displayed as available on forms that allow user to select a database provider.
            if false, provider will not be displayed on database provider selectors.
            </summary>
        </member>
        <member name="T:PFConnectionObjects.PFConnectionKeyElement">
            <summary>
            Class that defines the information needed for a connection key.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionKeyElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionKeyElement.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Name of key,</param>
            <param name="val">Value for the key.</param>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionKeyElement.#ctor(System.String,System.String,PFConnectionObjects.enConnectionStringValuePrompt)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Name of key,</param>
            <param name="val">Value for the key.</param>
            <param name="valuePrompt">Type of prompt for a key value: TextBox or ComboBo.</param>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionKeyElement.#ctor(System.String,System.String,PFConnectionObjects.enConnectionStringValuePrompt,System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="key">Name of key,</param>
            <param name="val">Value for the key.</param>
            <param name="valuePrompt">Type of prompt for a key value: TextBox or ComboBo.</param>
            <param name="selectionValues">Set of allowable values for the key. Send in null or an array of one element (an empty string) if any value is allowed.</param>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionKeyElement.SaveToXmlFile(System.String)">
            <summary>
            Saves the column definitions contained in the current instance to the specified file. Serialization is used for the save.
            </summary>
            <param name="filePath">Full path for output file.</param>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionKeyElement.LoadFromXmlFile(System.String)">
            <summary>
            Creates and initializes an instance of the class by loading a serialized version of the instance from a file.
            </summary>
            <param name="filePath">Full path for the input file.</param>
            <returns>An instance of PFConnectionKeyElement.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionKeyElement.ToString">
            <summary>
            Routine overrides default ToString method and outputs name, type, scope and value for all class properties and fields.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionKeyElement.PropertiesToString">
            <summary>
            Routine outputs name and value for all properties.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionKeyElement.FieldsToString">
            <summary>
            Routine outputs name and value for all fields.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionKeyElement.ToXmlString">
            <summary>
            Returns a string containing the contents of the object in XML format.
            </summary>
            <returns>String value in xml format.</returns>
            ///<remarks>XML Serialization is used for the transformation.</remarks>
        </member>
        <member name="M:PFConnectionObjects.PFConnectionKeyElement.ToXmlDocument">
            <summary>
            Converts instance of this class into an XML document.
            </summary>
            <returns>XmlDocument</returns>
            ///<remarks>XML Serialization and XmlDocument class are used for the transformation.</remarks>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionKeyElement.Key">
            <summary>
            Name of connection string key.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionKeyElement.Val">
            <summary>
            Value associated with the connection string key.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionKeyElement.ValuePrompt">
            <summary>
            Type of prompt for connection string key value(s). Can be a TextBox or a ComboBox.
            </summary>
        </member>
        <member name="P:PFConnectionObjects.PFConnectionKeyElement.SelectionVals">
            <summary>
            Zero or more possible selection values to show to caller when prompting for a key value.
            </summary>
        </member>
    </members>
</doc>
