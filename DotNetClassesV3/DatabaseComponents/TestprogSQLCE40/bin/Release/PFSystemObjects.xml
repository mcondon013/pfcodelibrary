<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PFSystemObjects</name>
    </assembly>
    <members>
        <member name="T:PFSystemObjects.WinAppConsole">
            <summary>Simple class to allow creation and destruction of Consoles.</summary>
        </member>
        <member name="M:PFSystemObjects.WinAppConsole.Create">
            <summary>
            Creates a console output window, if one doesn't already exist.
            This window will receive all outputs from System.Console.Write()
            </summary>
            <returns>
            0 if successful, else the Windows API error code from Marshal.GetLastWin32Error()
            </returns>
            <remarks>See the AllocConsole() function in the Windows API for full details.</remarks>
        </member>
        <member name="M:PFSystemObjects.WinAppConsole.Destroy">
            <summary>
            Destroys the console window, if it exists.
            </summary>
            <returns>
            0 if successful, else the Windows API error code from Marshal.GetLastWin32Error()
            </returns>
            <remarks>See the FreeConsole() function in the Windows API for full details.</remarks>
        </member>
        <member name="T:PFSystemObjects.SysInfo">
            <summary>
            Class for retrieving various kinds of system information.
            </summary>
        </member>
        <member name="M:PFSystemObjects.SysInfo.GetMemoryInfo">
            <summary>
            Gets information on memory usage for the computer.
            </summary>
            <returns>pfMemoryInfo object that contains results.</returns>
        </member>
        <member name="M:PFSystemObjects.SysInfo.DefaultPrinterIsDefined">
            <summary>
            Routine to report whether or not a default printer exists for the system.
            </summary>
            <returns>Returns false if the default printer is not defined.</returns>
        </member>
        <member name="M:PFSystemObjects.SysInfo.GetDefaultPrinterName">
            <summary>
            Routine to retrieve the name of the default printer.
            </summary>
            <returns>String value representing the name of the printer.</returns>
        </member>
        <member name="M:PFSystemObjects.SysInfo.GetPrinterNameList">
            <summary>
            Routine to get a list of all the printers defined for the system.
            </summary>
            <returns>If any printers exist, returns a string array containing their names.
             Returns null if no printers defined for the system.</returns>
        </member>
        <member name="P:PFSystemObjects.SysInfo.TotalMemory">
            <summary>
            Total amount of memory on the computer.
            </summary>
        </member>
        <member name="P:PFSystemObjects.SysInfo.TotalFreeMemory">
            <summary>
            Total amount of free memory on the computer.
            </summary>
        </member>
        <member name="P:PFSystemObjects.SysInfo.TotalCommittedMemory">
            <summary>
            Total amount of committed memory on the computer.
            </summary>
        </member>
        <member name="P:PFSystemObjects.SysInfo.PercentMemoryUsage">
            <summary>
            Percentage of total memory currently in use.
            </summary>
        </member>
        <member name="T:PFSystemObjects.SysInfo.pfMemoryInfo">
            <summary>
            Structure used for storing memory information.
            </summary>
        </member>
        <member name="T:PFSystemObjects.WindowsEventLog">
            <summary>
            Class encapsulates functionality to write to the Windows event log.
            </summary>
        </member>
        <member name="M:PFSystemObjects.WindowsEventLog.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFSystemObjects.WindowsEventLog.#ctor(PFSystemObjects.WindowsEventLog.EventLogName)">
            <summary>
            Constructor.
            </summary>
            <param name="logName">Name of the log to write to.</param>
        </member>
        <member name="M:PFSystemObjects.WindowsEventLog.#ctor(PFSystemObjects.WindowsEventLog.EventLogName,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="logName">Name of the log to write to.</param>
            <param name="machineName">Name of machine where log is located.</param>
        </member>
        <member name="M:PFSystemObjects.WindowsEventLog.#ctor(PFSystemObjects.WindowsEventLog.EventLogName,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="logName">Name of the log to write to.</param>
            <param name="machineName">Name of machine where log is located.</param>
            <param name="eventSource">Source of the event log entries.</param>
        </member>
        <member name="M:PFSystemObjects.WindowsEventLog.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="logName">Name of the log to write to.</param>
        </member>
        <member name="M:PFSystemObjects.WindowsEventLog.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="logName">Name of the log to write to.</param>
            <param name="machineName">Name of machine where log is located.</param>
        </member>
        <member name="M:PFSystemObjects.WindowsEventLog.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="logName">Name of the log to write to.</param>
            <param name="machineName">Name of machine where log is located.</param>
            <param name="eventSource">Source of the event log entries.</param>
        </member>
        <member name="M:PFSystemObjects.WindowsEventLog.WriteEntry(System.String,PFSystemObjects.WindowsEventLog.WindowsEventLogEntryType)">
            <summary>
            Routine to write messages to an event log.
            </summary>
            <param name="message">Text of the message to be written.</param>
            <param name="entryType">Type of message: Error, Warning, Information, SuccessAudit or FailureAudit.</param>
        </member>
        <member name="M:PFSystemObjects.WindowsEventLog.SourceExists(System.String)">
            <summary>
            Determines whether or not an event source is registered on the local computer.
            </summary>
            <param name="eventSourceName">Name of the event source.</param>
            <returns>True if event source name is registered. Otherwise, returns false.</returns>
        </member>
        <member name="M:PFSystemObjects.WindowsEventLog.SourceExists(System.String,System.String)">
            <summary>
            Determines whether or not an event source is registered on a specified computer.
            </summary>
            <param name="eventSourceName">Name of the event source.</param>
            <param name="machineName">Name of the computer on which to look, or "." for the local computer.</param>
            <returns>True if event source name is registered. Otherwise, returns false.</returns>
        </member>
        <member name="M:PFSystemObjects.WindowsEventLog.RegisterEventSource(System.String,System.String,System.String)">
            <summary>
            Method for registering a Windows Event Log event source.
            </summary>
            <param name="logName">Name of log to which messages will be written. Usually is the Application log.</param>
            <param name="machineName">Name of the machine on which the log resides. Specify . or localhost for local machine.</param>
            <param name="eventSourceName">Name of the event source. Usually will be PFApps for ProFast applications.</param>
            <returns></returns>
        </member>
        <member name="P:PFSystemObjects.WindowsEventLog.EventLog">
            <summary>
            EventLog Property.
            </summary>
        </member>
        <member name="P:PFSystemObjects.WindowsEventLog.LogName">
            <summary>
            LogName Property.
            </summary>
        </member>
        <member name="P:PFSystemObjects.WindowsEventLog.MachineName">
            <summary>
            MachineName Property.
            </summary>
        </member>
        <member name="P:PFSystemObjects.WindowsEventLog.EventSource">
            <summary>
            EventSource Property.
            </summary>
        </member>
        <member name="P:PFSystemObjects.WindowsEventLog.EventSourceInitializer">
            <summary>
            Full path to the executable that can initialize an event source. 
            </summary>
            <remarks>Value can be specified in an application's config file by setting the value for the EventSourceInitializer key.</remarks>
        </member>
        <member name="P:PFSystemObjects.WindowsEventLog.CurrentWorkingDirectory">
            <summary>
            CurrentWorkingDirectory Property.
            </summary>
        </member>
        <member name="P:PFSystemObjects.WindowsEventLog.OutputMessages">
            <summary>
            Returns output messages, if any, generated by the process that registers the event source name.
            </summary>
        </member>
        <member name="P:PFSystemObjects.WindowsEventLog.ErrorMessages">
            <summary>
            Returns error messages, if any, generated by the process that registers the event source name.
            </summary>
        </member>
        <member name="T:PFSystemObjects.WindowsRegistry">
            <summary>
            Class for reading and writing the Windows registry.
            </summary>
            <remarks>if running on a 64-bit machine, the HKEY_LOCAL_MACHINE code show up under the Wow6432Node.</remarks>
        </member>
        <member name="M:PFSystemObjects.WindowsRegistry.RegistryValueNameExists(System.String,System.String,System.String)">
            <summary>
            Verifies whether or not a particular value name exists.
            </summary>
            <param name="baseKey">HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CONFIG</param>
            <param name="subKey">Full path of subkey. For example: SOFTWARE\CompanyName\InternalApps\WinAppComponents\Program01</param>
            <param name="valueName">Name of the value. For example: ConnectionString</param>
            <returns>True/False.</returns>
            <remarks>Throws an exception if an error is encountered during processing.</remarks>
        </member>
        <member name="M:PFSystemObjects.WindowsRegistry.DeleteRegistryValue(System.String,System.String,System.String)">
            <summary>
            Deletes a value from the registry.
            </summary>
            <param name="baseKey">HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CONFIG</param>
            <param name="subKey">Full path of subkey. For example: SOFTWARE\CompanyName\InternalApps\WinAppComponents\Program01</param>
            <param name="valueName">Name of the value. For example: ConnectionString</param>
            <returns>True if success. Otherwise false.</returns>
            <remarks>Throws an exception if an error is encountered during processing.</remarks>
        </member>
        <member name="M:PFSystemObjects.WindowsRegistry.GetRegistryValueString(System.String,System.String,System.String,System.Object)">
            <summary>
            Retrieve a registry value as string.
            </summary>
            <param name="baseKey">HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CONFIG</param>
            <param name="subKey">Full path of subkey. For example: SOFTWARE\CompanyName\InternalApps\WinAppComponents\Program01</param>
            <param name="valueName">Name of the value. For example: ConnectionString</param>
            <param name="defaultValue">Value if registry path not found.</param>
            <returns>String representing value.</returns>
            <remarks>Throws an exception if an error is encountered during processing.</remarks>
        </member>
        <member name="M:PFSystemObjects.WindowsRegistry.GetRegistryValueInt(System.String,System.String,System.String,System.Object)">
            <summary>
            Retrieve a registry value as an integer (int).
            </summary>
            <param name="baseKey">HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CONFIG</param>
            <param name="subKey">Full path of subkey. For example: SOFTWARE\CompanyName\InternalApps\WinAppComponents\Program01</param>
            <param name="valueName">Name of the value. For example: ConnectionString</param>
            <param name="defaultValue">Value if registry path not found.</param>
            <returns>Int representing value.</returns>
            <remarks>Throws an exception if an error is encountered during processing.</remarks>
        </member>
        <member name="M:PFSystemObjects.WindowsRegistry.GetRegistryValueLong(System.String,System.String,System.String,System.Object)">
            <summary>
            Retrieve a registry value as a long.
            </summary>
            <param name="baseKey">HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CONFIG</param>
            <param name="subKey">Full path of subkey. For example: SOFTWARE\CompanyName\InternalApps\WinAppComponents\Program01</param>
            <param name="valueName">Name of the value. For example: ConnectionString</param>
            <param name="defaultValue">Value if registry path not found.</param>
            <returns>Long representing value.</returns>
            <remarks>Throws an exception if an error is encountered during processing.</remarks>
        </member>
        <member name="M:PFSystemObjects.WindowsRegistry.GetRegistryValueBinary(System.String,System.String,System.String,System.Object)">
            <summary>
            Retrieve a registry value as a byte array.
            </summary>
            <param name="baseKey">HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CONFIG</param>
            <param name="subKey">Full path of subkey. For example: SOFTWARE\CompanyName\InternalApps\WinAppComponents\Program01</param>
            <param name="valueName">Name of the value. For example: ConnectionString</param>
            <param name="defaultValue">Value if registry path not found.</param>
            <returns>Byte array representing value.</returns>
            <remarks>Throws an exception if an error is encountered during processing.</remarks>
        </member>
        <member name="M:PFSystemObjects.WindowsRegistry.GetRegistryValueObject(System.String,System.String,System.String,System.Object)">
            <summary>
            Retrieve a registry value as an object.
            </summary>
            <param name="baseKey">HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CONFIG</param>
            <param name="subKey">Full path of subkey. For example: SOFTWARE\CompanyName\InternalApps\WinAppComponents\Program01</param>
            <param name="valueName">Name of the value. For example: ConnectionString</param>
            <param name="defaultValue">Value if registry path not found.</param>
            <returns>Object representing value.</returns>
            <remarks>Throws an exception if an error is encountered during processing.</remarks>
        </member>
        <member name="M:PFSystemObjects.WindowsRegistry.GetRegistryValue(System.String,System.String,System.String,System.Object)">
            <summary>
            Retrieve a registry value as a pfRegistryValue struct.
            </summary>
            <param name="baseKey">HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CONFIG</param>
            <param name="subKey">Full path of subkey. For example: SOFTWARE\CompanyName\InternalApps\WinAppComponents\Program01</param>
            <param name="valueName">Name of the value. For example: ConnectionString</param>
            <param name="defaultValue">Value if registry path not found.</param>
            <returns>pfRegistryValue struct representing value.</returns>
            <remarks>Throws an exception if an error is encountered during processing.</remarks>
        </member>
        <member name="M:PFSystemObjects.WindowsRegistry.SetRegistryValue(System.String,System.String,System.String,System.Object)">
            <summary>
            Writes a value to the registry.
            </summary>
            <param name="baseKey">HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CONFIG</param>
            <param name="subKey">Full path of subkey. For example: SOFTWARE\CompanyName\InternalApps\WinAppComponents\Program01</param>
            <param name="valueName">Name of the value. For example: ConnectionString</param>
            <param name="value">Value to set for the value name.</param>
            <returns>pfRegistryValue struct.</returns>
            <remarks>Throws an exception if an error is encountered during processing.</remarks>
        </member>
        <member name="M:PFSystemObjects.WindowsRegistry.SetRegistryValue(System.String,System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Writes a value to the registry.
            </summary>
            <param name="baseKey">HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CONFIG</param>
            <param name="subKey">Full path of subkey. For example: SOFTWARE\CompanyName\InternalApps\WinAppComponents\Program01</param>
            <param name="valueName">Name of the value. For example: ConnectionString</param>
            <param name="value">Value to set for the value name.</param>
            <param name="valueKind">Specifies type of value to write. (e.g. binary, string, expandstring, multistring, dword, Qword) See <see cref="T:Microsoft.Win32.RegistryValueKind"/> for more information. </param>
            <returns>pfRegistryValue struct.</returns>
            <remarks>Throws an exception if an error is encountered during processing.</remarks>
        </member>
        <member name="M:PFSystemObjects.WindowsRegistry.RegistrySubKeyExists(System.String,System.String)">
            <summary>
            Verifies whether or not a key/subkey path exists.
            </summary>
            <param name="baseKey">HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CONFIG</param>
            <param name="subKey">Full path of subkey. For example: SOFTWARE\CompanyName\InternalApps\WinAppComponents\Program01</param>
            <returns>True or False.</returns>
            <remarks>Throws an exception if an error is encountered during processing.</remarks>
        </member>
        <member name="M:PFSystemObjects.WindowsRegistry.DeleteRegistrySubKey(System.String,System.String)">
            <summary>
            Deletes subkey from registry.
            </summary>
            <param name="baseKey">HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CONFIG</param>
            <param name="subKey">Full path of subkey. For example: SOFTWARE\CompanyName\InternalApps\WinAppComponents\Program01</param>
            <returns>True if success; otherwise false.</returns>
            <remarks>Throws an exception if an error is encountered during processing.</remarks>
        </member>
        <member name="M:PFSystemObjects.WindowsRegistry.CreateRegistrySubKey(System.String,System.String)">
            <summary>
            Creates the registry subKey specified by the parameters.
            </summary>
            <param name="baseKey">HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CONFIG</param>
            <param name="subKey">Full path of subkey. For example: SOFTWARE\CompanyName\InternalApps\WinAppComponents\Program01</param>
            <returns>True if success; otherwise false.</returns>
            <remarks>Throws an exception if an error is encountered during processing.</remarks>
        </member>
        <member name="T:PFSystemObjects.WindowsAssembly">
            <summary>
            Class contains various methods for creating and instantiating objects dynamically.
            </summary>
        </member>
        <member name="M:PFSystemObjects.WindowsAssembly.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFSystemObjects.WindowsAssembly.Load(System.String)">
            <summary>
            Loads assembly from specified file location 
            </summary>
            <param name="fileName">Path to the file containing the assembly.</param>
            <returns>Assembly object.</returns>
        </member>
        <member name="M:PFSystemObjects.WindowsAssembly.LoadType(System.String,System.String)">
            <summary>
            Loads assembly and then retrieves requested type from the assembly.
            </summary>
            <param name="fileName">Path to the file containing the assembly.</param>
            <param name="pType">The full name of the type.</param>
            <returns>Type object.</returns>
        </member>
        <member name="M:PFSystemObjects.WindowsAssembly.LoadAndInstantiateType(System.String,System.String)">
            <summary>
            Loads and instantiates requested type from specified assembly file.
            </summary>
            <param name="fileName">Path to the file containing the assembly.</param>
            <param name="pType">The full name of the type.</param>
            <returns>Instantiated object of the requested type.</returns>
        </member>
        <member name="M:PFSystemObjects.WindowsAssembly.GetType(System.Reflection.Assembly,System.String)">
            <summary>
            Retrieves requested type from the specified assembly.
            </summary>
            <param name="asm">Assembly containing the type.</param>
            <param name="pType">Type to get.</param>
            <returns>Type object.</returns>
        </member>
        <member name="M:PFSystemObjects.WindowsAssembly.GetType(System.String)">
            <summary>
            Retrieves requested type from the currently executing assembly.
            </summary>
            <param name="pType">The full name of the type.</param>
            <returns>Type object.</returns>
        </member>
        <member name="M:PFSystemObjects.WindowsAssembly.GetPropertyValue(System.Object,System.String,System.Object[])">
            <summary>
            Retrieves a value for the specified property contained in the object instance.
            </summary>
            <param name="pInstance">Instance of object containing property value to be returned.</param>
            <param name="pProperty">Name of the property.</param>
            <param name="pIndex">Null if property is not indexed. Otherwise specify the required index or indexes.</param>
            <returns>Object containing the value of the property.</returns>
        </member>
        <member name="M:PFSystemObjects.WindowsAssembly.InstantiateType(System.Type)">
            <summary>
            Activates an instance of the specified type from the currently executing assembly.
            </summary>
            <param name="pType">Type to be instantiated.</param>
            <returns>Instantiated object of the requested type.</returns>
        </member>
        <member name="M:PFSystemObjects.WindowsAssembly.InvokeVoidMethodNoArguments(System.Type,System.String)">
            <summary>
            Invokes a method on the specified class. Method does not have any parameters and does not have a return value.
            </summary>
            <param name="pType">Type containing method to run.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:PFSystemObjects.WindowsAssembly.InvokeVoidMethodWithArguments(System.Type,System.String,System.Object[])">
            <summary>
            Invokes a method on the specified class. Method has parameters but does not have a return value.
            </summary>
            <param name="pType">Type containing method to run.</param>
            <param name="methodName">Name of the method.</param>
            <param name="args">Array of argument values to pass to the method.</param>
        </member>
        <member name="M:PFSystemObjects.WindowsAssembly.InvokeMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invokes a method on the specified class. Method takes arguments. 
            </summary>
            <param name="pType">Type containing method to run.</param>
            <param name="methodName">Name of the method.</param>
            <param name="args">Array of argument values to pass to the method.</param>
            <returns>Object containing the return value.</returns>
        </member>
        <member name="T:PFSystemObjects.PFSystemTypeInfo">
            <summary>
            Routines for getting information about System.Type of an object.
            </summary>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.ConvertNameToType(System.String)">
            <summary>
            Returns an object of the type specified by the full name string in the parameter.
            </summary>
            <param name="DataTypeName">Full name of the data type.</param>
            <returns></returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsValid(System.String)">
            <summary>
            Determines if specified data type name is one of the base .NET data types.
            </summary>
            <param name="DataTypeName">Name of the data type.</param>
            <returns>Returns true if the data type name refers to one of the base .NET data types.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.GetDataTypeMaxLength(System.String)">
            <summary>
            Determines the maximum length for a specified .NET data type.
            </summary>
            <param name="DataTypeName">Name of the data type.</param>
            <returns>Returns true if the data type name refers to one of the base .NET data types.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsNumeric(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is numeric.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is a numeric data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsInteger(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is one of the integer data types.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is an integer data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIs32BitInteger(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is one of the 32-bit integer data types.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is a 32-bit integer data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIs64BitInteger(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is one of the 64-bit integer data types.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is a 64-bit integer data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIs16BitInteger(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is one of the 16-bit integer data types.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is a 16-bit integer data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsFloatingPoint(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is floating point.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is a floating point data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsDecimal(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is decimal.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is a decimal data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsBoolean(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is a boolean.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is a boolean data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsDateTime(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is a DateTime.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is a DateTime data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsString(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is a string.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is a string data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsGuid(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is a Guid.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is the guid data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsObject(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is an Object.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is the object data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsChar(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is the char data type.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is the char data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsByte(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is one of the byte data types.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is an byte data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsCharArray(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is a char array.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is a char array data type; otherwise false.</returns>
        </member>
        <member name="M:PFSystemObjects.PFSystemTypeInfo.DataTypeIsByteArray(System.Type)">
            <summary>
            Evaluates whether or not the specified system type is a byte array.
            </summary>
            <param name="sysType">Type to be evaluated.</param>
            <returns>Returns true if the specified type is a byte array data type; otherwise false.</returns>
        </member>
    </members>
</doc>
