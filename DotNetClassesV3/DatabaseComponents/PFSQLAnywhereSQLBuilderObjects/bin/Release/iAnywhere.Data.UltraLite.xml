<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iAnywhere.Data.UltraLite</name>
    </assembly>
    <members>
        <member name="T:iAnywhere.Data.UltraLite.ListSourceBaseRow">
            <summary><para>Contains the values of a table row. This class stores
            all data-types as objects. Since C# does implicit boxing/unboxing, this
            is possible even for native types.</para></summary>
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ListSourceBaseColumn">
            <summary><para>Helper class -- allows the DataGrid to get column names and types
            The GetValue() method can be used by the DataGrid to get data values of a column,
            given a particular row.
            </para></summary>
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ListSourceManager">
            <summary><para>This classes contains type converstion
            related methods.</para></summary>
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ListSourceBase">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULActiveSyncListener">
            <summary>
   <para>
    <i><b>UL Ext: </b></i> The listener interface for receiving ActiveSync events. </para>
  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULActiveSyncListener.ActiveSyncInvoked(System.Boolean)">
            <summary>
   <para> Invoked when the MobiLink provider for ActiveSync calls the application to perform synchronization. </para>
  </summary><remarks>
   <para> This method is invoked by a separate thread. To avoid multi-threading issues, it should post an event to the UI. If you are using multi-threading, it is recommended that you use a separate connection and use the lock keyword to access any objects shared with the rest of the application.</para>
   <para>Once synchronization has completed, applications should call ULDatabaseManager.SignalSyncIsComplete() to signal the MobiLink provider for ActiveSync.</para>
  </remarks><param name="launchedByProvider"> True if the application was launched by the MobiLink provider to perform ActiveSync synchronization. The application must then shut itself down after it has finished synchronizing. False if the application was already running when called by the MobiLink provider for ActiveSync. </param><example> The following code fragments demonstrate how to receive an ActiveSync request and perform a synchronization in the UI thread.
  <code>
' Visual Basic
Imports iAnywhere.Data.UltraLite
Public Class MainWindow
    Inherits System.Windows.Forms.Form
    Implements ULActiveSyncListener

    Private conn As ULConnection

    Public Sub New(ByVal args() As String)
        MyBase.New()

        ' This call is required by the Windows Form Designer.
        InitializeComponent()

        ' Add any initialization after the InitializeComponent call.
        ULConnection.DatabaseManager.SetActiveSyncListener( _
            "myCompany.myapp", Me _ 
        )

        ' Create Connection
        ...
    End Sub

    Protected Overrides Sub OnClosing( _
        ByVal e As System.ComponentModel.CancelEventArgs _
    )
        ULConnection.DatabaseManager.SetActiveSyncListener( _
            Nothing, Nothing _
        )
        MyBase.OnClosing(e)
    End Sub

    Public Sub ActiveSyncInvoked( _
        ByVal launchedByProvider As Boolean _
    ) Implements ULActiveSyncListener.ActiveSyncInvoked
        Me.Invoke(New EventHandler(AddressOf Me.ActiveSyncAction))
    End Sub

    Public Sub ActiveSyncAction( _
        ByVal sender As Object, ByVal e As EventArgs _
    )
        ' Perform active sync.
        conn.Synchronize()
        ULConnection.DatabaseManager.SignalSyncIsComplete()
    End Sub
End Class
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
using iAnywhere.Data.UltraLite;

public class Form1 : System.Windows.Forms.Form, ULActiveSyncListener
{
    private System.Windows.Forms.MainMenu mainMenu1;
    private ULConnection conn;

    public Form1()
    {
        //
        // Required for Windows Form Designer support.
        // InitializeComponent();

        //
        // TODO: Add any constructor code after the
        // InitializeComponent call.
        //
        ULConnection.DatabaseManager.SetActiveSyncListener( _
            "myCompany.myapp", this _
        );

        // Create connection
        ...
    }

    protected override void Dispose( bool disposing )
    {
        base.Dispose( disposing );
    }

    protected override void OnClosing( _
        System.ComponentModel.CancelEventArgs e )
	{
        ULConnection.DatabaseManager.SetActiveSyncListener(null, null);
        base.OnClosing(e);
    }

    public void ActiveSyncInvoked(bool launchedByProvider)
    {
        this.Invoke( new EventHandler( ActiveSyncHandler ) );
    }

    internal void ActiveSyncHandler(object sender, EventArgs e)
    {
        conn.Synchronize();
        ULConnection.DatabaseManager.SignalSyncIsComplete();
    }
}
  </code>
  </example><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SignalSyncIsComplete"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.AsyncCommandType">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.AsyncCommandResult">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULCommand">
            <summary>
            <para> Represents a pre-compiled SQL statement or query, with or without IN parameters. This object can be used to execute a statement or query efficiently multiple times. </para>
        </summary><remarks>
            <para> ULCommand objects can be created directly, or with the ULConnection.CreateCommand method. This method ensures that the command has the correct transaction for executing statements on the given connection. </para>
            <para> The ULCommand.Transaction method must be reset after the current transaction is committed or rolled back. </para>
            <para> ULCommand features the following methods for executing commands on an UltraLite.NET database: </para>
            <list type="table">
            <listheader>
                <term>Method</term><term>Description</term> 
            </listheader>
            <item>
            <term>ULCommand.ExecuteNonQuery</term> <term>Executes a statement that does not return a result set, such as a SQL INSERT, DELETE, or UPDATE statement. </term> 
            </item>
            <item>
            <term>ULCommand.ExecuteReader()</term> <term>Executes a SQL SELECT statement and returns the result set in a ULDataReader. Use this method for creating read-only result sets.</term> 
            </item>
            <item>
            <term>ULCommand.ExecuteResultSet()</term> <term><i><b>UL Ext: </b></i> Executes a SQL SELECT statement and returns the result set in a ULResultSet. Use this method for creating mutable result sets.</term> 
            </item>
            <item>
            <term>ULCommand.ExecuteScalar</term> <term>Executes a SQL SELECT statement and returns a single value. </term> 
            </item>
            <item>
            <term>ULCommand.ExecuteTable()</term> <term><i><b>UL Ext: </b></i> Retrieves a database table in a ULTable for direct manipulation. The ULCommand.CommandText is interpreted as the name of the table and the ULCommand.IndexName can be used to specify a table sorting order. The ULCommand.CommandType must be System.Data.CommandType.TableDirect. </term> 
            </item>
            </list>
            <para> You can reset most properties, including the ULCommand.CommandText, and reuse the ULCommand object. </para>
            <para> For resource management reasons, it is recommended that you explicitly dispose of commands when you are done with them. In C#, you may use a using statement to automatically call the System.ComponentModel.Component.Dispose() method or explicitly call the System.ComponentModel.Component.Dispose() method. In Visual Basic, you always explicitly call the System.ComponentModel.Component.Dispose() method.</para>
        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteNonQuery"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteResultSet"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteScalar"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTable"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.IndexName"/><seealso cref="T:iAnywhere.Data.UltraLite.ULResultSet"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/><seealso cref="T:System.Data.Common.DbCommand"/><seealso cref="T:System.Data.IDbCommand"/><seealso cref="T:System.IDisposable"/><seealso cref="T:System.Data.CommandType"/><seealso cref="M:System.ComponentModel.Component.Dispose"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.#ctor">
            <summary>
            <para> Initializes a ULCommand object. </para>
        </summary><remarks>
            <para> The ULCommand object needs to have the ULCommand.CommandText, ULCommand.Connection, and ULCommand.Transaction properties set before a statement can be executed. </para>
        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection,iAnywhere.Data.UltraLite.ULTransaction)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String)">
            <summary>
            <para> Initializes a ULCommand object with the specified command text. </para>
        </summary><remarks>
            <para> The ULCommand object needs to have the ULCommand.Connection and ULCommand.Transaction set before a statement can be executed. </para>
        </remarks><param name="cmdText">
            The text of the SQL statement or name of the table when the ULCommand.CommandType is System.Data.CommandType.TableDirect. For parameterized statements, use a question mark (?) placeholder to pass parameters. 
        </param><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection,iAnywhere.Data.UltraLite.ULTransaction)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/><seealso cref="T:System.Data.CommandType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)">
            <summary>
            <para> Initializes a ULCommand object with the specified command text and connection. </para>
        </summary><remarks>
            <para> The ULCommand object may need to have the ULCommand.Transaction set before a statement can be executed. </para>
        </remarks><param name="cmdText">
            The text of the SQL statement or name of the table when the ULCommand.CommandType is System.Data.CommandType.TableDirect. For parameterized statements, use a question mark (?) placeholder to pass parameters. 
        </param><param name="connection">
            The ULConnection object representing the current connection. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection,iAnywhere.Data.UltraLite.ULTransaction)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/><seealso cref="T:System.Data.CommandType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection,iAnywhere.Data.UltraLite.ULTransaction)">
            <summary>
            <para> Initializes a ULCommand object with the specified command text, connection, and transaction. </para>
        </summary><param name="cmdText">
            The text of the SQL statement or name of the table when the ULCommand.CommandType is System.Data.CommandType.TableDirect. For parameterized statements, use a question mark (?) placeholder to pass parameters. 
        </param><param name="connection">
            The ULConnection object representing the current connection. 
        </param><param name="transaction">
            The ULTransaction in which the ULCommand executes. 
        </param><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTransaction"/><seealso cref="T:System.Data.CommandType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.Dispose(System.Boolean)">
            <summary>
            <para> Releases the unmanaged resources used by the ULCommand and optionally releases the managed resources. </para>
        </summary><param name="disposing">
            When true, disposes of both the managed and unmanaged resources. When false, disposes of only the unmanaged resources. 
        </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.BeginExecuteNonQuery">
            <summary>
            <para>Initiates the asynchronous execution of a SQL statement that is described by this ULCommand.</para>
        </summary><returns>
        <para>A System.IAsyncResult that can be used to poll, wait for results, or both is returned; this value is also needed when invoking EndExecuteNonQuery(IAsyncResult), which returns the number of affected rows.</para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>Any error that occurred while executing the command text.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.EndExecuteNonQuery(System.IAsyncResult)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.EndExecuteNonQuery(System.IAsyncResult)"/><seealso cref="T:System.IAsyncResult"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of a SQL statement that is described by this ULCommand, given a callback procedure and state information.</para>
        </summary><param name="callback">
            An System.AsyncCallback delegate that is invoked when the command's execution has completed. Pass null (Nothing in Microsoft Visual Basic) to indicate that no callback is required. 
        </param><param name="stateObject">
            A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the System.IAsyncResult.AsyncState property. 
        </param><returns>
        <para>A System.IAsyncResult that can be used to poll, wait for results, or both is returned; this value is also needed when invoking EndExecuteNonQuery(IAsyncResult), which returns the number of affected rows.</para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>Any error that occurred while executing the command text.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.EndExecuteNonQuery(System.IAsyncResult)"/><seealso cref="P:System.IAsyncResult.AsyncState"/><seealso cref="T:System.AsyncCallback"/><seealso cref="T:System.IAsyncResult"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.BeginExecuteReader">
            <summary>
            <para>Initiates the asynchronous execution of a SQL statement that is described by this ULCommand, and retrieves the result set.</para>
        </summary><returns>
        <para>An System.IAsyncResult that can be used to poll, wait for results, or both is returned; this value is also needed when invoking EndExecuteReader(IAsyncResult), which returns an ULDataReader instance that can be used to retrieve the returned rows.</para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>Any error that occurred while executing the command text.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.EndExecuteReader(System.IAsyncResult)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/><seealso cref="T:System.IAsyncResult"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.BeginExecuteReader(System.Data.CommandBehavior)">
            <summary>
            <para>Initiates the asynchronous execution of a SQL statement that is described by this ULCommand, using one of the CommandBehavior values, and retrieves the result set.</para>
        </summary><param name="cmdBehavior">
            A bitwise combination of System.Data.CommandBehavior flags describing the results of the query and its effect on the connection. UltraLite.NET respects only the System.Data.CommandBehavior.Default, System.Data.CommandBehavior.CloseConnection, and System.Data.CommandBehavior.SchemaOnly flags. 
        </param><returns>
        <para>An System.IAsyncResult that can be used to poll, wait for results, or both is returned; this value is also needed when invoking EndExecuteReader(IAsyncResult), which returns an ULDataReader instance that can be used to retrieve the returned rows.</para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>Any error that occurred while executing the command text.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.EndExecuteReader(System.IAsyncResult)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/><seealso cref="T:System.Data.CommandBehavior"/><seealso cref="F:System.Data.CommandBehavior.Default"/><seealso cref="F:System.Data.CommandBehavior.CloseConnection"/><seealso cref="F:System.Data.CommandBehavior.SchemaOnly"/><seealso cref="T:System.IAsyncResult"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.BeginExecuteReader(System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of a SQL statement that is described by this ULCommand, and retrieves the result set, given a callback procedure and state information.</para>
        </summary><param name="callback">
            An System.AsyncCallback delegate that is invoked when the command's execution has completed. Pass null (Nothing in Microsoft Visual Basic) to indicate that no callback is required. 
        </param><param name="stateObject">
            A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the System.IAsyncResult.AsyncState property. 
        </param><returns>
        <para>An System.IAsyncResult that can be used to poll, wait for results, or both is returned; this value is also needed when invoking EndExecuteReader(IAsyncResult), which returns an ULDataReader instance that can be used to retrieve the returned rows.</para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>Any error that occurred while executing the command text.</para>
        </exception><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.EndExecuteReader(System.IAsyncResult)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.EndExecuteReader(System.IAsyncResult)"/><seealso cref="T:System.AsyncCallback"/><seealso cref="P:System.IAsyncResult.AsyncState"/><seealso cref="P:System.IAsyncResult.AsyncState"/><seealso cref="T:System.IAsyncResult"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)">
            <summary>
            <para>Initiates the asynchronous execution of a SQL statement that is described by this ULCommand, using one of the CommandBehavior values, and retrieves the result set, given a callback procedure and state information.</para>
        </summary><param name="callback">
            A System.AsyncCallback delegate that is invoked when the command's execution has completed. Pass null (Nothing in Microsoft Visual Basic) to indicate that no callback is required. 
        </param><param name="stateObject">
            A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the System.IAsyncResult.AsyncState property. 
        </param><param name="cmdBehavior">
            A bitwise combination of System.Data.CommandBehavior flags describing the results of the query and its effect on the connection. UltraLite.NET respects only the System.Data.CommandBehavior.Default, System.Data.CommandBehavior.CloseConnection, and System.Data.CommandBehavior.SchemaOnly flags. 
        </param><returns>
        <para>A System.IAsyncResult that can be used to poll, wait for results, or both is returned; this value is also needed when invoking EndExecuteReader(IAsyncResult), which returns an ULDataReader instance that can be used to retrieve the returned rows.</para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>Any error that occurred while executing the command text.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.EndExecuteReader(System.IAsyncResult)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/><seealso cref="T:System.AsyncCallback"/><seealso cref="T:System.IAsyncResult"/><seealso cref="P:System.IAsyncResult.AsyncState"/><seealso cref="T:System.Data.CommandBehavior"/><seealso cref="F:System.Data.CommandBehavior.Default"/><seealso cref="F:System.Data.CommandBehavior.CloseConnection"/><seealso cref="F:System.Data.CommandBehavior.SchemaOnly"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.Cancel">
            <summary>
            <para>This method is not supported in UltraLite.NET.</para>
        </summary><remarks>
            <para>This method does nothing. UltraLite.NET commands cannot be interrupted while they are executing.</para>
        </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.CreateDbParameter">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.CreateParameter">
            <summary>
            <para>Provides a ULParameter object for supplying parameters to ULCommand objects.</para>
        </summary><remarks>
            <para>Some SQL statements can take parameters, indicated in the text of a statement by a question mark (?). The CreateParameter method provides a ULParameter object. You can set properties on the ULParameter to specify the value for the parameter. </para>
            <para>This is the strongly-typed version of System.Data.IDbCommand.CreateParameter and System.Data.Common.DbCommand.CreateParameter.</para>
        </remarks><returns>
        <para>A new parameter, as a ULParameter object.</para>
        </returns><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/><seealso cref="M:System.Data.IDbCommand.CreateParameter"/><seealso cref="M:System.Data.Common.DbCommand.CreateParameter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.EndExecuteNonQuery(System.IAsyncResult)">
            <summary>
            <para>Finishes asynchronous execution of a SQL statement.</para>
        </summary><remarks>
            <para> You must call EndExecuteNonQuery once for every call to BeginExecuteNonQuery. The call must be after BeginExecuteNonQuery has returned. ADO.NET is not thread safe; it is your responsibility to ensure that BeginExecuteNonQuery has returned. The System.IAsyncResult passed to EndExecuteNonQuery must be the same as the one returned from the BeginExecuteNonQuery call that is being completed. It is an error to call EndExecuteNonQuery to end a call to BeginExecuteReader, and vice versa.</para>
            <para> If an error occurs while executing the command, the exception is thrown when EndExecuteNonQuery is called.</para>
            <para> There are four ways to wait for execution to complete:</para>
            <para><i><b>Call EndExecuteNonQuery</b></i> Calling EndExecuteNonQuery blocks until the command completes. For example:</para>
            <code>
' Visual Basic
Dim cmd As ULCommand = new ULCommand( _
    "UPDATE Departments" _
    + " SET DepartmentName = 'Engineering'" _
    + " WHERE DepartmentID=100", _
    conn _
)

Dim res As IAsyncResult res = _
    cmd.BeginExecuteNonQuery()

' Perform other work.

' This blocks until the command completes.
Dim rowCount As Integer = _
    cmd.EndExecuteNonQuery( res )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULCommand cmd = new ULCommand(
    "UPDATE Departments"
    + " SET DepartmentName = 'Engineering'"
    + " WHERE DepartmentID=100",
    conn
);

IAsyncResult res = cmd.BeginExecuteNonQuery();

// Perform other work.

// This blocks until the command completes.
int rowCount = cmd.EndExecuteNonQuery( res );
</code>
            <para><i><b>Poll the IsCompleted property of the IAsyncResult</b></i> You can poll the IsCompleted property of the IAsyncResult. For example:</para>
            <code>
' Visual Basic
Dim cmd As ULCommand = new ULCommand( _
    "UPDATE Departments" _
    + " SET DepartmentName = 'Engineering'" _
    + " WHERE DepartmentID=100", _
    conn _
)

Dim res As IAsyncResult res = _
    cmd.BeginExecuteNonQuery()
While( !res.IsCompleted )
    ' Perform other work.
End While

' This blocks until the command completes.
Dim rowCount As Integer = _
    cmd.EndExecuteNonQuery( res )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULCommand cmd = new ULCommand(
    "UPDATE Departments"
    + " SET DepartmentName = 'Engineering'"
    + " WHERE DepartmentID=100",
    conn
);

IAsyncResult res = cmd.BeginExecuteNonQuery();
while( !res.IsCompleted ) {
    // Perform other work.
}

// This blocks until the command completes.
int rowCount = cmd.EndExecuteNonQuery( res );
</code>
            <para><i><b>Use the IAsyncResult.AsyncWaitHandle property to get a synchronization object</b></i> You can use the IAsyncResult.AsyncWaitHandle property to get a synchronization object, and wait on that. For example:</para>
            <code>
' Visual Basic
Dim cmd As ULCommand = new ULCommand( _
    "UPDATE Departments" _
    + " SET DepartmentName = 'Engineering'" _
    + " WHERE DepartmentID=100", _
    conn _
)
Dim res As IAsyncResult res = _
    cmd.BeginExecuteNonQuery()

' Perform other work.

Dim wh As WaitHandle = res.AsyncWaitHandle
wh.WaitOne()
' This does not block because the command is finished.
Dim rowCount As Integer = _
  cmd.EndExecuteNonQuery( res )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULCommand cmd = new ULCommand(
    "UPDATE Departments"
    + " SET DepartmentName = 'Engineering'"
    + " WHERE DepartmentID=100",
    conn
  );
IAsyncResult res = cmd.BeginExecuteNonQuery();
// perform other work
WaitHandle wh = res.AsyncWaitHandle;
wh.WaitOne();
// This does not block because the command is finished.
int rowCount = cmd.EndExecuteNonQuery( res );
</code>
            <para><i><b>Specify a callback function when calling BeginExecuteNonQuery</b></i> You can specify a callback function when calling BeginExecuteNonQuery. For example:</para>
            <code>
' Visual Basic
Private Sub callbackFunction(ByVal ar As IAsyncResult)
    Dim cmd As ULCommand = _
        CType(ar.AsyncState, ULCommand)
    ' This won't block since the command has completed.
    Dim rowCount As Integer = _
        cmd.EndExecuteNonQuery( res )
End Sub

' Elsewhere in the code
Private Sub DoStuff() 
    Dim cmd As ULCommand = new ULCommand( _
        "UPDATE Departments" _
        + " SET DepartmentName = 'Engineering'" _
        + " WHERE DepartmentID=100", _
        conn _
    )
    Dim res As IAsyncResult = _
        cmd.BeginExecuteNonQuery( _
        callbackFunction, cmd _
    )
    ' Perform other work.  The callback function 
    ' is called when the command completes.
End Sub
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
private void callbackFunction( IAsyncResult ar )
{
    ULCommand cmd = (ULCommand) ar.AsyncState;
    // This won't block since the command has completed.
    int rowCount = cmd.EndExecuteNonQuery();
}

// Elsewhere in the code
private void DoStuff() 
{
    ULCommand cmd = new ULCommand(
        "UPDATE Departments"
        + " SET DepartmentName = 'Engineering'"
        + " WHERE DepartmentID=100",
        conn
    );
    IAsyncResult res = cmd.BeginExecuteNonQuery(
        callbackFunction, cmd
    );
    // Perform other work.  The callback function 
    // is called when the command completes.
}
</code>
            <para> The callback function executes in a separate thread, so the usual caveats related to updating the user interface in a threaded program apply.</para>







        </remarks><param name="asyncResult">
            The System.IAsyncResult returned by the call to BeginExecuteNonQuery. 
        </param><returns>
        <para>The number of rows affected (the same behavior as ExecuteNonQuery).</para>
        </returns><exception cref="T:System.ArgumentException">
            <para>The asyncResult parameter is null (Nothing in Microsoft Visual Basic).</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para> The EndExecuteNonQuery(IAsyncResult) was called more than once for a single command execution, or the method was mismatched against its execution method.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.BeginExecuteNonQuery"/><seealso cref="T:System.IAsyncResult"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.EndExecuteReader(System.IAsyncResult)">
            <summary>
            <para>Finishes asynchronous execution of a SQL statement, returning the requested ULDataReader.</para>
        </summary><remarks>
            <para>You must call EndExecuteReader once for every call to BeginExecuteReader. The call must be after BeginExecuteReader has returned. ADO.NET is not thread safe; it is your responsibility to ensure that BeginExecuteReader has returned. The System.IAsyncResult passed to EndExecuteReader must be the same as the one returned from the BeginExecuteReader call that is being completed. It is an error to call EndExecuteReader to end a call to BeginExecuteNonQuery, and vice versa.</para>
            <para> If an error occurs while executing the command, the exception is thrown when EndExecuteReader is called.</para>
            <para> There are four ways to wait for execution to complete:</para>
            <para><b>Call EndExecuteReader</b> Calling EndExecuteReader blocks until the command completes. For example:</para>
            <code>
' Visual Basic
Dim cmd As ULCommand = new ULCommand( _
    "SELECT * FROM Departments", conn _
)
Dim res As IAsyncResult res = _
    cmd.BeginExecuteReader()
' Perform other work
' This blocks until the command completes.
Dim reader As ULDataReader = _
    cmd.EndExecuteReader( res )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULCommand cmd = new ULCommand(
    "SELECT * FROM Departments", conn
);
IAsyncResult res = cmd.BeginExecuteReader();

// Perform other work
// This blocks until the command completes
ULDataReader reader = cmd.EndExecuteReader( res );
</code>
            <para><i><b>Poll the IsCompleted property of the IAsyncResult</b></i> You can poll the IsCompleted property of the IAsyncResult. For example:</para>
            <code>
' Visual Basic
Dim cmd As ULCommand = new ULCommand( _
    "SELECT * FROM Departments", conn _
)
Dim res As IAsyncResult res = _
    cmd.BeginExecuteReader()
While( !res.IsCompleted )
    ' Perform other work
End While
' This blocks until the command completes.
Dim reader As ULDataReader = _
    cmd.EndExecuteReader( res )
</code>
<code>
// C#
ULCommand cmd = new ULCommand(
    "SELECT * FROM Departments", conn
);
IAsyncResult res = cmd.BeginExecuteReader();
while( !res.IsCompleted ) {
    // Perform other work.
}
// This blocks until the command completes.
ULDataReader reader = cmd.EndExecuteReader( res );
</code>
            <para><i><b>Use the IAsyncResult.AsyncWaitHandle property to get a synchronization object</b></i> You can use the IAsyncResult.AsyncWaitHandle property to get a synchronization object, and wait on that. For example:</para>
            <code>
' Visual Basic
Dim cmd As ULCommand = new ULCommand( _
    "SELECT * FROM Departments", conn _
)
Dim res As IAsyncResult res = _
    cmd.BeginExecuteReader()
' Perform other work.
Dim wh As WaitHandle = res.AsyncWaitHandle
wh.WaitOne()
' This does not block because the command is finished.
Dim reader As ULDataReader = _
    cmd.EndExecuteReader( res )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULCommand cmd = new ULCommand(
    "SELECT * FROM Departments", conn
);
IAsyncResult res = cmd.BeginExecuteReader();
// Perform other work.
WaitHandle wh = res.AsyncWaitHandle;
wh.WaitOne();
// This does not block because the command is finished.
ULDataReader reader = cmd.EndExecuteReader( res );
</code>
            <para><b>Specify a callback function when calling BeginExecuteReader</b> You can specify a callback function when calling BeginExecuteReader. For example:</para>
            <code>
' Visual Basic
Private Sub callbackFunction(ByVal ar As IAsyncResult)
    Dim cmd As ULCommand = _
        CType(ar.AsyncState, ULCommand)
    ' This won't block since the command has completed.
    Dim reader As ULDataReader = cmd.EndExecuteReader()
End Sub

' Elsewhere in the code
Private Sub DoStuff() 
    Dim cmd As ULCommand = new ULCommand( _
        "SELECT * FROM Departments", conn _
    )
    Dim res As IAsyncResult = _
        cmd.BeginExecuteReader( _
        callbackFunction, cmd _
    )
    ' Perform other work.  The callback function 
    ' is called when the command completes.
End Sub
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
private void callbackFunction( IAsyncResult ar )
{
    ULCommand cmd = (ULCommand) ar.AsyncState;
    // This won't block since the command has completed.
    ULDataReader reader = cmd.EndExecuteReader();
}

// Elsewhere in the code.
private void DoStuff() 
{
    ULCommand cmd = new ULCommand(
        "SELECT * FROM Departments", conn
    );
    IAsyncResult res = cmd.BeginExecuteReader(callbackFunction, cmd);

    // Perform other work.  The callback function 
    // is called when the command completes.
}
</code>
            <para> The callback function executes in a separate thread, so the usual caveats related to updating the user interface in a threaded program apply.</para>







        </remarks><param name="asyncResult">
            The System.IAsyncResult returned by the call to BeginExecuteReader. 
        </param><returns>
        <para>An ULDataReader object that can be used to retrieve the requested rows (the same behavior as ExecuteReader).</para>
        </returns><exception cref="T:System.ArgumentException">
            <para> The asyncResult parameter is null (Nothing in Microsoft Visual Basic)</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The EndExecuteReader was called more than once for a single command execution, or the method was mismatched against its execution method.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.BeginExecuteReader"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/><seealso cref="T:System.IAsyncResult"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteNonQuery">
            <summary>
            <para>Executes a statement that does not return a result set, such as a SQL INSERT, DELETE, or UPDATE statement. </para>
        </summary><remarks>
            <para>The statement is the current ULCommand object, with the ULCommand.CommandText and ULCommand.Parameters as needed. </para>
            <para>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For all other types of statements, and for rollbacks, the return value is -1.</para>
            <para> The ULCommand.CommandType cannot be System.Data.CommandType.TableDirect.</para>
        </remarks><returns>
        <para>The number of rows affected.</para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The command is in an invalid state. Either the ULCommand.Connection is missing or closed, the ULCommand.Transaction value does not match the current transaction state of the connection, or the ULCommand.CommandText is invalid.</para>
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="T:System.Data.CommandType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader">
            <summary>
            <para>Executes a SQL SELECT statement and returns the result set. </para>
        </summary><remarks>
            <para>The statement is the current ULCommand object, with the ULCommand.CommandText and any ULCommand.Parameters as required. The ULDataReader object is a read-only result set. For editable result sets, use ULCommand.ExecuteResultSet(), ULCommand.ExecuteTable(), or a ULDataAdapter.</para>
            <para>If the ULCommand.CommandType is System.Data.CommandType.TableDirect, ExecuteReader performs an ULCommand.ExecuteTable() and returns a ULTable downcast as a ULDataReader.</para>
            <para>SELECT statements are marked as read-only by default for performance reasons. If the query is going to be used to make updates, the statement must end with " FOR UPDATE".</para>
            <para>This is the strongly-typed version of System.Data.IDbCommand.ExecuteReader() and System.Data.Common.DbCommand.ExecuteReader().</para>
        </remarks><returns>
        The result set as a ULDataReader object. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The command is in an invalid state. Either the ULCommand.Connection is missing or closed, the ULCommand.Transaction value does not match the current transaction state of the connection, or the ULCommand.CommandText is invalid.</para>
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader(System.Data.CommandBehavior)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteResultSet"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataAdapter"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTable"/><seealso cref="T:System.Data.CommandType"/><seealso cref="M:System.Data.IDbCommand.ExecuteReader"/><seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            <para>Executes a SQL SELECT statement with the specified command behavior and returns the result set. </para>
        </summary><remarks>
            <para>The statement is the current ULCommand object, with the ULCommand.CommandText and any ULCommand.Parameters as required. The ULDataReader object is a read-only result set. For editable result sets, use ULCommand.ExecuteResultSet(CommandBehavior), ULCommand.ExecuteTable(CommandBehavior), or a ULDataAdapter.</para>
            <para>If the ULCommand.CommandType is System.Data.CommandType.TableDirect, ExecuteReader performs an ULCommand.ExecuteTable(CommandBehavior) and returns a ULTable downcast as a ULDataReader.</para>
            <para>SELECT statements are marked as read-only by default for performance reasons. If the query is going to be used to make updates, the statement must end with " FOR UPDATE".</para>
            <para>This is the strongly-typed version of System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior) and System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior).</para>
        </remarks><param name="cmdBehavior">
            A bitwise combination of System.Data.CommandBehavior flags describing the results of the query and its effect on the connection. UltraLite.NET respects only the System.Data.CommandBehavior.Default, System.Data.CommandBehavior.CloseConnection, and System.Data.CommandBehavior.SchemaOnly flags. 
        </param><returns>
        The result set as a ULDataReader object. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The command is in an invalid state. Either the ULCommand.Connection is missing or closed, the ULCommand.Transaction value does not match the current transaction state of the connection, or the ULCommand.CommandText is invalid.</para>
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteResultSet(System.Data.CommandBehavior)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable(System.Data.CommandBehavior)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataAdapter"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTable"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/><seealso cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/><seealso cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/><seealso cref="T:System.Data.CommandType"/><seealso cref="T:System.Data.CommandBehavior"/><seealso cref="F:System.Data.CommandBehavior.Default"/><seealso cref="F:System.Data.CommandBehavior.CloseConnection"/><seealso cref="F:System.Data.CommandBehavior.SchemaOnly"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteResultSet">
            <summary>
            <para><i><b>UL Ext: </b></i> Executes a SQL SELECT statement and returns the result set as a ULResultSet. </para>
        </summary><remarks>
            <para>The statement is the current ULCommand object, with the ULCommand.CommandText and any ULCommand.Parameters as required. The ULResultSet object is an editable result set on which you can perform positioned updates and deletes. For fully editable result sets, use ULCommand.ExecuteTable() or a ULDataAdapter.</para>
            <para>If the ULCommand.CommandType is System.Data.CommandType.TableDirect, ExecuteReader performs an ULCommand.ExecuteTable() and returns a ULTable downcast as a ULResultSet.</para>
            <para>ExecuteResultSet supports positioned updates and deletes with Dynamic SQL.</para>
        </remarks><returns>
        The result set as a ULResultSet object. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The command is in an invalid state. Either the ULCommand.Connection is missing or closed, the ULCommand.Transaction value does not match the current transaction state of the connection, or the ULCommand.CommandText is invalid.</para>
        </exception><example>
            <code>
cmd.CommandText = "SELECT id, season, price FROM OurProducts";
ULResultSet rs = cmd.ExecuteResultSet();
while( rs.Read() ) {
    string season = rs.GetString( 1 );
    double price = rs.GetDouble( 2 );
    if( season.Equals( "summer" ) ) {
        rs.UpdateBegin();
        rs.SetDouble( 2, price * .5 );
        rs.Update();
    }
    if( season.Equals( "discontinued" ) ) {
        rs.Delete();
    }
}
rs.Close();
            </code>
        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteResultSet(System.Data.CommandBehavior)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/><seealso cref="T:iAnywhere.Data.UltraLite.ULResultSet"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTable"/><seealso cref="T:System.Data.CommandType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteResultSet(System.Data.CommandBehavior)">
            <summary>
            <para><i><b>UL Ext: </b></i> Executes a SQL SELECT statement with the specified command behavior and returns the result set as a ULResultSet. </para>
        </summary><remarks>
            <para>The statement is the current ULCommand object, with the ULCommand.CommandText and any ULCommand.Parameters as required. The ULResultSet object is an editable result set on which you can perform positioned updates and deletes. For fully editable result sets, use ULCommand.ExecuteTable(CommandBehavior) or a ULDataAdapter.</para>
            <para>If the ULCommand.CommandType is System.Data.CommandType.TableDirect, ExecuteReader performs an ULCommand.ExecuteTable(CommandBehavior) and returns a ULTable downcast as a ULResultSet.</para>
            <para>ExecuteResultSet supports positioned updates and deletes with Dynamic SQL.</para>
        </remarks><param name="cmdBehavior">
            A bitwise combination of System.Data.CommandBehavior flags describing the results of the query and its effect on the connection. UltraLite.NET respects only the System.Data.CommandBehavior.Default, System.Data.CommandBehavior.CloseConnection, and System.Data.CommandBehavior.SchemaOnly flags. 
        </param><returns>
        The result set as a ULResultSet object. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The command is in an invalid state. Either the ULCommand.Connection is missing or closed, the ULCommand.Transaction value does not match the current transaction state of the connection, or the ULCommand.CommandText is invalid.</para>
        </exception><seealso cref="T:iAnywhere.Data.UltraLite.ULResultSet"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable(System.Data.CommandBehavior)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataAdapter"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTable"/><seealso cref="T:System.Data.CommandType"/><seealso cref="T:System.Data.CommandBehavior"/><seealso cref="F:System.Data.CommandBehavior.Default"/><seealso cref="F:System.Data.CommandBehavior.CloseConnection"/><seealso cref="F:System.Data.CommandBehavior.SchemaOnly"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteScalar">
            <summary>
            <para>Executes a SQL SELECT statement and returns a single value.</para>
        </summary><remarks>
            <para>The statement is the current ULCommand object, with the ULCommand.CommandText and any ULCommand.Parameters as required. </para>
            <para>If this method is called on a query that returns multiple rows and columns, only the first column of the first row is returned.</para>
            <para> If the ULCommand.CommandType is System.Data.CommandType.TableDirect, ExecuteScalar performs an ULCommand.ExecuteTable() and returns the first column of the first row.</para>
            <para>SELECT statements are marked as read-only by default for performance reasons. If the query is going to be used to make updates, the statement must end with " FOR UPDATE".</para>
        </remarks><returns>
        <para>The first column of the first row in the result set, or a null reference (Nothing in Visual Basic) if the result set is empty.</para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The command is in an invalid state. Either the ULCommand.Connection is missing or closed, the ULCommand.Transaction value does not match the current transaction state of the connection, or the ULCommand.CommandText is invalid.</para>
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.IndexName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="T:System.Data.CommandType"/><seealso cref="T:System.Data.CommandBehavior"/><seealso cref="F:System.Data.CommandBehavior.Default"/><seealso cref="F:System.Data.CommandBehavior.CloseConnection"/><seealso cref="F:System.Data.CommandBehavior.SchemaOnly"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable">
            <summary>
            <para><i><b>UL Ext: </b></i> Retrieves in a ULTable a database table for direct manipulation. The ULCommand.CommandText is interpreted as the name of the table and ULCommand.IndexName can be used to specify a table sorting order. </para>
        </summary><remarks>
            <para>The ULCommand.CommandType must be set to System.Data.CommandType.TableDirect.</para>
            <para>If the ULCommand.IndexName is a null reference (Nothing in Visual Basic), the primary key is used to open the table. Otherwise, the table is opened using the ULCommand.IndexName value as the name of the index by which to sort.</para>
        </remarks><returns>
        The table as a ULTable object. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The command is in an invalid state. Either the ULCommand.Connection is missing or closed, the ULCommand.Transaction value does not match the current transaction state of the connection, or the ULCommand.CommandText is invalid.</para>
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.IndexName"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable(System.Data.CommandBehavior)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTable"/><seealso cref="T:System.Data.CommandBehavior"/><seealso cref="F:System.Data.CommandBehavior.Default"/><seealso cref="F:System.Data.CommandBehavior.CloseConnection"/><seealso cref="F:System.Data.CommandBehavior.SchemaOnly"/><seealso cref="T:System.Data.CommandType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable(System.Data.CommandBehavior)">
            <summary>
            <para><i><b>UL Ext: </b></i> Retrieves, with the specified command behavior, a database table for direct manipulation. The ULCommand.CommandText is interpreted as the name of the table and ULCommand.IndexName can be used to specify a table sorting order. </para>
        </summary><remarks>
            <para>The ULCommand.CommandType must be set to System.Data.CommandType.TableDirect.</para>
            <para>If the ULCommand.IndexName is a null reference (Nothing in Visual Basic), the primary key is used to open the table. Otherwise, the table is opened using the ULCommand.IndexName value as the name of the index by which to sort.</para>
        </remarks><param name="cmdBehavior">
            A bitwise combination of System.Data.CommandBehavior flags describing the results of the query and its effect on the connection. UltraLite.NET respects only the System.Data.CommandBehavior.Default, System.Data.CommandBehavior.CloseConnection, and System.Data.CommandBehavior.SchemaOnly flags. 
        </param><returns>
        The table as a ULTable object. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The command is in an invalid state. Either the ULCommand.Connection is missing or closed, the ULCommand.Transaction value does not match the current transaction state of the connection, or the ULCommand.CommandText is invalid.</para>
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.IndexName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="T:System.Data.CommandBehavior"/><seealso cref="F:System.Data.CommandBehavior.Default"/><seealso cref="F:System.Data.CommandBehavior.CloseConnection"/><seealso cref="F:System.Data.CommandBehavior.SchemaOnly"/><seealso cref="T:System.Data.CommandType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.Prepare">
            <summary>
            <para>Pre-compiles and stores the SQL statement of this command. </para>
        </summary><remarks>
            <para>Pre-compiling statements allows for the efficient re-use of statements when just the parameter values are changed. Changing any other property on this command unprepares the statement.</para>
            <para>UltraLite.NET does not require you to explicitly prepare statements as all unprepared commands are prepared on calls to the various Execute methods.</para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The command is in an invalid state. Either the ULCommand.Connection is missing or closed, the ULCommand.Transaction value does not match the current transaction state of the connection, or the ULCommand.CommandText is invalid.</para>
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.CommandText">
            <summary>
            <para> Specifies the text of the SQL statement or the name of the table when the ULCommand.CommandType is System.Data.CommandType.TableDirect. For parameterized statements, use a question mark (?) placeholder to pass parameters. </para>
        </summary><value> A string specifying the text of the SQL statement or the name of the table. The default is an empty string (invalid command). </value><remarks>
            <para>SELECT statements are marked as read-only by default for performance reasons. If the query is going to be used to make updates, the statement must end with " FOR UPDATE".</para>
        </remarks><example>
            The following example demonstrates the use of the parameterized placeholder: 
            <code>
' Visual Basic
myCmd.CommandText = "SELECT * FROM Customers WHERE CustomerID = ?"
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
myCmd.CommandText = "SELECT * FROM Customers WHERE CustomerID = ?";
</code>

        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteNonQuery"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteResultSet"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteScalar"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/><seealso cref="T:System.Data.CommandType"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.CommandTimeout">
            <summary>
            <para> This feature is not supported by UltraLite.NET. </para>
        </summary><value> 
        <para> The value is always zero. </para>
        </value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            Setting the value is not supported in UltraLite.NET. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.CommandType">
            <summary>
            <para> Specifies the type of command to be executed. </para>
        </summary><value>One of the System.Data.CommandType values. The default is System.Data.CommandType.Text. </value><remarks>
            <para> Supported command types are as follows: </para>
            <list type="bullet">
            <item>
            System.Data.CommandType.TableDirect - <i><b>UL Ext: </b></i> When you specify this CommandType, the ULCommand.CommandText must be the name of a database table. You can also specify the index used to open (sort) the table with ULCommand.IndexName. Use ULCommand.ExecuteTable() or ULCommand.ExecuteReader() to access the table.
            </item>
            <item>
            System.Data.CommandType.Text - When you specify this CommandType, the ULCommand.CommandText must be a SQL statement or query. Use ULCommand.ExecuteNonQuery to execute a non-query SQL statement and use either ULCommand.ExecuteReader() or ULCommand.ExecuteScalar to execute a query.
            </item>
            </list>
        </remarks><exception cref="T:System.ArgumentException">
            CommandType.StoredProcedure is not supported in UltraLite.NET. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.IndexName"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteNonQuery"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteScalar"/><seealso cref="T:System.Data.CommandType"/><seealso cref="F:System.Data.CommandType.Text"/><seealso cref="T:System.Data.CommandType"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.DbConnection">
            <summary></summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.Connection">
            <summary>
            <para> The connection object on which to execute the ULCommand object. </para>
        </summary><value>The ULConnection object on which to execute the command.</value><remarks>
            <para> ULCommand objects must have an open connection before they can be executed. </para>
            <para> The default is a null reference (Nothing in Visual Basic). </para>
            <para>This is the strongly-typed version of System.Data.IDbCommand.Connection and System.Data.Common.DbCommand.Connection.</para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/><seealso cref="P:System.Data.IDbCommand.Connection"/><seealso cref="P:System.Data.Common.DbCommand.Connection"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.DesignTimeVisible">
            <summary>
            <para>Indicates if the ULCommand should be visible in a customized Windows Form Designer control.</para>
        </summary><value>True if this ULCommand instance should be visible, false if this instance should not be visible. The default is false.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.IndexName">
            <summary>
            <para> <i><b>UL Ext: </b></i> Specifies the name of the index to open (sort) the table with when the ULCommand.CommandType is System.Data.CommandType.TableDirect.</para>
        </summary><value>A string specifying the name of the index. The default is a null reference (Nothing in Visual Basic), meaning the table is opened with its primary key.</value><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/><seealso cref="T:System.Data.CommandType"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.DbParameterCollection">
            <summary></summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.Parameters">
            <summary>
            <para>Specifies the parameters for the current statement. </para>
        </summary><value>A ULParameterCollection holding the parameters of the SQL statement. The default value is the empty collection.</value><remarks>
            <para>Use question marks in ULCommand.CommandText to indicate parameters. The parameters in the collection are specified in the same order as the question mark placeholders. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the ULCommand.CommandText as there are parameters in this collection.</para>
            <para>This is the strongly-typed version of System.Data.IDbCommand.Parameters and System.Data.Common.DbCommand.Parameters.</para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULParameterCollection"/><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="P:System.Data.IDbCommand.Connection"/><seealso cref="P:System.Data.Common.DbCommand.Connection"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.Plan">
            <summary>
            <para><i><b>UL Ext: </b></i> Returns the access plan UltraLite.NET uses to execute a query. This property is intended primarily for use during development.</para>
        </summary><value> 
        <para>A string containing the text-based description of the query execution plan.</para>
        </value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.DbTransaction">
            <summary></summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.Transaction">
            <summary>
            <para>Specifies the ULTransaction in which the ULCommand executes. </para>
        </summary><value>The ULTransaction in which the ULCommand executes. This should be the current transaction of the connection specified by the ULCommand.Connection. The default is a null reference (Nothing in Visual Basic).</value><remarks>
            <para>If a command is reused after a transaction has been committed or rolled back, this property needs to be reset.</para>
            <para>This is the strongly-typed version of System.Data.IDbCommand.Transaction and System.Data.Common.DbCommand.Transaction.</para>
        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTransaction"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/><seealso cref="P:System.Data.IDbCommand.Transaction"/><seealso cref="P:System.Data.Common.DbCommand.Transaction"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.UpdatedRowSource">
            <summary>
            <para>Specifies how command results are applied to the DataRow when used by the Update method of the ULDataAdapter.</para>
        </summary><value> 
        <para>One of the System.Data.UpdateRowSource values. The default value is System.Data.UpdateRowSource.Both.</para>
        </value><seealso cref="T:System.Data.UpdateRowSource"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULCommandBuilder">
            <summary>
			<para>Automatically generates single-table commands used to reconcile changes made to a System.Data.DataSet with the associated database. </para>
		</summary><remarks>
			<para>The ULDataAdapter does not automatically generate the SQL statements required to reconcile changes made to a System.Data.DataSet with the associated data source. However, you can create a ULCommandBuilder object to automatically generate SQL statements for single-table updates if you set the SelectCommand property of the ULDataAdapter. Then, any additional SQL statements that you do not set are generated by the ULCommandBuilder. </para>
		</remarks><example>
			<para>The following example uses the ULCommand, along with ULDataAdapter and ULConnection, to select rows from a data source. The example is passed a connection string, a query string that is a SQL SELECT statement, and a string that is the name of the database table. The example then creates a ULCommandBuilder. </para>
			<code>
' Visual Basic
Public Shared Function SelectULRows(ByVal connectionString As String, _
    ByVal queryString As String, ByVal tableName As String)

    Dim connection As ULConnection = New ULConnection(connectionString)
    Dim adapter As ULDataAdapter = New ULDataAdapter()

	adapter.SelectCommand = New ULCommand(queryString, connection)

 	Dim builder As ULCommandBuilder = New ULCommandBuilder(adapter)

    connection.Open()

    Dim dataSet As DataSet = New DataSet()
    adapter.Fill(dataSet, tableName)

    'Insert code to modify data in DataSet.

    'Without the ULCommandBuilder this line would fail
    adapter.Update(dataSet, tableName)

    Return dataSet
End Function
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
public static DataSet SelectULRows(string connectionString,
    string queryString, string tableName)
{
    using (ULConnection connection = new ULConnection(connectionString))
    {
        ULDataAdapter adapter = new ULDataAdapter();
        adapter.SelectCommand = new ULCommand(queryString, connection);
        ULCommandBuilder builder = new ULCommandBuilder(adapter);

        connection.Open();

        DataSet dataSet = new DataSet();
        adapter.Fill(dataSet, tableName);

       	// Insert code to modify data in DataSet.

        // Without the ULCommandBuilder this line would fail
        adapter.Update(dataSet, tableName);

        return dataSet;
    }
}
</code>

		</example><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataAdapter"/><seealso cref="T:System.Data.DataSet"/><seealso cref="T:System.ComponentModel.Component"/><seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.#ctor">
            <summary>
			<para> Initializes a ULCommandBuilder object.</para>
		</summary><seealso cref="M:iAnywhere.Data.UltraLite.ULCommandBuilder.#ctor(iAnywhere.Data.UltraLite.ULDataAdapter)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.#ctor(iAnywhere.Data.UltraLite.ULDataAdapter)">
            <summary>
			<para> Initializes a ULCommandBuilder object with the specified ULDataAdapter object.</para>
		</summary><param name="adapter">
			<para>A ULDataAdapter object.</para>
		</param><seealso cref="T:iAnywhere.Data.UltraLite.ULDataAdapter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.GetParameterName(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.GetParameterName(System.String)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.GetParameterPlaceholder(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.GetInsertCommand(System.Boolean)">
            <summary>
			<para>Gets the automatically generated ULCommand object required to perform insertions on the database.</para>
		</summary><remarks>
			<para>After the SQL statement is first generated, the application must explicitly call the DbCommandBuilder.RefreshSchema
			if it changes the ULDataAdapter.SelectCommand in any way. Otherwise, the GetInsertCommand method still uses information from the previous statement, which might not be correct. The SQL statements are first generated when the application calls either the DbDataAdapter.Update(System.Data.DataSet)
			or the GetInsertCommand method. </para>
		</remarks><param name="useColumnsForParameterNames">
			If true, generate parameter names matching column names if possible. If false, generate @p1, @p2, and so on. 
		</param><returns>
		<para>The automatically generated ULCommand object required to perform insertions. </para>
		</returns><exception cref="T:System.InvalidOperationException">
			<para>The DbCommandBuilder.DataAdapter
			has not been initialized.</para>
			<para>The DataAdapter.SelectCommand property has not been initialized.</para>
			<para>The DataAdapter.SelectCommand.Connection property has not been initialized.</para>
			<para>Dynamic SQL generation for the InsertCommand is not supported against a SelectCommand that does not return any modifiable columns.</para>
			<para>Dynamic SQL generation is not supported against multiple base tables.</para>
			<para>Dynamic SQL generation is not supported against a SelectCommand that contains duplicate columns.</para>
		</exception><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/><seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/><seealso cref="P:System.Data.Common.DbCommandBuilder.DataAdapter"/><seealso cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.GetInsertCommand">
            <summary>
			<para>Gets the automatically generated ULCommand object required to perform insertions on the database.</para>
		</summary><remarks>
			<para>After the SQL statement is first generated, the application must explicitly call the DbCommandBuilder.RefreshSchema
			if it changes the ULDataAdapter.SelectCommand in any way. Otherwise, the GetInsertCommand method still uses information from the previous statement, which might not be correct. The SQL statements are first generated when the application calls either the DbDataAdapter.Update(System.Data.DataSet)
			or the GetInsertCommand method. </para>
		</remarks><returns>
		<para>The automatically generated ULCommand object required to perform insertions. </para>
		</returns><exception cref="T:System.InvalidOperationException">
			<para>The DbCommandBuilder.DataAdapter
				has not been initialized.</para>
			<para>The DataAdapter.SelectCommand property has not been initialized.</para>
			<para>The DataAdapter.SelectCommand.Connection property has not been initialized.</para>
			<para>Dynamic SQL generation for the InsertCommand is not supported against a SelectCommand that does not return any modifiable columns.</para>
			<para>Dynamic SQL generation is not supported against multiple base tables.</para>
			<para>Dynamic SQL generation is not supported against a SelectCommand that contains duplicate columns.</para>
		</exception><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/><seealso cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema"/><seealso cref="P:System.Data.Common.DbCommandBuilder.DataAdapter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.GetDeleteCommand(System.Boolean)">
            <summary>
			<para>Gets the automatically generated ULCommand object required to perform deletions on the database.</para>
		</summary><remarks>
			<para>After the SQL statement is first generated, the application must explicitly call the DbCommandBuilder.RefreshSchema
			if it changes the ULDataAdapter.SelectCommand in any way. Otherwise, the GetDeleteCommand method still uses information from the previous statement, which might not be correct. The SQL statements are first generated when the application calls either the DbDataAdapter.Update(System.Data.DataSet)
			or the GetDeleteCommand method. </para>
		</remarks><param name="useColumnsForParameterNames">
			If true, generate parameter names matching column names if possible. If false, generate @p1, @p2, and so on. 
		</param><returns>
		<para>The automatically generated ULCommand object required to perform deletions.</para>
		</returns><exception cref="T:System.InvalidOperationException">
			<para>The DbCommandBuilder.DataAdapter
			has not been initialized.</para>
			<para>The DataAdapter.SelectCommand property has not been initialized.</para>
			<para>The DataAdapter.SelectCommand.Connection property has not been initialized.</para>
			<para>Dynamic SQL generation is not supported against multiple base tables.</para>
			<para>Dynamic SQL generation is not supported against a SelectCommand that contains duplicate columns.</para>
			<para>Dynamic SQL generation for the DeleteCommand is not supported against a SelectCommand that does not return any key column information.</para>
		</exception><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/><seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/><seealso cref="P:System.Data.Common.DbCommandBuilder.DataAdapter"/><seealso cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.GetDeleteCommand">
            <summary>
			<para>Gets the automatically generated ULCommand object required to perform deletions on the database.</para>
		</summary><remarks>
			<para>After the SQL statement is first generated, the application must explicitly call the DbCommandBuilder.RefreshSchema
			if it changes the ULDataAdapter.SelectCommand in any way. Otherwise, the GetDeleteCommand method still uses information from the previous statement, which might not be correct. The SQL statements are first generated when the application calls either the DbDataAdapter.Update(System.Data.DataSet)
			or the GetDeleteCommand method. </para>
		</remarks><returns>
		<para>The automatically generated ULCommand object required to perform deletions.</para>
		</returns><exception cref="T:System.InvalidOperationException">
			<para>The DbCommandBuilder.DataAdapter
			has not been initialized.</para>
			<para>The DataAdapter.SelectCommand property has not been initialized.</para>
			<para>The DataAdapter.SelectCommand.Connection property has not been initialized.</para>
			<para>Dynamic SQL generation is not supported against multiple base tables.</para>
			<para>Dynamic SQL generation is not supported against a SelectCommand that contains duplicate columns.</para>
			<para>Dynamic SQL generation for the DeleteCommand is not supported against a SelectCommand that does not return any key column information.</para>
		</exception><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/><seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/><seealso cref="P:System.Data.Common.DbCommandBuilder.DataAdapter"/><seealso cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.GetUpdateCommand(System.Boolean)">
            <summary>
			<para>Gets the automatically generated ULCommand object required to perform updates on the database.</para>
		</summary><remarks>
			<para>After the SQL statement is first generated, the application must explicitly call the DbCommandBuilder.RefreshSchema
			if it changes the ULDataAdapter.SelectCommand in any way. Otherwise, the GetUpdateCommand method still uses information from the previous statement, which might not be correct. The SQL statements are first generated when the application calls either the DbDataAdapter.Update(System.Data.DataSet)
			or the GetUpdateCommand method. </para>
		</remarks><param name="useColumnsForParameterNames">
			If true, generate parameter names matching column names if possible. If false, generate @p1, @p2, and so on. 
		</param><returns>
		<para>The automatically generated ULCommand object required to perform updates.</para>
		</returns><exception cref="T:System.InvalidOperationException">
			<para>The DbCommandBuilder.DataAdapter
			has not been initialized.</para>
			<para>The DataAdapter.SelectCommand property has not been initialized.</para>
			<para>The DataAdapter.SelectCommand.Connection property has not been initialized.</para>
			<para>Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not return any modifiable columns.</para>
			<para>Dynamic SQL generation is not supported against multiple base tables.</para>
			<para>Dynamic SQL generation is not supported against a SelectCommand that contains duplicate columns.</para>
			<para>Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not return any key column information.</para>
		</exception><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/><seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/><seealso cref="P:System.Data.Common.DbCommandBuilder.DataAdapter"/><seealso cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommandBuilder.GetUpdateCommand">
            <summary>
			<para>Gets the automatically generated ULCommand object required to perform updates on the database.</para>
		</summary><remarks>
			<para>After the SQL statement is first generated, the application must explicitly call the DbCommandBuilder.RefreshSchema
			if it changes the ULDataAdapter.SelectCommand in any way. Otherwise, the GetUpdateCommand method still uses information from the previous statement, which might not be correct. The SQL statements are first generated when the application calls either the DbDataAdapter.Update(System.Data.DataSet)
			or the GetUpdateCommand method. </para>
		</remarks><returns>
		<para>The automatically generated ULCommand object required to perform updates.</para>
		</returns><exception cref="T:System.InvalidOperationException">
			<para>The DbCommandBuilder.DataAdapter
			has not been initialized.</para>
			<para>The DataAdapter.SelectCommand property has not been initialized.</para>
			<para>The DataAdapter.SelectCommand.Connection property has not been initialized.</para>
			<para>Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not return any modifiable columns.</para>
			<para>Dynamic SQL generation is not supported against multiple base tables.</para>
			<para>Dynamic SQL generation is not supported against a SelectCommand that contains duplicate columns.</para>
			<para>Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not return any key column information.</para>
		</exception><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/><seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/><seealso cref="P:System.Data.Common.DbCommandBuilder.DataAdapter"/><seealso cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommandBuilder.DataAdapter">
            <summary>
			<para>Gets or sets a ULDataAdapter object for which SQL statements are automatically generated. </para>
		</summary><value>A ULDataAdapter object.</value><seealso cref="T:iAnywhere.Data.UltraLite.ULDataAdapter"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSyncProgressListener">
            <summary>
				<para> <i><b>UL Ext: </b></i> The listener interface for receiving synchronization progress events. </para>
		  </summary><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize(iAnywhere.Data.UltraLite.ULSyncProgressListener)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULSyncProgressListener.SyncProgressed(iAnywhere.Data.UltraLite.ULSyncProgressData)">
            <summary>
				<para> Invoked during synchronization to inform the user of progress. This method should return true to cancel synchronization or return false to continue. </para>
		  </summary><remarks>
				<para> No UltraLite.NET API methods should be invoked during a SyncProgressed call. </para>
		  </remarks><param name="data">
				A ULSyncProgressData object containing the latest synchronization progress data. 
		  </param><returns>
		  This method should return true to cancel synchronization or return false to continue. 
	  </returns><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressData"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSyncProgressedDlg">
            <summary>
            <para>Represents the method that is invoked during synchronization with synchronization progress information. </para>
        </summary><param name="result">
            The IAsyncResult object returned from BeginSynchronize.  Use result.AsyncState to access the object provided to BeginSynchronize.
        </param><param name="data">
            A ULSyncProgressData object containing the latest synchronization progress data.
        </param><remarks>
		<para> It is safe to do GUI work or to make UltraLite.NET API calls in this method.
		       The synchronization is not being held up during calls to this method.
		</para>
	  </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginSynchronize(System.Windows.Forms.Control,iAnywhere.Data.UltraLite.ULSyncProgressedDlg,System.Object)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressData"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULAsyncSyncResult">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULInternalSyncProgressListener">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULConnectionOptions">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSyncProgressListenerServer">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULInfoMessageEventArgs">
            <summary>
            <para>Provides data for the ULConnection.InfoMessage event. </para>
        </summary><seealso cref="E:iAnywhere.Data.UltraLite.ULConnection.InfoMessage"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULInfoMessageEventArgs.ToString">
            <summary>
            <para>The string representation of the ULConnection.InfoMessage event. </para>
        </summary><value>A string representation of the ULConnection.InfoMessage event.</value><returns>
        <para>The informational or warning message string.</para>
        </returns><seealso cref="E:iAnywhere.Data.UltraLite.ULConnection.InfoMessage"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULInfoMessageEventArgs.NativeError">
            <summary>
            <para>The SQLCODE corresponding to the informational message or warning returned by the database. </para>
        </summary><value>An informational or warning ULSQLCode value.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULInfoMessageEventArgs.Message">
            <summary>
            <para>The informational or warning message string returned by the database. </para>
        </summary><value>A string containing the informational or warning message.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULInfoMessageEventArgs.Source">
            <summary>
            <para>The name of the ADO.NET data provider returning the message. </para>
        </summary><value>The string "UltraLite.NET Data Provider".</value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULInfoMessageEventHandler">
            <summary>
            <para>Represents the method that handles the ULConnection.InfoMessage event. </para>
        </summary><param name="obj">
            The connection sending the event. 
        </param><param name="args">
            The ULInfoMessageEventArgs object that contains the event data. 
        </param><seealso cref="E:iAnywhere.Data.UltraLite.ULConnection.InfoMessage"/><seealso cref="T:iAnywhere.Data.UltraLite.ULInfoMessageEventArgs"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULConnection">
            <summary>
            <para>Represents a connection to an UltraLite.NET database. </para>
        </summary><remarks>
            <para>To use the UltraLite Engine runtime of UltraLite.NET, set ULDatabaseManager.RuntimeType to the appropriate value before using any other UltraLite.NET API.</para>
            <para>A connection to an existing database is opened using the ULConnection.Open.</para>
            <para>You must open a connection before carrying out any other operation, and you must close the connection after you have finished all operations on the connection and before your application terminates. In addition, you must close all result sets and tables opened on a connection before closing the connection.</para>
            <para> The schema of the database can be accessed using an open connection's ULConnection.Schema.</para>
        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.Schema"/><seealso cref="T:System.Data.IDbConnection"/><seealso cref="T:System.IDisposable"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULConnection.INVALID_DATABASE_ID">
            <summary>
            <para><i><b>UL Ext: </b></i> A database ID constant indicating that the ULConnection.DatabaseID has not been set. </para>
        </summary><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.DatabaseID"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULConnection.SYNC_ALL_DB">
            <summary>
            <para> Empty publication list, corresponding to the entire database. </para>
        </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULConnection.SYNC_ALL_PUBS">
            <summary>
            <para> Publication name "*", corresponding to all publications. </para>
        </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.#ctor">
            <summary>
            <para> Initializes a ULConnection object. The connection must be opened before you can perform any operations against the database. </para>
        </summary><remarks>
            <para>To use the UltraLite Engine runtime of UltraLite.NET, set ULDatabaseManager.RuntimeType to the appropriate value before using any other UltraLite.NET API.</para>
            <para> The ULConnection object needs to have the ULConnection.ConnectionString set before it can be opened. </para>
        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.#ctor(System.String)">
            <summary>
            <para> Initializes a ULConnection object with the specified connection string. The connection must be opened before you can perform any operations against the database. </para>
        </summary><remarks>
            <para>To use the UltraLite Engine runtime of UltraLite.NET, set ULDatabaseManager.RuntimeType to the appropriate value before using any other UltraLite.NET API.</para>
            <para> The connection string can be supplied using a ULConnectionParms object.</para>
        </remarks><param name="connectionString">
            <para>An UltraLite.NET connection string. A connection string is a semicolon-separated list of keyword-value pairs.</para>
        </param><exception cref="T:System.ArgumentException">
            <para>The supplied connection string is invalid.</para>
        </exception><example>
            <para>The following code creates and opens a connection to the existing database \UltraLite\MyDatabase.udb on a Windows Mobile device.</para>
            <code>
' Visual Basic
Dim openParms As ULConnectionParms = New ULConnectionParms
openParms.DatabaseOnDevice = "\UltraLite\MyDatabase.udb"
Dim conn As ULConnection = _
    New ULConnection( openParms.ToString() )
conn.Open()
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULConnectionParms openParms = new ULConnectionParms();
openParms.DatabaseOnDevice = @"\UltraLite\MyDatabase.udb";
ULConnection conn = new ULConnection( openParms.ToString() );
conn.Open();
</code>

        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.#ctor"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnectionParms"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.Finalize">
            <summary>
            <para>Releases unmanaged resources and performs other cleanup operations before the ULConnection is reclaimed by garbage collection. </para>
        </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.Open">
            <summary>
            <para>Opens a connection to a database using the previously-specified connection string. </para>
        </summary><remarks>
            <para>You should explicitly close or dispose of the connection when you are done with it.</para>
        </remarks><exception cref="T:System.InvalidOperationException">
            <para>The connection is already open or the connection string is not specified in ULConnection.ConnectionString.</para>
        </exception><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred while attempting to open the database.</para>
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.State"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.Close">
            <summary>
            <para>Closes the database connection.</para>
        </summary><remarks>
            <para>The Close method rolls back any pending transactions and then closes the connection. An application can call Close multiple times.</para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.Dispose(System.Boolean)">
            <summary>
            <para> Releases the unmanaged resources used by the ULCommand and optionally releases the managed resources. </para>
        </summary><param name="disposing">
            When true, dispose of both managed and unmanaged resources. When false, dispose of only the unmanaged resources. 
        </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction">
            <summary>
            <para>Returns a transaction object. Commands associated with a transaction object are executed as a single transaction. The transaction is terminated with ULTransaction.Commit or ULTransaction.Rollback. </para>
        </summary><remarks>
            <para>The transaction is created with IsolationLevel.ReadCommitted.</para>
            <para>To associate a command with a transaction object, use the ULCommand.Transaction property. The current transaction is automatically associated to commands created by ULConnection.CreateCommand.</para>
            <para>By default, the connection does not use transactions and all commands are automatically committed as they are executed. Once the current transaction is committed or rolled back, the connection reverts to auto commit mode and the previous isolation level until the next call to BeginTransaction.</para>
            <para> UltraLite's definition of each isolation level is slightly different than ADO.NET's documentation of IsolationLevel. For more information, see @olink targetdoc="uladmin" targetptr="isolationlevels"@Isolation Levels@/olink@.</para>
            <para>This is the strongly-typed version of System.Data.IDbConnection.BeginTransaction() and System.Data.Common.DbConnection.BeginTransaction().</para>
        </remarks><returns>
        <para>A ULTransaction object representing the new transaction.</para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>The connection is closed.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>ULConnection does not support parallel transactions.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTransaction.Commit"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTransaction.Rollback"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction(System.Data.IsolationLevel)"/><seealso cref="M:System.Data.IDbConnection.BeginTransaction"/><seealso cref="M:System.Data.Common.DbConnection.BeginTransaction"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            <para>Returns a transaction object with the specified isolation level. Commands associated with a transaction object are executed as a single transaction. The transaction is terminated with ULTransaction.Commit or ULTransaction.Rollback.</para>
        </summary><remarks>
            <para>To associate a command with a transaction object, use the ULCommand.Transaction property. The current transaction is automatically associated to commands created by ULConnection.CreateCommand.</para>
            <para>By default, the connection does not use transactions and all commands are automatically committed as they are executed. Once the current transaction is committed or rolled back, the connection reverts to auto commit mode and the previous isolation level until the next call to BeginTransaction.</para>
            <para> UltraLite's definition of each isolation level is slightly different than ADO.NET's documentation of IsolationLevel. For more information, see @olink targetdoc="uladmin" targetptr="isolationlevels"@Isolation Levels@/olink@.</para>
            <para>This is the strongly-typed version of System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel) and System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel).</para>
        </remarks><param name="isolationLevel">
            The required isolation level for the transaction. UltraLite.NET only supports System.Data.IsolationLevel.ReadUncommitted and ReadCommitted. 
        </param><returns>
        <para>A ULTransaction object representing the new transaction.</para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>The connection is closed or an unsupported isolation level was specified.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>ULConnection does not support parallel transactions.</para>
        </exception><seealso cref="T:iAnywhere.Data.UltraLite.ULTransaction"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTransaction.Commit"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTransaction.Rollback"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/><seealso cref="M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)"/><seealso cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)"/><seealso cref="T:System.Data.IsolationLevel"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ChangeDatabase(System.String)">
            <summary>
            <para>Changes the current database for an open ULConnection.</para>
        </summary><remarks>
            <para>The connection to the current database is closed even if there are parameter errors.</para>
            <para><i><b>UL Ext: </b></i> <paramref name="connectionString"/> is a full connection string, not a dbn or dbf.</para>
        </remarks><param name="connectionString">
            A complete connection string to open the connection to a new database. 
        </param><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ChangeEncryptionKey(System.String)">
            <summary>
            <para><i><b>UL Ext: </b></i> Changes the database's encryption key to the specified new key.</para>
        </summary><remarks>
            <para>If the encryption key is lost, it is not possible to open the database.</para>
        </remarks><param name="newKey">
            The new encryption key for the database. 
        </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.EncryptionKey"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ChangePassword(System.String,System.String)">
            <summary>
            <para>Changes the password for the user indicated in the connection string to the supplied new password. </para>
        </summary><param name="connectionString">
            The connection string that contains enough information to connect to the database that you want. The connection string may contain the user ID and the current password. 
        </param><param name="newPassword">
            The new password to set. 
        </param><exception cref="T:System.ArgumentNullException">
            <para>Either the connectionString or the newPassword parameter is null.</para>
        </exception><exception cref="T:System.ArgumentException">
            <para>The connection string includes the option to use integrated security.</para>
        </exception><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred while attempting to open the database.</para>
        </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.CountUploadRows(System.String,System.Int64)">
            <summary>
            <para><i><b>UL Ext: </b></i> Returns the number of rows that need to be uploaded when the next synchronization takes place.</para>
        </summary><param name="pubs">
            A comma separated list of publications to check for rows. 
        </param><param name="threshold">
            The maximum number of rows to count, limiting the amount of time taken by CountUploadRows. A value of 0 corresponds to the maximum limit. A value of 1 determines if any rows need to be synchronized. 
        </param><returns>
        <para>The number of rows that need to be uploaded from the specified publication(s).</para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.CreateDbCommand">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand">
            <summary>
            <para>Creates and initializes a ULCommand object associated with this connection and its current transaction. You can use the properties of the ULCommand to control its behavior. </para>
        </summary><remarks>
            <para>You must set the ULCommand.CommandText before the command can be executed.</para>
            <para>This is the strongly-typed version of System.Data.IDbConnection.CreateCommand and System.Data.Common.DbConnection.CreateCommand().</para>
        </remarks><returns>
        <para>A new ULCommand object.</para>
        </returns><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="M:System.Data.IDbConnection.CreateCommand"/><seealso cref="M:System.Data.Common.DbConnection.CreateCommand"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String)">
            <summary>
            <para><i><b>UL Ext: </b></i> Retrieves in a ULTable a database table for direct manipulation. The table is opened (sorted) using the table's primary key. </para>
        </summary><remarks>
            <para>This method is a shortcut for the ULCommand.ExecuteTable() method that does not require a ULCommand instance. It is provided to help users porting from earlier versions of UltraLite.NET (it replaces iAnywhere.UltraLite.Connection.GetTable() and iAnywhere.UltraLite.Table.Open()).</para>
        </remarks><param name="tableName">
            The name of the table to open. 
        </param><returns>
        The table as a ULTable object. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The <paramref name="tableName"/> is invalid.</para>
        </exception><example>
            <para>The following code opens the table named MyTable using the table's primary key. It assumes an open ULConnection instance called conn.</para>
            <code>
' Visual Basic
Dim t As ULTable = conn.ExecuteTable("MyTable")

' The line above is equivalent to
' Dim cmd As ULCommand = conn.CreateCommand()
' cmd.CommandText = "MyTable"
' cmd.CommandType = CommandType.TableDirect
' Dim t As ULTable = cmd.ExecuteTable()
' cmd.Dispose()
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULTable t = conn.ExecuteTable("MyTable");

// The line above is equivalent to
// ULTable t;
// using(ULCommand cmd = conn.CreateCommand())
// {
//     cmd.CommandText = "MyTable";
//     cmd.CommandType = CommandType.TableDirect;
//     t = cmd.ExecuteTable();
// }
</code>


        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String,System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String,System.String,System.Data.CommandBehavior)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTable"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String,System.String)">
            <summary>
            <para><i><b>UL Ext: </b></i> Retrieves in a ULTable a database table for direct manipulation. The table is opened (sorted) using the specified index. </para>
        </summary><remarks>
            <para>This method is a shortcut for the ULCommand.ExecuteTable() method that does not require a ULCommand instance. It is provided to help users porting from earlier versions of UltraLite.NET (it replaces iAnywhere.UltraLite.Connection.GetTable() and iAnywhere.UltraLite.Table.Open()).</para>
        </remarks><param name="tableName">
            The name of the table to open. 
        </param><param name="indexName">
            The name of the index with which to open (sort) the table. 
        </param><returns>
        The table as a ULTable object. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The <paramref name="tableName"/> is invalid.</para>
        </exception><example>
            <para>The following code opens the table named MyTable using the index named MyIndex. It assumes an open ULConnection instance called conn.</para>
            <code>
' Visual Basic
Dim t As ULTable = conn.ExecuteTable("MyTable", "MyIndex")

' The line above is equivalent to
' Dim cmd As ULCommand = conn.CreateCommand()
' cmd.CommandText = "MyTable"
' cmd.IndexName = "MyIndex"
' cmd.CommandType = CommandType.TableDirect
' Dim t As ULTable = cmd.ExecuteTable()
' cmd.Dispose()
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULTable t = conn.ExecuteTable("MyTable", "MyIndex");

// The line above is equivalent to
// ULTable t;
// using(ULCommand cmd = conn.CreateCommand())
// {
//     cmd.CommandText = "MyTable";
//     cmd.IndexName = "MyIndex";
//     cmd.CommandType = CommandType.TableDirect;
//     t = cmd.ExecuteTable();
// }
</code>


        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String,System.String,System.Data.CommandBehavior)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTable"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String,System.String,System.Data.CommandBehavior)">
            <summary>
            <para><i><b>UL Ext: </b></i> Retrieves, with the specified command behavior, a database table for direct manipulation. The table is opened (sorted) using the specified index. </para>
        </summary><remarks>
            <para>This method is a shortcut for the ULCommand.ExecuteTable(System.Data.CommandBehavior) that does not require a ULCommand instance. It is provided to help users porting from earlier versions of UltraLite.NET (it replaces iAnywhere.UltraLite.Connection.GetTable() and iAnywhere.UltraLite.Table.Open()).</para>
        </remarks><param name="tableName">
            The name of the table to open. 
        </param><param name="indexName">
            The name of the index with which to open (sort) the table. 
        </param><param name="cmdBehavior">
            A bitwise combination of System.Data.CommandBehavior flags describing the results of the query and its effect on the connection. UltraLite.NET respects only the System.Data.CommandBehavior.Default, System.Data.CommandBehavior.CloseConnection, and System.Data.CommandBehavior.SchemaOnly flags. 
        </param><returns>
        The table as a ULTable object. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The <paramref name="tableName"/> is invalid.</para>
        </exception><example>
            <para>The following code opens the table named MyTable using the index named MyIndex. It assumes an open ULConnection instance called conn.</para>
            <code>
' Visual Basic
Dim t As ULTable = conn.ExecuteTable( _
    "MyTable", "MyIndex", CommandBehavior.Default _
)
  
' The line above is equivalent to the following code:
' Dim cmd As ULCommand = conn.CreateCommand()
' cmd.CommandText = "MyTable"
' cmd.IndexName = "MyIndex"
' cmd.CommandType = CommandType.TableDirect
' Dim t As ULTable = cmd.ExecuteTable(CommandBehavior.Default)
' cmd.Dispose()
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULTable t = conn.ExecuteTable(
    "MyTable", "MyIndex", CommandBehavior.Default
);

// The line above is equivalent to the following code:
// ULTable t;
// using(ULCommand cmd = conn.CreateCommand())
// {
//     cmd.CommandText = "MyTable";
//     cmd.IndexName = "MyIndex";
//     cmd.CommandType = CommandType.TableDirect;
//     t = cmd.ExecuteTable(CommandBehavior.Default);
// }
</code>


        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String,System.String)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTable"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable(System.Data.CommandBehavior)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:System.Data.CommandBehavior"/><seealso cref="F:System.Data.CommandBehavior.Default"/><seealso cref="F:System.Data.CommandBehavior.CloseConnection"/><seealso cref="F:System.Data.CommandBehavior.SchemaOnly"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.GetLastDownloadTime(System.String)">
            <summary>
            <para><i><b>UL Ext: </b></i> Returns the time of the most recent download of the specified publication. </para>
        </summary><remarks>
            <para>The parameter <paramref name="publication"/> is a publication name to check. If the special constant SYNC_ALL_DB is used, returns the time of the last download of the entire database.</para>
        </remarks><param name="publication">
            The publication to check.
        </param><returns>
        <para>The timestamp of the last download.</para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ResetLastDownloadTime(System.String)"/><seealso cref="F:iAnywhere.Data.UltraLite.ULConnection.SYNC_ALL_DB"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.GetNewUUID">
            <summary>
            <para><i><b>UL Ext: </b></i> Generates a new UUID (System.Guid). </para>
        </summary><remarks>
            <para>This method is provided here because it is not included in the .NET Compact Framework.</para>
        </remarks><returns>
        <para>A new UUID as a System.Guid.</para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="T:System.Guid"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema">
            <summary>
            <para>Returns the list of supported schema collections. </para>
        </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String)">
            <summary>
            <para>Returns information for the specified metadata collection for this ULConnection. </para>
        </summary><param name="collection">
            Name of the metadata collection. If none provided, MetaDataCollections is used. 
        </param><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String,System.String[])"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String,System.String[])">
            <summary>
            <para>Returns schema information for the data source of this ULConnection and, if specified, uses the specified string for the schema name and the specified string array for the restriction values. </para>
        </summary><remarks>
            <para>This method is used to query the database for various metadata. Each type of metadata is given a collection name, which must be passed to receive that data. The default collection name is MetaDataCollections.</para>
            <para>You can query the .NET data provider to determine the list of supported schema collections by calling the GetSchema method with no arguments, or with the schema collection name <b>MetaDataCollections</b>. This returns a DataTable with a list of the supported schema collections (CollectionName), the number of restrictions that they each support (NumberOfRestrictions), and the number of identifier parts that they use (NumberOfIdentifierParts).</para>
            <list type="table">
            <listheader>
                <term>Collection</term> <term>Metadata</term> 
            </listheader>
            <item>
            <term>Columns</term> <term>Returns information about all columns in the database.</term> 
            </item>
            <item>
            <term>DataSourceInformation</term> <term>Returns information about the database provider. </term> 
            </item>
            <item>
            <term>DataTypes</term> <term>Returns a list of supported data types.</term> 
            </item>
            <item>
            <term>ForeignKeys</term> <term>Returns information about all foreign keys in the database.</term> 
            </item>
            <item>
            <term>IndexColumns</term> <term>Returns information about all index columns in the database. </term> 
            </item>
            <item>
            <term>Indexes</term> <term>Returns information about all indexes in the database.</term> 
            </item>
            <item>
            <term>MetaDataCollections</term> <term>Returns a list of all collection names.</term> 
            </item>
            <item>
            <term>Publications </term> <term>Returns information about all publications in the database.</term> 
            </item>
            <item>
            <term>ReservedWords</term> <term>Returns a list of reserved words used by UltraLite.</term> 
            </item>
            <item>
            <term>Restrictions</term> <term>Returns information about restrictions used in GetSchema.</term> 
            </item>
            <item>
            <term>Tables</term> <term>Returns information about all tables in the database.</term> 
            </item>
            </list>
            <para> These collection names are also available as read-only properties in the ULMetaDataCollectionNames class.</para>
            <para> The results returned can be filtered by specifying an array of restrictions in the call to GetSchema.</para>
            <para>The restrictions available with each collection can be queried by calling:</para>
            <code>
            GetSchema( "Restrictions" )
            </code>
            <para>If the collection requires four restrictions, then the restrictions parameter must be either NULL, or a string with four values.</para>
            <para>To filter on a particular restriction, place the string to filter by in its place in the array and leave any unused places NULL. For example, the Tables collection has three restrictions: Table, TableType, SyncType.</para>
            <para>To filter the Table collection:</para>
            <para><b>GetSchema( "Tables", new string[ ] { "my_table", NULL, NULL } ) </b> Returns information about all tables named my_table.</para>
            <para><b>GetSchema( "Tables", new string[ ] { NULL, "User", NULL } )</b> Returns information about all user tables.</para>

        </remarks><param name="collection">
            Name of the metadata collection. If none provided, MetaDataCollections is used. 
        </param><param name="restrictions">
            A set of restriction values for the requested schema. 
        </param><returns>
        <para>A DataTable that contains schema information.</para>
        </returns><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/><seealso cref="T:iAnywhere.Data.UltraLite.ULMetaDataCollectionNames"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.GrantConnectTo(System.String,System.String)">
            <summary>
            <para><i><b>UL Ext: </b></i> Grants access to an UltraLite database for a user ID with a specified password. </para>
        </summary><remarks>
            <para>If an existing user ID is specified, this function updates the password for the user. UltraLite supports a maximum of 4 users. This method is enabled only if user authentication was enabled when the connection was opened.</para>
        </remarks><param name="uid">
            The user ID to receive access to the database. The maximum length of the user ID is 16 characters. 
        </param><param name="pwd">
            The password to be associated with the user ID. The maximum length is 16 characters. 
        </param><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.UserID"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.Password"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ResetLastDownloadTime(System.String)">
            <summary>
            <para><i><b>UL Ext: </b></i> Resets the time of the most recent download. </para>
        </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetLastDownloadTime(System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.RevokeConnectFrom(System.String)">
            <summary>
            <para><i><b>UL Ext: </b></i> Revokes access to an UltraLite database from the specified user ID. </para>
        </summary><param name="uid">
            The user ID whose access to the database is being revoked. 
        </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GrantConnectTo(System.String,System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.RollbackPartialDownload">
            <summary>
            <para><i><b>UL Ext: </b></i> Rolls back outstanding changes to the database from a partial download. </para>
        </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.KeepPartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.StartSynchronizationDelete">
            <summary>
            <para><i><b>UL Ext: </b></i> Marks all subsequent deletes made by this connection for synchronization. </para>
        </summary><remarks>
            <para>When this function is called, all delete operations are again synchronized, causing the rows deleted from the UltraLite database to be removed from the consolidated database as well.</para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.StopSynchronizationDelete"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Truncate"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.StopSynchronizationDelete">
            <summary>
            <para><i><b>UL Ext: </b></i> Prevents delete operations from being synchronized. </para>
        </summary><remarks>
            <para>This method is useful for deleting old information about an UltraLite database to save space, while not deleting this information about the consolidated database.</para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.StartSynchronizationDelete"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ValidateDatabase(iAnywhere.Data.UltraLite.ULDBValid)">
            <summary>
            <para><b>UL Ext:</b> Performs validation on the current database. </para>
        </summary><param name="how">
            Describes how to validate the database.
        </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><example>
            <para>The following code validates the current database</para>
            <code>
' Visual Basic
conn.ValidateDatabase( iAnywhere.Data.UltraLite.ULVF_INDEX )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
conn.ValidateDatabase( iAnywhere.Data.UltraLite.ULVF_INDEX )
</code>


        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.ValidateDatabase(System.String,iAnywhere.Data.UltraLite.ULDBValid)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDBValid"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ValidateDatabase(iAnywhere.Data.UltraLite.ULDBValid,System.String)">
            <summary>
            <para><b>UL Ext:</b> Performs validation on the current database. </para>
        </summary><param name="how">
            Describes how to validate the database.
        </param><param name="tableName">
            If null (Nothing in Visual Basic), validate the entire database; otherwise, validate just the named table. 
        </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><example>
            <para>The following code validates the current database</para>
            <code>
' Visual Basic
conn.ValidateDatabase( iAnywhere.Data.UltraLite.ULVF_INDEX, Nothing )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
conn.ValidateDatabase( iAnywhere.Data.UltraLite.ULVF_INDEX, null )
</code>


        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.ValidateDatabase(System.String,iAnywhere.Data.UltraLite.ULDBValid)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDBValid"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize">
            <summary>
            <para><i><b>UL Ext: </b></i> Synchronize the database using the current ULConnection.SyncParms. </para>
        </summary><remarks>
            <para>A detailed result status is reported in this connection's ULConnection.SyncResult.</para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize(iAnywhere.Data.UltraLite.ULSyncProgressListener)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncParms"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncResult"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize(iAnywhere.Data.UltraLite.ULSyncProgressListener)">
            <summary>
            <para> <i><b>UL Ext: </b></i> Synchronizes the database using the current ULConnection.SyncParms with progress events posted to the specified listener. </para>
        </summary><remarks>
            <para>Errors during synchronization are posted as a ULSyncProgressState.STATE_ERROR event, then thrown as a ULException.</para>
            <para>A detailed result status is reported in this connection's ULConnection.SyncResult.</para>
        </remarks><param name="listener">
            The object that receives synchronization progress events. 
        </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressListener"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncParms"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_ERROR"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncResult"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.BeginSynchronize">
            <summary>
            <para>
                <i><b>UL Ext: </b></i> Asynchronously launches a synchronization using the current SyncParms.
            </para>
        </summary><remarks>
            <para>
		This method will create a new thread to do the synchronization and then return immediately.
		Call EndSynchronize to block until the sync has completed.
            </para>
        </remarks><returns>
            <para> An IAsyncResult object that can be used to determine if the sync has completed or block until the sync has finished. </para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginSynchronize(System.Windows.Forms.Control,iAnywhere.Data.UltraLite.ULSyncProgressedDlg,System.Object)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.EndSynchronize(System.IAsyncResult)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CancelSynchronize(System.IAsyncResult)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressedDlg"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.BeginSynchronize(System.Windows.Forms.Control,iAnywhere.Data.UltraLite.ULSyncProgressedDlg,System.Object)">
            <summary>
            <para>
                <i><b>UL Ext: </b></i> Asynchronously launches a synchronization using the current SyncParms.
            </para>
        </summary><param name="control">
            A System.Windows.Forms.Control object the synchronization thread will use to invoke ULSyncProgressedDlg calls.
        </param><param name="dlg">
            A ULSyncProgressedDlg method that will be invoked regularly with synchronization progress updates.
        </param><param name="state">
            This user context can be accessed in the ULSyncProgressedDlg method using IAsyncResult.AsyncState.
        </param><remarks>
            <para>
		This method will create a new thread to do the synchronization and then return immediately, invoking
		the provided ULSyncProgressedDlg method regularly with synchronization progress updates.
		Call EndSynchronize to block until the sync has completed.
            </para>
        </remarks><returns>
            <para> An IAsyncResult object that can be used to determine if the sync has completed or block until the sync has finished. </para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginSynchronize"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.EndSynchronize(System.IAsyncResult)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CancelSynchronize(System.IAsyncResult)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressedDlg"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.CancelSynchronize(System.IAsyncResult)">
            <summary>
            <para>
                <i><b>UL Ext: </b></i> Causes a running synchronization to be cancelled at the next opportunity.
            </para>
        </summary><param name="asyncResult">
            The IAsyncResult returned from BeginSynchronize.
        </param><remarks>
            <para>
		This method will inform the synchronization thread to terminate and returns immediately.
		Call EndSynchronize to block until the sync has successfully terminated.
            </para>
        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginSynchronize"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginSynchronize(System.Windows.Forms.Control,iAnywhere.Data.UltraLite.ULSyncProgressedDlg,System.Object)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.EndSynchronize(System.IAsyncResult)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.EndSynchronize(System.IAsyncResult)">
            <summary>
            <para>
                <i><b>UL Ext: </b></i> Blocks until an asynchronously launched synchronization terminates.
            </para>
        </summary><param name="asyncResult">
            The IAsyncResult returned from BeginSynchronize.
        </param><remarks>
            <para>
		If an error occurred during the synchronization, a ULException will be thrown.
            </para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginSynchronize"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginSynchronize(System.Windows.Forms.Control,iAnywhere.Data.UltraLite.ULSyncProgressedDlg,System.Object)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CancelSynchronize(System.IAsyncResult)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.SetSyncListener(iAnywhere.Data.UltraLite.ULSyncProgressListener)">
            <summary>
            <para>
                Specifies the listener object used to process synchronization messages.
            </para>
        </summary><remarks>
            <para>When the SYNCHRONIZE profileName SQL statement is executed,
            its progress messages are routed to syncListener, if not null (Nothing in Visual Basic).
            </para>
	    <para>
            To remove the listener, pass a null reference in a call to SetSyncListener.
	    </para>
        </remarks><param name="listener">
            The ULSyncProgressListener object that implements SyncProgressed(),
            which is called for synchronization messages on this connection.
        </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressListener"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.CancelGetNotification(System.String)">
            <summary>
            <para><b>UL Ext:</b> Cancel any pending get-notification calls on all queues matching the given name. </para>
        </summary><param name="queueName">
            The expression to match queue names upon. 
        </param><remarks>
            <para> Cancel any pending get-notification calls on all queues matching the given name. </para>
            <para> Return the number of affected queues (not the number of blocked reads necessarily). </para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetNotification(System.String,System.Int32)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.CreateNotificationQueue(System.String,System.String)">
            <summary>
            <para><b>UL Ext:</b> Create an event queue. </para>
        </summary><param name="queueName">
            The name of the new queue. 
        </param><param name="parameters">
            Creation parameters; currently unused, set to NULL.
        </param><remarks>
            <para>Create an event notification queue for this connection. Queue names are scoped per-connection, so different connections can create queues with the same name. When an event notification is sent, all queues in the database with a matching name receive (a separate instance of) the notification. Names are case insensitive. A default queue is created on demand for each connection when calling RegisterForEvent() if no queue is specified. </para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.DestroyNotificationQueue(System.String)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.DeclareEvent(System.String)">
            <summary>
            <para><b>UL Ext:</b> Declare a named event. </para>
        </summary><param name="eventName">
            The event name. 
        </param><remarks>
            <para> Declare an event which can then be registered for and triggered. UltraLite predefines some system events triggered by operations on the database or the environment. The event name must be unique. Names are case insensitive. Throws error if name already used or invalid </para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateNotificationQueue(System.String,System.String)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.DestroyNotificationQueue(System.String)">
            <summary>
            <para><b>UL Ext:</b> Destroy a event queue. </para>
        </summary><param name="queueName">
            The name of the queue. 
        </param><remarks>
            <para> Destroy the given event notification queue. A warning is signaled if unread notifications remain in the queue. Unread notifications are discarded. A connection's default event queue, if created, is destroyed when the connection is closed. </para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateNotificationQueue(System.String,System.String)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.GetNotification(System.String,System.Int32)">
            <summary>
            <para><b>UL Ext:</b> Block for notification or timeout.</para>
        </summary><param name="queueName">
            The name of the queue to be waited upon. 
        </param><param name="wait_ms">
            The time to wait, in milliseconds. Use System.Threading.Timeout.Infinite (-1) for an indefinite wait. 
        </param><remarks>
            <para> Read an event notification. This call blocks until a notification is received or until the given wait period expires. To wait indefinitely, pass System.Threading.Timeout.Infinite for \p wait_ms. To cancel a wait, send another notification to the given queue or use CancelGetNotification(). After reading a notification, use ReadNotificationParameter() to retrieve additional parameters. </para>
        </remarks><returns>
            <para> Return null if wait period expired or was canceled; otherwise, returns the event name. </para>
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.SendNotification(System.String,System.String,System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetNotificationParameter(System.String,System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CancelGetNotification(System.String)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/><seealso cref="T:System.Threading.Timeout"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.GetNotificationParameter(System.String,System.String)">
            <summary>
            <para><b>UL Ext:</b> Get value of a parameter, for an event just read by GetNotification(). </para>
        </summary><param name="queueName">
            The name of the queue to be waited upon. 
        </param><param name="parameterName">
            The name of the parameter whose value should be returned. 
        </param><remarks>
            <para> Get a parameter for the event notification just read by ULGetNotification(). Only the parameters from the most-recently read notification on the given queue are available. </para>
            <para> Returns parameter value if the parameter was found; otherwise, returns null. </para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetNotification(System.String,System.Int32)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.RegisterForEvent(System.String,System.String,System.String,System.Boolean)">
            <summary>
            <para><b>UL Ext:</b> Registers a queue to get events from an object. </para>
        </summary><param name="eventName">
            The event name. 
        </param><param name="objectName">
            The object name to which event applies. For example, a table name. 
        </param><param name="queueName">
            The event queue name to be used. 
        </param><param name="registerNotUnReg">
            True to register; false to unregister. 
        </param><remarks>
            <para>This method registers a queue to receive notifications of an event. The default connection queue is implied and created if a queue name is not supplied. Certain system events allow specification of an object name to which the event applies. For example, the TableModified event can specify the table name. Unlike SendNotification(), only the specific queue registered receives notifications of the event; other queues with the same name on different connections do not (unless they are also explicit registered).  This method throws an error if the queue or event does not exist.</para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.DeclareEvent(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateNotificationQueue(System.String,System.String)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.SendNotification(System.String,System.String,System.String)">
            <summary>
            <para><b>UL Ext:</b> Send a notification to matching queues. Returns the number of matching queues. </para>
        </summary><param name="queueName">
            The event queue name to be used. 
        </param><param name="eventName">
            The event name. 
        </param><param name="parameters">
            Parameters to pass. 
        </param><remarks>
            <para> Send a notification to all queues matching the given name (including any such queue on the current connection). This call does not block. Use the special queue name "*" to send to all queues. </para>
            <para> Returns the number of notifications sent (the number of matching queues). </para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.DeclareEvent(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.RegisterForEvent(System.String,System.String,System.String,System.Boolean)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.TriggerEvent(System.String,System.String)">
            <summary>
            <para><b>UL Ext:</b> Trigger an event. Returns the number of notifications sent. </para>
        </summary><param name="eventName">
            The event name to be triggered. 
        </param><param name="parameters">
            Parameters to pass. 
        </param><remarks>
            <para> Trigger an event (and send notification to all registered queues). </para>
            <para> Returns the number of event notifications sent. </para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.DeclareEvent(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.RegisterForEvent(System.String,System.String,System.String,System.Boolean)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/>
        </member>
        <member name="E:iAnywhere.Data.UltraLite.ULConnection.InfoMessage">
            <summary>
            <para>Occurs when UltraLite.NET sends a warning or an informational message on this connection. </para>
        </summary><remarks>
            <para>To process UltraLite.NET warnings or informational messages, you must create a ULInfoMessageEventHandler delegate and attach it to this event. </para>
        </remarks><example>
            <para>The following code defines an informational message event handler:</para>
            <code>
' Visual Basic
Private Sub MyInfoMessageHandler( _
    obj As Object, args As ULInfoMessageEventArgs _
)
    System.Console.WriteLine( _
        "InfoMesageHandler: " + args.NativeError + ", " _
        + args.Message _
    )
End Sub
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
private void MyInfoMessageHandler(
    object obj, ULInfoMessageEventArgs args
)
{
    System.Console.WriteLine(
        "InfoMesageHandler: " + args.NativeError + ", "
        + args.Message
    );
}
</code>
            <para>The following code adds the MyInfoMessageHandler to the connection named conn.</para>
            <code>
' Visual Basic
AddHandler conn.InfoMessage, AddressOf MyInfoMessageHandler
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
conn.InfoMessage +=
    new ULInfoMessageEventHandler(MyInfoMessageHandler);
</code>


        </example><seealso cref="T:iAnywhere.Data.UltraLite.ULInfoMessageEventHandler"/>
        </member>
        <member name="E:iAnywhere.Data.UltraLite.ULConnection.StateChange">
            <summary>
            <para>Occurs when this connection changes state. </para>
        </summary><remarks>
            <para>To process state change messages, you must create a System.Data.StateChangeEventHandler delegate and attach it to this event. </para>
        </remarks><example>
            <para>The following code defines a state change event handler.</para>
            <code>
' Visual Basic
Private Sub MyStateHandler( _
    obj As Object, args As StateChangeEventArgs _
)
    System.Console.WriteLine( _
        "StateHandler: " + args.OriginalState + " to " _
        + args.CurrentState _
    )
End Sub
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
private void MyStateHandler(
    object obj, StateChangeEventArgs args
)
{
    System.Console.WriteLine(
        "StateHandler: " + args.OriginalState + " to "
        + args.CurrentState
    );
}
</code>
            <para>The following code adds the MyStateHandler to the connection named conn.</para>
            <code>
' Visual Basic
AddHandler conn.StateChange, AddressOf MyStateHandler
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
conn.StateChange += new StateChangeEventHandler(MyStateHandler);
</code>


        </example><seealso cref="T:System.Data.StateChangeEventHandler"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString">
            <summary>
            <para> Specifies the parameters to use for opening a connection to an UltraLite.NET database. The connection string can be supplied using a ULConnectionParms object. </para>
        </summary><value> 
        <para>The parameters used to open this connection should be a semicolon-separated list of keyword-value pairs. The default is an empty string (an invalid connection string).</para>
        </value><remarks>
            <para><i><b>UL Ext: </b></i> The parameters used by UltraLite.NET are specific to UltraLite databases and therefore the connection string is not compatible with SQL Anywhere connection strings. For a list of parameters, see @olink targetdoc="uladmin" targetptr="fo-connparms"@Connection Parameters@/olink@.</para>
			<para>Parameter values can be quoted with either single quote characters or double quote characters provided that the quoted contents do not contain quote characters of the same type. Values must be quoted if they contain semicolons, begin with a quote, or require leading or trailing whitespace.</para>
			<para>If you are not quoting parameter values, make sure that they do not contain semicolons, and that they begin with either a single quote or a double quote character. Leading and trailing spaces in values are ignored.</para>
            <para>By default, connections are opened with UID=DBA and PWD=sql. To make the database more secure, change the user DBA's password or create new users (using GrantConnectTo) and remove the DBA user (using RevokeConnectFrom).</para>
        </remarks><exception cref="T:System.InvalidOperationException">
            <para>The value cannot be set while the connection is open.</para>
        </exception><exception cref="T:System.ArgumentException">
            <para>The supplied connection string is invalid.</para>
        </exception><example>
            <para>The following code creates and opens a connection to the existing database \UltraLite\MyDatabase.udb on a Windows Mobile device.</para>
            <code>
' Visual Basic
Dim openParms As ULConnectionParms = New ULConnectionParms
openParms.DatabaseOnDevice = "\UltraLite\MyDatabase.udb"
Dim conn As ULConnection = New ULConnection
conn.ConnectionString = openParms.ToString()
conn.Open()
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULConnectionParms openParms = new ULConnectionParms();
openParms.DatabaseOnDevice = @"\UltraLite\MyDatabase.udb";
ULConnection conn = new ULConnection();
conn.ConnectionString = openParms.ToString();
conn.Open();
</code>

        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnectionParms"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GrantConnectTo(System.String,System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionTimeout">
            <summary>
            <para> This feature is not supported by UltraLite.NET. </para>
        </summary><value>The value is always zero. </value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            Setting the value is not supported in UltraLite.NET. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.Database">
            <summary>
            <para> Returns the name of the database to which the connection opens.</para>
        </summary><value>A string containing the name of the database.</value><remarks>
            <para>On Windows Mobile devices, ULConnection looks in the connection string in the following order: dbn, ce_file.</para>
            <para> On desktop machines, ULConnection looks in the connection string in the following order: dbn, nt_file.</para>
        </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.DatabaseID">
            <summary>
            <para> <i><b>UL Ext: </b></i> Specifies the Database ID value to be used for global autoincrement columns. </para>
        </summary><value>The Database ID value of the current database.</value><remarks>
            <para>The database ID value must be in the range [0,System.UInt32.MaxValue]. A value of ULConnection.INVALID_DATABASE_ID is used to indicate that the database ID has not been set for the current database.</para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>The specified new database ID is invalid.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetDatabaseProperty(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.SetDatabaseOption(System.String,System.String)"/><seealso cref="F:iAnywhere.Data.UltraLite.ULConnection.INVALID_DATABASE_ID"/><seealso cref="F:System.UInt32.MaxValue"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.DataSource">
            <summary>
            <para>This feature is not supported by UltraLite.NET. </para>
        </summary><value>The value is always the empty string. </value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.GlobalAutoIncrementUsage">
            <summary>
            <para><i><b>UL Ext: </b></i> Returns the percentage of available global autoincrement values that have been used. </para>
        </summary><value>The percentage of available global autoincrement values that have been used. It is an integer in the range [0-100], inclusive.</value><remarks>
            <para>If the percentage approaches 100, your application should set a new value for the global database ID using ULConnection.DatabaseID.</para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception><seealso cref="T:iAnywhere.Data.UltraLite.ULDatabaseManager"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.DatabaseID"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.LastIdentity">
            <summary>
            <para> <i><b>UL Ext: </b></i> Returns the most recent identity value used.</para>
        </summary><value>The most recently-used identity value as an unsigned long.</value><remarks>
            <para>The most recent identity value used. This property is equivalent to the SQL Anywhere statement:</para>
            <code>
            SELECT @@identity
            </code>
            <para> LastIdentity is particularly useful in the context of global autoincrement columns.</para>
            <para>Since this property only allows you to determine the most recently assigned default value, you should retrieve this value soon after executing the insert statement to avoid spurious results. </para>
            <para> Occasionally, a single insert statement may include more than one column of type global autoincrement. In this case, LastIdentity is one of the generated default values, but there is no reliable means to determine from which column the value is. For this reason, you should design your database and write your insert statements to avoid this situation.</para>

        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>A SQL error occurred.</para>
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.Schema">
            <summary>
            <para><i><b>UL Ext: </b></i> Provides access to the schema of the current database associated with this connection. </para>
        </summary><value>A reference to the ULDatabaseSchema object representing the schema of the database on which this connection opens.</value><remarks>
            <para>This property is only valid while its connection is open. </para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULDatabaseSchema"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.ServerVersion">
            <summary>
            <para>This feature is not supported by UltraLite.NET. </para>
        </summary><value>The value is always the empty string. </value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.State">
            <summary>
            <para>Returns the current state of the connection. </para>
        </summary><value>Returns System.Data.ConnectionState.Open if the connection is open, or System.Data.ConnectionState.Closed if the connection is closed.</value><seealso cref="E:iAnywhere.Data.UltraLite.ULConnection.StateChange"/><seealso cref="T:System.Data.ConnectionState"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.SyncParms">
            <summary>
            <para><i><b>UL Ext: </b></i> Specifies the synchronization settings for this connection.</para>
        </summary><value>A reference to the ULSyncParms object representing the parameters used for synchronization by this connection. Modifications to the parameters affect the next synchronization made over this connection. </value><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncResult"/><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncParms"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.SyncResult">
            <summary>
            <para><i><b>UL Ext: </b></i> Returns the results of the last synchronization for this connection.</para>
        </summary><value>A reference to the ULSyncResult object representing the results of the last synchronization for this connection. </value><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncParms"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncResult"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULConnectionParms">
            <summary>
            <para> <i><b>UL Ext: </b></i> Builds a connection string for opening a connection to an UltraLite database. The frequently-used connection parameters are individual properties on the ULConnectionParms object.</para>
        </summary><remarks>
            <para>A ULConnectionParms object is used to specify the parameters for opening a connection (ULConnection.Open) or dropping a database (ULDatabaseManager.DropDatabase).</para>
            <para>Leading and trailing spaces are ignored in all values. Values must not contain leading or trailing spaces, or a semicolon, or begin with either a single quote or a double quote.</para>
            <para> When building a connection string, you need to identify the database and specify any optional connection settings. Once you have supplied all the connection parameters by setting the appropriate properties on a ULConnectionParms object, you create a connection string using the ULConnectionParms.ToString. The resulting string is used to create a new ULConnection with the ULConnection(String) constructor or set the ULConnection.ConnectionString of an existing ULConnection object.</para>
            <para> <i><b>Identifying the database</b></i> </para>
            <para> Each instance contains platform-specific paths to the database. Only the value corresponding to the executing platform is used. For example, in the code below the path \UltraLite\mydb1.udb would be used on Windows Mobile, while mydb2.db would be used on other platforms.</para>
            <code>
' Visual Basic
Dim dbName As ULConnectionParms = new ULConnectionParms
dbName.DatabaseOnDevice = "\UltraLite\mydb1.udb"
dbName.DatabaseOnDesktop = "somedir\mydb2.udb"
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULConnectionParms dbName = new ULConnectionParms();
dbName.DatabaseOnDevice = "\\UltraLite\\mydb1.udb";
dbName.DatabaseOnDesktop = @"somedir\mydb2.udb";
</code>
            <para> The recommended extension for UltraLite database files is .udb. On Windows Mobile devices, the default database is \UltraLiteDB\ulstore.udb. On other Windows platforms, the default database is ulstore.udb. In C#, you must escape any backslash characters in paths or use @-quoted string literals. </para>
            <para>If you are using multiple databases, you must specify a database name for each database.</para>
            <para><i><b>Optional connection settings</b></i></para>
            <para>Depending on your application's needs and how the database was created, you might need to supply a non-default ULConnectionParms.UserID and ULConnectionParms.Password, a database ULConnectionParms.EncryptionKey, and the connection ULConnectionParms.CacheSize. If your application is using multiple connections, you should provide a unique ULConnectionParms.ConnectionName for each connection.</para>
            <para>Databases are created with a single authenticated user, DBA, whose initial password is sql. By default, connections are opened using the user ID DBA and password sql. To disable the default user, use the ULConnection.RevokeConnectFrom. To add a user or change a user's password, use the ULConnection.GrantConnectTo. </para>
            <para>If an encryption key was supplied when the database was created, all subsequent connections to the database must use the same encryption key. To change a database's encryption key, use the ULConnection.ChangeEncryptionKey.</para>
            <para>For more information, see @olink targetdoc="uladmin" targetptr="fo-connparms"@Connection Parameters@/olink@.</para>

        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.DropDatabase(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnectionParms.ToString"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.#ctor(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.UserID"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.Password"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.EncryptionKey"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.CacheSize"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.ConnectionName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.AdditionalParms"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.RevokeConnectFrom(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GrantConnectTo(System.String,System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ChangeEncryptionKey(System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnectionParms.#ctor">
            <summary>
            <para> Initializes a ULConnectionParms instance with its default values. </para>
        </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnectionParms.ToString">
            <summary>
            <para>Returns the string representation of this instance. </para>
        </summary><returns>
        The string representation of this instance as a semicolon-separated list keyword=value pairs. 
        </returns>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.AdditionalParms">
            <summary>
            <para> Specifies additional parameters as a semicolon-separated list of name=value pairs. These parameters are used less frequently.</para>
        </summary><value>A semicolon-separated list of keyword=value additional parameters. Values of the keyword=value list must conform to the rules for ULConnection.ConnectionString. The default is a null reference (Nothing in Visual Basic).</value><remarks>
            <para> The values for the page size and reserve size parameters are specified in units of bytes. Use the suffix k or K to indicate units of kilobytes and the suffix m or M to indicate megabytes. </para>
            <para> Additional parameters are: </para>
            <list type="table">
            <listheader>
                <term>Keyword</term> <term>Description</term> 
            </listheader>
            <item>
            <term>dbn</term><term> 
            Identifies a loaded database to which a connection needs to be made.

            When a database is started, it is assigned a database name, either explicitly with the dbn parameter, or by UltraLite using the base of the file name with the extension and path removed.

            When opening connections, UltraLite first searches for a running database with a matching dbn. If one is not found, UltraLite starts a new database using the appropriate database file name parameter (DatabaseOnDevice or DatabaseOnDesktop).

            This parameter is required if the application (or UltraLite engine) needs to access two different databases that have the same base file name.

            This parameter is only used when opening a connection with ULConnection.Open.
            </term> 
            </item>
            <item>
            <term>reserve_size</term> <term> 
            Reserves file system space for storage of UltraLite persistent data.

            The reserve_size parameter allows you to pre-allocate the file system space required for your UltraLite database without inserting any data. Reserving file system space can improve performance slightly and also prevent out of memory failures. By default, the persistent storage file only grows when required as the application updates the database.

            Note that reserve_size reserves file system space, which includes the metadata in the persistent store file, and not just the raw data. The metadata overhead and data compression must be considered when deriving the required file system space from the amount of database data.

            The reserve_size parameter reserves space by growing the persistent store file to the given reserve size on startup, regardless of whether the file previously existed. The file is never truncated.

            The following parameter string ensures that the persistent store file is at least 2 MB upon startup: createParms.AdditionalParms = "reserve_size=2m"

            This parameter is only used when opening a connection with ULConnection.Open.
            </term> 
            </item>
            <item>
            <term>start</term> <term> 
            Specifies the location and then starts the UltraLite engine.

            Only supply a StartLine (START) connection parameter if you are connecting to an engine that is not currently running.

            The location is only required when the UltraLite engine is not in the system path.
            </term> 
            </item>
            </list>
            <para>For more information, see @olink targetdoc="uladmin" targetptr="fo-connparms"@Connection Parameters@/olink@.</para>
        </remarks><exception cref="T:System.ArgumentException">
            The value contained an invalid connection string. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDatabaseManager.RuntimeType"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.DatabaseOnDevice"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.DatabaseOnDesktop"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.CacheSize">
            <summary>
            <para> Specifies the size of the cache. </para>
        </summary><value>A string specifying the cache size. The default is a null reference (Nothing in Visual Basic) meaning the default of 16 pages is used.</value><remarks>
            <para> The values for the cache size are specified in units of bytes. Use the suffix k or K to indicate units of kilobytes and the suffix of m or M to indicate megabytes. </para>
            <para> For example, the following sets the cache size to 128 KB. </para>
            <code>connParms.CacheSize = "128k"</code>
            <para> The default cache size is 16 pages. Using the default page size of 4 KB, the default cache size is therefore 64 KB. The minimum cache size is platform dependent. </para>
            <para> The default cache size is conservative. If your testing shows the need for better performance, you should increase the cache size. </para>
            <para> Increasing the cache size beyond the size of the database itself provides no performance improvement and large cache sizes might interfere with the number of other applications you can use. </para>
            <para> If the cache size is unspecified or improperly specified, the default size is used. </para>

        </remarks><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.ConnectionName">
            <summary>
            <para> Specifies a name for the connection. This is only needed if you create more than one connection to the database. </para>
        </summary><value>A string specifying the name of the connection. The default is a null reference (Nothing in Visual Basic).</value><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.DatabaseOnDesktop">
            <summary>
            <para> Specifies the path and file name of the UltraLite database on Windows desktop platforms.</para>
        </summary><value>A string specifying the absolute or relative path to the database. If the value is a null reference (Nothing in Visual Basic), the database ulstore.udb is used. In C#, you must escape any backslash characters in paths or use @-quoted string literals. The default is a null reference (Nothing in Visual Basic).</value><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.DatabaseOnDevice">
            <summary>
            <para> Specifies the path and file name of the UltraLite database on Windows Mobile.</para>
        </summary><value>A string specifying the full path to the database. If the value is a null reference (Nothing in Visual Basic), the database \UltraLiteDB\ulstore.udb is used. In C#, you must escape any backslash characters in paths or use @-quoted string literals. The default is a null reference (Nothing in Visual Basic).</value><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.EncryptionKey">
            <summary>
            <para> Specifies a key for encrypting the database. </para>
        </summary><value>A string specifying the encryption key. The default is a null reference (Nothing in Visual Basic) meaning no encryption.</value><remarks>
            <para> All connections must use the same key as was specified when the database was created. Lost or forgotten keys result in completely inaccessible databases. </para>
            <para> As with all passwords, it is best to choose a key value that cannot be easily guessed. The key can be of arbitrary length, but generally the longer the key, the better, because a shorter key is easier to guess than a longer one. Using a combination of numbers, letters, and special characters decreases the chances of someone guessing the key. </para>
        </remarks><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ChangeEncryptionKey(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.Password">
            <summary>
            <para> Specifies the password for the authenticated user. </para>
        </summary><value>A string specifying a database user ID. The default is a null reference (Nothing in Visual Basic).</value><remarks>
            <para>Passwords are case sensitive.</para>
            <para> When a database is created, the password for the DBA user ID is set to sql. </para>
        </remarks><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.UserID"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.UserID">
            <summary>
            <para> Specifies an authenticated user for the database. </para>
        </summary><value>A string specifying a database user ID. The default value is a null reference (Nothing in Visual Basic).</value><remarks>
            <para>User IDs are case-insensitive.</para>
            <para> Databases are initially created with a single authenticated user named DBA. </para>
            <para>If both the user ID and password are not supplied, the user DBA with password sql are used. To make the database more secure, change the user DBA's password or create new users (using ULConnection.GrantConnectTo) and remove the DBA user (using ULConnection.RevokeConnectFrom).</para>
        </remarks><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.Password"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GrantConnectTo(System.String,System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.RevokeConnectFrom(System.String)"/>
        </member>
        <member name="E:iAnywhere.Data.UltraLite.ULConnectionParms.UnusedEvent">
            <summary>
            <para> Unused. </para>
        </summary><remarks>
            This public Event is provided to fix a Visual Studio .NET bug relating to the integration of this class in Visual Basic .NET projects. It has no functional use. 
        </remarks>
            @internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULConnectionParms.UnusedEventHandler">
            <summary>
            <para> <i><b>UL Ext: </b></i> Unused.</para>
        </summary><remarks>
            <para>This public Delegate is provided to fix a Visual Studio .NET bug relating to the integration of this class in Visual Basic .NET projects. It has no functional use.</para>
        </remarks><param name="sender">
            Object that is the sender. 
        </param><param name="args">
            Event arguments. 
        </param>
            @internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDateOrder">
            <summary>
            <para> <i><b>UL Ext: </b></i> Enumerates the date orders that a database can support.</para>
        </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDateOrder.YMD">
            <summary>
            <para>Year followed by month, followed by day of the month. </para>
        </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDateOrder.MDY">
            <summary>
            <para>Month followed by day of the month, followed by year. </para>
        </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDateOrder.DMY">
            <summary>
            <para>Day of the month followed by month, followed by year. </para>
        </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULCreateParms">
            <summary>
            <para> <i><b>UL Ext: </b></i> Builds a string of creation-time options for creating an UltraLite database.</para>
        </summary><remarks>
            <para>A ULCreateParms object is used to specify the parameters for creating a database (ULDatabaseManager.CreateDatabase(string,string)).</para>
            <para>Leading and trailing spaces are ignored in all string values. Values must not contain leading or trailing spaces, or a semicolon, or begin with either a single quote or a double quote.</para>
            <para>Once you have supplied all the creation parameters by setting the appropriate properties on a ULCreateParms object, you create a creation parameters string using the ULCreateParms.ToString. The resulting string can then be used as the createParms parameter of the ULDatabaseManager.CreateDatabase(string,string) method.</para>
            <para>For more information, see @olink targetdoc="uladmin" targetptr="fo-connparms"@Create Database Parameters@/olink@.</para>
        </remarks><example>
            <para>The following code creates the database \UltraLite\MyDatabase.udb on a Windows Mobile device. The database is created case sensitive and with the UTF8 character set.</para>
            <code>
' Visual Basic
Dim createParms As ULCreateParms = New ULCreateParms
createParms.CaseSensitive = True
createParms.UTF8Encoding = True
Dim openParms As ULConnectionParms = New ULConnectionParms
openParms.DatabaseOnDevice = "\UltraLite\MyDatabase.udb"

ULConnection.DatabaseManager.CreateDatabase( _
    openParms.ToString(), _
    createParms.ToString() _
)

Dim conn As ULConnection = _
    New ULConnection( openParms.ToString() )
conn.Open()
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULCreateParms createParms = new ULCreateParms();
createParms.CaseSensitive = true;
createParms.UTF8Encoding = true;
ULConnectionParms openParms = new ULConnectionParms();
openParms.DatabaseOnDevice = @"\UltraLite\MyDatabase.udb";

ULConnection.DatabaseManager.CreateDatabase(
    openParms.ToString(),
    createParms.ToString()
);

ULConnection conn = new ULConnection( openParms.ToString() );
conn.Open();
</code>


        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetDatabaseProperty(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.CreateDatabase(System.String,System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCreateParms.ToString"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCreateParms.#ctor">
            <summary>
            <para> Initializes a ULCreateParms instance with its default values. </para>
        </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCreateParms.ToString">
            <summary>
            <para>Returns the string representation of this instance. </para>
        </summary><returns>
        The string representation of this instance as a semicolon-separated list keyword=value pairs. 
        </returns>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.CaseSensitive">
            <summary>
            <para> Specifies whether the new database should be case sensitive when comparing string values.</para>
        </summary><value>True if the database should be case sensitive, false if the database should be case insensitive. The default is false.</value><remarks>
            <para>CaseSensitive only affects how string data is compared and sorted. Database identifiers such as table names, column names, index names, and connection user IDs are always case insensitive. Connection passwords and database encryption keys are always case sensitive.</para>
        </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.ChecksumLevel">
            <summary>
            <para> Specifies the level of database page checksums enabled for the new database.</para>
        </summary><value>An integer specifying the checksum level. Valid values are 0, 1, and 2. The default is 0.</value><exception cref="T:System.ArgumentException">
            The value is invalid. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.DateFormat">
            <summary>
            <para> Specifies the date format used for string conversions by the new database.</para>
        </summary><value>A string specifying the date format. If the value is a null reference (Nothing in Visual Basic), the database uses "YYYY-MM-DD". In C#, you must escape any backslash characters in paths or use @-quoted string literals. The default is a null reference (Nothing in Visual Basic).</value><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.DateOrder">
            <summary>
            <para> Specifies the date order used for string conversions by the new database.</para>
        </summary><value>A ULDateOrder value identifying the date order for string conversions. The default is YMD.</value><seealso cref="T:iAnywhere.Data.UltraLite.ULDateOrder"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.FIPS">
            <summary>
            <para> Specifies whether the new database should be using AES_FIPS encryption or AES encryption.</para>
        </summary><value>True if the database should be encrypted using AES_FIPS, false if the database should be encrypted with AES. The default is false.</value><remarks>
            <para>Encryption must be turned on by supplying a value for the connection parameter EncryptionKey when the new database is created. If the FIPS property is set to true and no encryption key is supplied, the ULDatabaseManager.CreateDatabase(string,string) method fails with a missing encryption key error.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.EncryptionKey"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.CreateDatabase(System.String,System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.MaxHashSize">
            <summary>
            <para> Specifies the default maximum number of bytes to use for index hashing in the new database.</para>
        </summary><value>An integer specifying the maximum hash size. The value must be in the range [0,32]. The default is 8.</value><exception cref="T:System.ArgumentException">
            The value is invalid. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.NearestCentury">
            <summary>
            <para> Specifies the nearest century used for string conversions by the new database.</para>
        </summary><value>An integer specifying the nearest century. The value must be in the range [0,100]. The default is 50.</value><exception cref="T:System.ArgumentException">
            The value is invalid. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.Obfuscate">
            <summary>
            <para> Specifies whether the new database should be using obfuscation (simple encryption) or not.</para>
        </summary><value>True if the database should be encrypted using obfuscation, false if the database should not be obfuscated. The default is false.</value><remarks>
            <para>This option is ignored if FIPS-certified encryption is turned on (ULCreateParms.FIPS). If obfuscation is turned on and a value is supplied for the connection parameter EncryptionKey (DBKEY) when the new database is created, the encryption key is ignored.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULCreateParms.FIPS"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.PageSize">
            <summary>
            <para> Specifies the page size of the new database, in bytes or kilobytes.</para>
        </summary><value>An integer specifying the page size in bytes. Valid values are 1024 (1K), 2048 (2K), 4096 (4K), 8192 (8K), 16384 (16K). The default is 4096.</value><exception cref="T:System.ArgumentException">
            The value is invalid. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.Precision">
            <summary>
            <para> Specifies the floating-point precision used for string conversions by the new database.</para>
        </summary><value>An integer specifying the precision. The value must be in the range [1,127]. The default is 30.</value><exception cref="T:System.ArgumentException">
            The value is invalid. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCreateParms.Scale"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.Scale">
            <summary>
            <para> Specifies the minimum number of digits after the decimal point when an arithmetic result is truncated to the maximum PRECISION during string conversions by the new database.</para>
        </summary><value>An integer specifying the scale. The value must be in the range [0,127]. The default is 6.</value><remarks>
            <para>Scale must be less than or equal to the Precision. If Scale is greater than the Precision, an error occurs when creating the database.</para>
        </remarks><exception cref="T:System.ArgumentException">
            The value is invalid. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.TimeFormat">
            <summary>
            <para> Specifies the time format used for string conversions by the new database.</para>
        </summary><value>A string specifying the time format. If the value is a null reference (Nothing in Visual Basic), the database uses "HH:NN:SS.SSS". In C#, you must escape any backslash characters in paths or use @-quoted string literals. The default is a null reference (Nothing in Visual Basic).</value><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.TimestampFormat">
            <summary>
            <para> Specifies the timestamp format used for string conversions by the new database.</para>
        </summary><value>A string specifying the timestamp format. If the value is a null reference (Nothing in Visual Basic), the database uses "YYYY-MM-DD HH:NN:SS.SSS". In C#, you must escape any backslash characters in paths or use @-quoted string literals. The default is a null reference (Nothing in Visual Basic).</value><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.TimestampIncrement">
            <summary>
            <para> Specifies the minimum difference between two unique timestamps, in microseconds (1,000,000th of a second).</para>
        </summary><value>An integer specifying the timestamp increment. The value must be in the range [1,60000000]. The default is 1.</value><exception cref="T:System.ArgumentException">
            The value is invalid. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCreateParms.UTF8Encoding">
            <summary>
            <para> Specifies whether the new database should be using the UTF8 character set or the character set associated with the collation.</para>
        </summary><value>True if the database should use the UTF8 character set, false if the database should use the character set associated with the collation. The default is false.</value><remarks>
            <para>Choose to use the UTF8 character set if you want to store characters that are not in the character set associated with the collation. For example, you create a database with the 1252LATIN1 collation because you want US sorting but specify UTF8Encoding true because you want to store international addresses as they are spelled locally.</para>
            <para>For databases used on Symbian OS devices, you must set UTF8Encoding true.</para>
        </remarks>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULCursorSchema">
            <summary>
            <para><i><b>UL Ext: </b></i> Represents the schema of an UltraLite.NET cursor. </para>
        </summary><remarks>
            <para> This class is an abstract base class of the ULTableSchema class and the ULResultSetSchema class. </para>
            <para><em>Note:</em> For users porting from the iAnywhere.UltraLite namespace, Column IDs are 0-based, not 1-based as they are in the iAnywhere.UltraLite namespace.</para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULTableSchema"/><seealso cref="T:iAnywhere.Data.UltraLite.ULResultSetSchema"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnCount">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.VerifyOpen">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnID(System.String)">
            <summary>
            <para> Returns the column ID of the named column. </para>
        </summary><remarks>
            <para> Column IDs range from 0 to ColumnCount-1, inclusive. </para>
            <para>Note that in result sets, not all columns have names and not all column names are unique. If you are not using aliases, the name of a non-computed column is prefixed with the name of the table the column is from. For example, MyTable.ID is the name of the only column in the result set for the query "SELECT ID FROM MyTable".</para>
            <para> Column IDs and counts might change during a schema upgrade. To correctly identify a column, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
        </remarks><param name="name">
            The name of the column. 
        </param><returns>
        The column ID of the named column. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnName(System.Int32)">
            <summary>
            <para> Returns the name of the column identified by the specified column ID. </para>
        </summary><remarks>
            <para>Note that in result sets, not all columns have names and not all column names are unique. If you are not using aliases, the name of a non-computed column is prefixed with the name of the table the column is from. For example, MyTable.ID is the name of the only column in the result set for the query "SELECT ID FROM MyTable".</para>
            <para> Column IDs and count may change during a schema upgrade. To correctly identify a column, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
        </remarks><param name="columnID">
            ID of the column. The value must be in the range [0,ColumnCount-1]. 
        </param><returns>
        The name of the column or a null reference (Nothing in Visual Basic) if the column has no name. If the column is aliased in the SQL query, the alias is returned. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnPrecision(System.Int32)">
            <summary>
            <para> Returns the precision of the column identified by the specified column ID if the column is a numeric column (SQL type NUMERIC). </para>
        </summary><param name="columnID">
            ID of the column. The value must be in the range [0,ColumnCount-1]. 
        </param><returns>
        The precision of the specified numeric column. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnScale(System.Int32)">
            <summary>
            <para> Returns the scale of the column identified by the specified column ID if the column is a numeric column (SQL type NUMERIC). </para>
        </summary><param name="columnID">
            ID of the column. The value must be in the range [0,ColumnCount-1]. 
        </param><returns>
        The scale of the specified numeric column. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnSize(System.Int32)">
            <summary>
            <para> Returns the size of the column identified by the specified column ID if the column is a sized column (SQL type BINARY or CHAR). </para>
        </summary><param name="columnID">
            ID of the column. The value must be in the range [0,ColumnCount-1]. 
        </param><returns>
        The size of the specified sized column. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnSQLName(System.Int32)">
            <summary>
            <para> Returns the name of the column identified by the specified column ID. </para>
        </summary><remarks>
            <para>Note that in result sets, not all columns have names and not all column names are unique. If you are using aliases, the name of the column is the alias.</para>
            <para>The GetColumnSQLName method differs from the GetColumnName in that for non-aliased, non-computed columns GetColumnSQLName always returns just the name of the column (without the table name as a prefix). While this behavior more closely resembles the behavior of other ADO.NET providers, it is more likely to produce non-unique names.</para>
            <para> Column IDs and count may change during a schema upgrade. To correctly identify a column, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
        </remarks><param name="columnID">
            ID of the column. The value must be in the range [0,ColumnCount-1]. 
        </param><returns>
        The name of the column or a null reference (Nothing in Visual Basic) if the column has no name. If the column is aliased in the SQL query, the alias is returned. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnName(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)">
            <summary>
            <para>Returns the UltraLite.NET data type of the column identified by the specified column ID. </para>
        </summary><param name="columnID">
            ID of the column. The value must be in the range [0,ColumnCount-1]. 
        </param><returns>
        A ULDbType enumerated integer. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDbType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetSchemaTable">
            <summary>
            <para>Returns a System.Data.DataTable that describes the column schema of the ULDataReader. </para>
        </summary><returns>
        <para>A System.Data.DataTable that describes the column schema.</para>
        </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetSchemaTable"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/><seealso cref="T:System.Data.DataTable"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCursorSchema.Name">
            <summary>
            <para>Returns the name of the cursor. </para>
        </summary><value>The name of the cursor as a string.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCursorSchema.IsOpen">
            <summary>
            <para>Checks whether the cursor schema is currently open. </para>
        </summary><value>True if the cursor schema is currently open, false if the cursor schema is closed.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount">
            <summary>
            <para> Returns the number of columns in the cursor. </para>
        </summary><value>The number of columns in the cursor or 0 if the cursor schema is closed.</value><remarks>
            <para> Column IDs range from 0 to ColumnCount-1, inclusive. </para>
            <para> Column IDs and count might change during a schema upgrade. To correctly identify a column, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
        </remarks>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRowUpdatedEventArgs">
            <summary>
			<para>Provides data for the ULDataAdapter.RowUpdated event.</para>
		</summary><seealso cref="E:iAnywhere.Data.UltraLite.ULDataAdapter.RowUpdated"/><seealso cref="T:System.Data.Common.RowUpdatedEventArgs"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
			<para>Initializes a new instance of the ULRowUpdatedEventArgs class.</para>
		</summary><param name="row">
			The System.Data.DataRow sent through an DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping). 
		</param><param name="command">
			The System.Data.IDbCommand executed when DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping) is called. 
		</param><param name="statementType">
			One of the System.Data.StatementType values that specifies the type of query executed. 
		</param><param name="tableMapping">
			The System.Data.Common.DataTableMapping sent through an DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping). 
		</param><seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)"/><seealso cref="T:System.Data.DataRow"/><seealso cref="T:System.Data.IDbCommand"/><seealso cref="T:System.Data.StatementType"/><seealso cref="T:System.Data.Common.DataTableMapping"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULRowUpdatedEventArgs.Command">
            <summary>
			<para>Returns the ULCommand executed when DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping) is called.</para>
		</summary><value>The ULCommand object executed by the update.</value><remarks>
			<para>This is the strongly-typed version of System.Data.Common.RowUpdatedEventArgs.Command.</para>
		</remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)"/><seealso cref="P:System.Data.Common.RowUpdatedEventArgs.Command"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULRowUpdatedEventArgs.RecordsAffected">
            <summary>
			<para>Returns the number of rows changed, inserted, or deleted by the execution of the SQL statement. For SELECT statements this value is -1.</para>
		</summary><value>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRowUpdatingEventArgs">
            <summary>
			<para>Provides data for the ULDataAdapter.RowUpdating event.</para>
		</summary><seealso cref="E:iAnywhere.Data.UltraLite.ULDataAdapter.RowUpdating"/><seealso cref="T:System.Data.Common.RowUpdatingEventArgs"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
			<para>Initializes a new instance of the ULRowUpdatingEventArgs class.</para>
		</summary><param name="row">
			The System.Data.DataRow to update. 
		</param><param name="command">
			The System.Data.IDbCommand to execute during the update. 
		</param><param name="statementType">
			One of the System.Data.StatementType values that specifies the type of query executed. 
		</param><param name="tableMapping">
			The System.Data.Common.DataTableMapping sent through an DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping). 
		</param><seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)"/><seealso cref="T:System.Data.DataRow"/><seealso cref="T:System.Data.IDbCommand"/><seealso cref="T:System.Data.StatementType"/><seealso cref="T:System.Data.Common.DataTableMapping"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULRowUpdatingEventArgs.Command">
            <summary>
			<para>Specifies the ULCommand to execute when performing the DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping).</para>
		</summary><value>The ULCommand object to execute when updating.</value><remarks>
			<para>This is the strongly-typed version of System.Data.Common.RowUpdatingEventArgs.Command.</para>
		</remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)"/><seealso cref="P:System.Data.Common.RowUpdatingEventArgs.Command"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRowUpdatedEventHandler">
            <summary>
			<para>Represents the method that handles the ULDataAdapter.RowUpdated event.</para>
		</summary><param name="sender">
			The connection sending the event. 
		</param><param name="e">
			The ULRowUpdatedEventArgs object that contains the event data. 
		</param><seealso cref="E:iAnywhere.Data.UltraLite.ULDataAdapter.RowUpdated"/><seealso cref="T:iAnywhere.Data.UltraLite.ULRowUpdatedEventArgs"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRowUpdatingEventHandler">
            <summary>
			<para>Represents the method that handles the ULDataAdapter.RowUpdating event.</para>
		</summary><param name="sender">
			The connection sending the event. 
		</param><param name="e">
			The ULRowUpdatingEventArgs object that contains the event data. 
		</param><seealso cref="E:iAnywhere.Data.UltraLite.ULDataAdapter.RowUpdating"/><seealso cref="T:iAnywhere.Data.UltraLite.ULRowUpdatingEventArgs"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDataAdapter">
            <summary>
			<para>Represents a set of commands and a database connection used to fill a System.Data.DataSet and to update a database.</para>
		</summary><remarks>
			<para> The System.Data.DataSet provides a way to work with data offline; that is, away from your UltraLite database. The ULDataAdapter provides methods to associate a System.Data.DataSet with a set of SQL statements. </para>
			<para>Since UltraLite is a local database and MobiLink has conflict resolution, the use of the ULDataAdapter is limited. For most purposes, the ULDataReader or the ULTable provide more efficient access to data.</para>
		</remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTable"/><seealso cref="T:System.Data.DataSet"/><seealso cref="T:System.Data.Common.DbDataAdapter"/><seealso cref="T:System.Data.IDbDataAdapter"/><seealso cref="T:System.Data.IDataAdapter"/><seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor">
            <summary>
			<para>Initializes a ULDataAdapter object.</para>
		</summary><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(iAnywhere.Data.UltraLite.ULCommand)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(iAnywhere.Data.UltraLite.ULCommand)">
            <summary>
			<para>Initializes a ULDataAdapter object with the specified SELECT statement.</para>
		</summary><param name="selectCommand">
			A ULCommand object that is used during System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet) to select records from the data source for placement in the System.Data.DataSet. 
		</param><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,System.String)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/><seealso cref="T:System.Data.DataSet"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)">
            <summary>
			<para>Initializes a ULDataAdapter object with the specified SELECT statement and connection.</para>
		</summary><param name="selectCommandText">
			A SELECT statement to be used by the ULDataAdapter.SelectCommand of the ULDataAdapter. 
		</param><param name="selectConnection">
			A ULConnection object that defines a connection to a database. 
		</param><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(iAnywhere.Data.UltraLite.ULCommand)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,System.String)">
            <summary>
			<para>Initializes a ULDataAdapter object with the specified SELECT statement and connection string.</para>
		</summary><param name="selectCommandText">
			A SELECT statement to be used by the ULDataAdapter.SelectCommand of the ULDataAdapter. 
		</param><param name="selectConnectionString">
			A connection string for an UltraLite.NET database. 
		</param><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(iAnywhere.Data.UltraLite.ULCommand)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Dispose(System.Boolean)">
            <summary>
			<para> Releases the unmanaged resources used by the ULDataAdapter and optionally releases the managed resources. </para>
		</summary><param name="disposing">
			When true, disposes of both managed and unmanaged resources. When false, disposes of only the unmanaged resources. 
		</param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.GetFillParameters">
            <summary>
			<para>Returns the parameters set by the user when executing a SELECT statement.</para>
		</summary><remarks>
			<para>This is the strongly-typed version of System.Data.Common.DbDataAdapter.GetFillParameters.</para>
		</remarks><returns>
		<para>An array of ULParameter objects that contains the parameters set by the user.</para>
		</returns><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/><seealso cref="M:System.Data.Common.DbDataAdapter.GetFillParameters"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)">
            <summary></summary>
        </member>
        <member name="E:iAnywhere.Data.UltraLite.ULDataAdapter.RowUpdated">
            <summary>
			<para>Occurs during an update after a command is executed against the data source. When an attempt to update is made, the event fires.</para>
		</summary><remarks>
			<para>To process row updated events, you must create a ULRowUpdatedEventHandler delegate and attach it to this event.</para>
		</remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULRowUpdatedEventHandler"/>
        </member>
        <member name="E:iAnywhere.Data.UltraLite.ULDataAdapter.RowUpdating">
            <summary>
			<para>Occurs during an update before a command is executed against the data source. When an attempt to update is made, the event fires.</para>
		</summary><remarks>
			<para>To process row updating events, you must create a ULRowUpdatingEventHandler delegate and attach it to this event.</para>
		</remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULRowUpdatedEventHandler"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.DeleteCommand">
            <summary>
			<para>Specifies a ULCommand object that is executed against the database when DbDataAdapter.Update(System.Data.DataSet) is called to delete rows in the database that correspond to deleted rows in the System.Data.DataSet.</para>
		</summary><value>A ULCommand object that is executed to delete rows in the database that correspond to deleted rows in the System.Data.DataSet.</value><remarks>
			<para>When DeleteCommand is assigned to an existing ULCommand object, the ULCommand object is not cloned. The DeleteCommand maintains a reference to the existing ULCommand.</para>
			<para>This is the strongly-typed version of System.Data.IDbDataAdapter.DeleteCommand  and System.Data.Common.DbDataAdapter.DeleteCommand.</para>
		</remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/><seealso cref="T:System.Data.DataSet"/><seealso cref="P:System.Data.IDbDataAdapter.DeleteCommand"/><seealso cref="P:System.Data.Common.DbDataAdapter.DeleteCommand"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.InsertCommand">
            <summary>
			<para>Specifies a ULCommand object that is executed against the database when DbDataAdapter.Update(System.Data.DataSet) is called to insert rows in the database that correspond to inserted rows in the System.Data.DataSet.</para>
		</summary><value>A ULCommand object that is executed to insert rows in the database that correspond to inserted rows in the System.Data.DataSet.</value><remarks>
			<para>When InsertCommand is assigned to an existing ULCommand object, the ULCommand object is not cloned. The InsertCommand maintains a reference to the existing ULCommand.</para>
			<para>This is the strongly-typed version of System.Data.IDbDataAdapter.InsertCommand  and System.Data.Common.DbDataAdapter.InsertCommand.</para>
		</remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/><seealso cref="T:System.Data.DataSet"/><seealso cref="P:System.Data.IDbDataAdapter.InsertCommand"/><seealso cref="P:System.Data.Common.DbDataAdapter.InsertCommand"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand">
            <summary>
			<para>Specifies a ULCommand that is used during System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet) or System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType) to obtain a result set from the database for copying into a System.Data.DataSet.</para>
		</summary><value>A ULCommand object that is executed to fill the System.Data.DataSet.</value><remarks>
			<para>When SelectCommand is assigned to an existing ULCommand object, the ULCommand object is not cloned. The SelectCommand maintains a reference to the existing ULCommand.</para>
			<para>If the SelectCommand does not return any rows, no tables are added to the System.Data.DataSet, and no exception is raised. The SELECT statement can also be specified in the ULDataAdapter(ULCommand), ULDataAdapter(String,ULConnection), or ULDataAdapter(String,String) constructors. </para>
			<para>This is the strongly-typed version of System.Data.IDbDataAdapter.SelectCommand  and System.Data.Common.DbDataAdapter.SelectCommand.</para>
		</remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(iAnywhere.Data.UltraLite.ULCommand)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,System.String)"/><seealso cref="T:System.Data.DataSet"/><seealso cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/><seealso cref="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)"/><seealso cref="P:System.Data.IDbDataAdapter.SelectCommand"/><seealso cref="P:System.Data.Common.DbDataAdapter.SelectCommand"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.UpdateCommand">
            <summary>
			<para>Specifies a ULCommand object that is executed against the database when System.Data.Common.DbDataAdapter.Update(System.Data.DataSet) is called to update rows in the database that correspond to updated rows in the System.Data.DataSet.</para>
		</summary><value>A ULCommand object that is executed to update rows in the database that correspond to updated rows in the System.Data.DataSet.</value><remarks>
			<para>When UpdateCommand is assigned to an existing ULCommand object, the ULCommand object is not cloned. The UpdateCommand maintains a reference to the existing ULCommand.</para>
			<para>If execution of this command returns rows, these rows may be merged with the System.Data.DataSet depending on how you set the ULCommand.UpdatedRowSource of the ULCommand object.</para>
			<para>This is the strongly-typed version of System.Data.IDbDataAdapter.UpdateCommand  and System.Data.Common.DbDataAdapter.DeleteCommand.</para>
		</remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.UpdatedRowSource"/><seealso cref="T:System.Data.DataSet"/><seealso cref="P:System.Data.IDbDataAdapter.UpdateCommand"/><seealso cref="P:System.Data.Common.DbDataAdapter.DeleteCommand"/><seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.TableMappings">
            <summary>
			<para>Returns a collection that provides the master mapping between a source table and a System.Data.DataTable</para>
		</summary><value>A collection of System.Data.Common.DataTableMapping objects providing the master mapping between source tables and System.Data.DataTables. The default value is an empty collection.</value><remarks>
			<para>When reconciling changes, the ULDataAdapter uses the System.Data.Common.DataTableMappingCollection collection to associate the column names used by the data source with the column names used by the System.Data.DataSet. </para>
			<para>This is the strongly-typed version of System.Data.IDataAdapter.TableMappings.</para>
		</remarks><seealso cref="T:System.Data.DataTable"/><seealso cref="T:System.Data.Common.DataTableMapping"/><seealso cref="T:System.Data.DataTable"/><seealso cref="T:System.Data.Common.DataTableMappingCollection"/><seealso cref="T:System.Data.DataSet"/><seealso cref="P:System.Data.IDataAdapter.TableMappings"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDBValid">
            <summary>
	    <para> Enumerates the UltraLite.NET database validation methods</para>
	</summary><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.ValidateDatabase(System.String,iAnywhere.Data.UltraLite.ULDBValid)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ValidateDatabase(iAnywhere.Data.UltraLite.ULDBValid)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ValidateDatabase(iAnywhere.Data.UltraLite.ULDBValid,System.String)"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDBValid.EXPRESS_VALIDATE">
            <summary>
            <para>Do a faster, though less thorough, validation.</para>
        </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDBValid.FULL_VALIDATE">
            <summary>
            <para>Validate tables, indexes, and all database pages.</para>
        </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRuntimeType">
            <summary>
            <para><i><b>UL Ext: </b></i> Enumerates the types of UltraLite.NET runtimes.</para>
        </summary><seealso cref="P:iAnywhere.Data.UltraLite.ULDatabaseManager.RuntimeType"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULRuntimeType.STANDALONE_UL">
            <summary>
            <para>Selects the standalone UltraLite.NET runtime.</para>
            <para>The standalone runtime accesses databases directly. Databases are accessed more quickly this way, but cannot be shared.</para>
        </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULRuntimeType.UL_ENGINE_CLIENT">
            <summary>
            <para>Selects the UltraLite engine runtime.</para>
            <para>The UltraLite.NET engine client communicates with the UltraLite engine to access databases. This means that databases can be shared by different applications.</para>
        </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDatabaseManager">
            <summary>
            <para><i><b>UL Ext: </b></i> Provides static methods for creating, deleting, and validating databases.</para>
        </summary><remarks>
            <para>To use the UltraLite Engine runtime of UltraLite.NET, set ULDatabaseManager.RuntimeType to the appropriate value before using any other UltraLite.NET API.</para>
        </remarks><example>
            <para>The following example selects the UltraLite Engine runtime and creates a connection.</para>
            <code>
' Visual Basic
ULDatabaseManager.RuntimeType = ULRuntimeType.UL_ENGINE_CLIENT
Dim conn As ULConnection = new ULConnection
' The RuntimeType is now locked
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULDatabaseManager.RuntimeType = ULRuntimeType.UL_ENGINE_CLIENT;
ULConnection conn = new ULConnection();
// The RuntimeType is now locked
</code>

        </example>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseManager.DropDatabase(System.String)">
            <summary>
            <para>Deletes the specified database. </para>
            <para>You cannot drop a database that has open connections.</para>
        </summary><param name="connString">
            The parameters for identifying a database in the form of a semicolon-separated list of keyword-value pairs. 
        </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><example>
            <para>The following code creates the database \UltraLite\MyDatabase.udb on a Windows Mobile device then opens a connection to it. </para>
            <code>
' Visual Basic
Dim connParms As ULConnectionParms = New ULConnectionParms
connParms.DatabaseOnDevice = "\UltraLite\MyDatabase.udb"
ULConnection.DatabaseManager.DropDatabase( _
    connParms.ToString() _
)
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULConnectionParms connParms = new ULConnectionParms();
connParms.DatabaseOnDevice = @"\UltraLite\MyDatabase.udb";
ULConnection.DatabaseManager.DropDatabase(
    connParms.ToString()
);
ULConnection conn = new ULConnection( openParms.ToString() );
conn.Open();</code>


        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnectionParms"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseManager.CreateDatabase(System.String,System.String)">
            <summary>
            <para>Creates a new UltraLite database.</para>
        </summary><param name="connString">
            The parameters for identifying a database in the form of a semicolon-separated list of keyword-value pairs. 
        </param><param name="createParms">
            The parameters used to configure the new database in the form of a semicolon-separated list of keyword-value pairs. 
        </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><example>
            <para>The following code creates the database \UltraLite\MyDatabase.udb on a Windows Mobile device then opens a connection to it. </para>
            <code>
' Visual Basic
Dim openParms As ULConnectionParms = New ULConnectionParms
openParms.DatabaseOnDevice = "\UltraLite\MyDatabase.udb"
ULConnection.DatabaseManager.CreateDatabase( _
    openParms.ToString(), _
    "" _
)
Dim conn As ULConnection = _
    New ULConnection( openParms.ToString() )
conn.Open()
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULConnectionParms openParms = new ULConnectionParms();
openParms.DatabaseOnDevice = @"\UltraLite\MyDatabase.udb";

ULConnection.DatabaseManager.CreateDatabase(
    openParms.ToString(),
    ""
);
ULConnection conn = new ULConnection( openParms.ToString() );
conn.Open();
</code>
        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnectionParms"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCreateParms"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseManager.ValidateDatabase(System.String,iAnywhere.Data.UltraLite.ULDBValid)">
            <summary>
            <para>Performs low level and index validation on a database.</para>
        </summary><param name="start_parms">
            The parameters for identifying a database in the form of a semicolon-separated list of keyword-value pairs. 
		</param><param name="how">
		    Describes how to validate the database.
		</param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><example>
            <para>The following code validates indexes for the database \UltraLite\MyDatabase.udb under Windows Mobile:</para>
            <code>
' Visual Basic
Dim openParms As ULConnectionParms = New ULConnectionParms
openParms.DatabaseOnDevice = "\UltraLite\MyDatabase.udb"
ULConnection.DatabaseManager.ValidateDatabase( _
    openParms.ToString(), iAnywhere.Data.UltraLite.ULVF_INDEX )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULConnectionParms openParms = new ULConnectionParms();
openParms.DatabaseOnDevice = @"\UltraLite\MyDatabase.udb";
ULConnection.DatabaseManager.ValidateDatabase(
    openParms.ToString(), iAnywhere.Data.UltraLite.ULVF_INDEX );
</code>
        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ValidateDatabase(iAnywhere.Data.UltraLite.ULDBValid)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ValidateDatabase(iAnywhere.Data.UltraLite.ULDBValid,System.String)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDBValid"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnectionParms"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.Data.UltraLite.ULServerSyncListener)">
            <summary>
            <para> Specifies the listener object used to process the specified server synchronization message. </para>
        </summary><remarks>
            <para> The parameter <paramref name="appClassName"/> is the unique identifier used to identify the application. The application may only use one <paramref name="appClassName"/> at a time. While a listener is registered with a particular <paramref name="appClassName"/>, calls to SetServerSyncListener or SetActiveSyncListener with a different <paramref name="appClassName"/> fail.</para>
            <para>To remove the listener for a particular message, call SetServerSyncListener with a null reference (Nothing in Visual Basic) as the <paramref name="listener"/> parameter.</para>
            <para> To remove all listeners, call SetServerSyncListener with a null reference (Nothing in Visual Basic) for all parameters. </para>
            <para> Applications should remove all listeners before exiting.</para>
        </remarks><param name="messageName">
            The name of the message. 
        </param><param name="appClassName">
            The unique class name for the application. This is a unique identifier used to identify the application. 
        </param><param name="listener">
            The ULServerSyncListener object. Use null (Nothing in Visual Basic) to remove the previous listener. 
        </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.Data.UltraLite.ULServerSyncListener)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetActiveSyncListener(System.String,iAnywhere.Data.UltraLite.ULActiveSyncListener)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULServerSyncListener.ServerSyncInvoked(System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SignalSyncIsComplete">
            <summary>
            Signals the MobiLink provider for ActiveSync that an application has completed synchronization. 
        </summary><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SignalSyncIsComplete"/><seealso cref="M:iAnywhere.Data.UltraLite.ULActiveSyncListener.ActiveSyncInvoked(System.Boolean)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetActiveSyncListener(System.String,iAnywhere.Data.UltraLite.ULActiveSyncListener)">
            <summary>
            <para> Specifies the listener object used to process ActiveSync calls from the MobiLink provider for ActiveSync. </para>
        </summary><remarks>
            <para>The parameter <paramref name="appClassName"/> is the unique identifier used to identify the application. The application can only use one <paramref name="appClassName"/> at a time. While a listener is registered with a particular <paramref name="appClassName"/>, calls to SetServerSyncListener or SetActiveSyncListener with a different <paramref name="appClassName"/> fail. </para>
            <para>To remove the ActiveSync listener, call SetActiveSyncListener with a null reference (Nothing in Visual Basic) as the <paramref name="listener"/> parameter.</para>
            <para> To remove all listeners, call SetServerSyncListener with a null reference (Nothing in Visual Basic) for all parameters. </para>
            <para> Applications should remove all listeners prior to exiting.</para>
        </remarks><param name="appClassName">
            The unique class name for the application. This is the class name used when the application is registered for use with ActiveSync. 
        </param><param name="listener">
            The ULActiveSyncListener object. Use null (Nothing in Visual Basic) to remove the previous listener. 
        </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.Data.UltraLite.ULServerSyncListener)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetActiveSyncListener(System.String,iAnywhere.Data.UltraLite.ULActiveSyncListener)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULActiveSyncListener"/><seealso cref="M:iAnywhere.Data.UltraLite.ULActiveSyncListener.ActiveSyncInvoked(System.Boolean)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDatabaseManager.RuntimeType">
            <summary>
            <para>Specifies the UltraLite.NET runtime type. The runtime type must be selected before using any other UltraLite.NET API. </para>
        </summary><value>A ULRuntimeType value identifying the type of the unmanaged UltraLite.NET runtime.</value><example>
            <para>The following example selects the UltraLite Engine runtime and creates a connection.</para>
            <code>
' Visual Basic
ULDatabaseManager.RuntimeType = ULRuntimeType.UL_ENGINE_CLIENT
Dim conn As ULConnection = new ULConnection
' The RuntimeType is now locked
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULDatabaseManager.RuntimeType = ULRuntimeType.UL_ENGINE_CLIENT;
ULConnection conn = new ULConnection();
// The RuntimeType is now locked
</code>

        </example><seealso cref="T:iAnywhere.Data.UltraLite.ULRuntimeType"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDatabaseSchema">
            <summary>
            <para> <i><b>UL Ext: </b></i> Represents the schema of an UltraLite.NET database. </para>
        </summary><remarks>
            <para> There is no constructor for this class. A ULDatabaseSchema object is attached to a connection as its ULConnection.Schema and is only valid while that connection is open. </para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULDatabaseSchema"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.Schema"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetDatabaseProperty(System.String)">
            <summary>
            <para>Returns the value of the specified database property. </para>
        </summary><remarks>
            <para> Recognized properties are: </para>
            <list type="table">
            <listheader>
                <term>Property</term> <term>Description</term> 
            </listheader>
            <item>
            <term>CaseSensitive</term> <term> 
            The status of the case sensitivity feature. Returns ON if the database is case sensitive. Otherwise, it returns OFF.
            Database case sensitivity affects how indexes on tables and result sets are sorted.
            Case sensitivity does not affect how a connection's ULConnectionParms.UserID and ULConnectionParms.Password are verified. User IDs are always case insensitive and passwords are always case sensitive.
            </term> 
            </item>
            <item>
            <term>CharSet</term> <term> 
            The character set of the database.
            </term> 
            </item>
            <item>
            <term>ChecksumLevel</term> <term> 
            The level of database page checksums enabled for the database.
            </term> 
            </item>
            <item>
            <term>Collation</term> <term> 
            The name of the database's collation sequence.
            </term> 
            </item>
            <item>
            <term>ConnCount</term> <term> 
            The number of connections to the database.
            </term> 
            </item>
            <item>
            <term>date_format</term> <term> 
            The date format used for string conversions by the database.
            This format is not necessarily the same as the one used by System.DateTime.
            </term> 
            </item>
            <item>
            <term>date_order</term> <term> 
            The date order used for string conversions by the database.
            </term> 
            </item>
            <item>
            <term>Encryption</term> <term> 
            The type of encryption applied to the database. Returns None, Simple, AES, or AES_FIPS.
            </term> 
            </item>
            <item>
            <term>File</term> <term> 
            The file name of the database.
            </term> 
            </item>
            <item>
            <term>global_database_id</term> <term> 
            The value of the global_database_id option used for global autoincrement columns.
            </term> 
            </item>
            <item>
            <term>isolation_level</term> <term> 
            The value of the isolation_level option used for controlling the degree to which the operations in one transaction are visible to the operations in other concurrent transactions.
            This value is set on a per connection basis.
            </term> 
            </item>
            <item>
            <term>MaxHashSize</term> <term> 
            The default maximum number of bytes to use for index hashing. This property can be set on a per-index basis.
            </term> 
            </item>
            <item>
            <term>ml_remote_id</term> <term> 
            The value of the ml_remote_id option used for identifying the database during synchronization.
            </term> 
            </item>
            <item>
            <term>Name</term> <term> 
            The name of the database (DBN).
            </term> 
            </item>
            <item>
            <term>nearest_century </term> <term> 
            The nearest century used for string conversions by the database.
            </term> 
            </item>
            <item>
            <term>PageSize</term> <term> 
            The page size of the database, in bytes.
            </term> 
            </item>
            <item>
            <term>precision</term> <term> 
            The floating-point precision used for string conversions by the database.
            </term> 
            </item>
            <item>
            <term>scale</term> <term> 
            The minimum number of digits after the decimal point when an arithmetic result is truncated to the maximum PRECISION during string conversions by the database.
            </term> 
            </item>
            <item>
            <term>time_format</term> <term> 
            The time format used for string conversions by the database.
            This format is not necessarily the same as the one used by System.TimeSpan.
            </term> 
            </item>
            <item>
            <term>timestamp_format</term> <term> 
            The timestamp format used for string conversions by the database.
            This format is not necessarily the same as the one used by System.DateTime.
            </term> 
            </item>
            <item>
            <term>timestamp_increment</term> <term> 
            The minimum difference between two unique timestamps, in microseconds (1,000,000th of a second).
            </term> 
            </item>
            </list>
        </remarks><param name="name">
            The name of the database property whose value you want to obtain. Property names are case insensitive. 
        </param><returns>
        The value of the property as a string. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.SetDatabaseOption(System.String,System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.UserID"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.Password"/><seealso cref="T:System.TimeSpan"/><seealso cref="T:System.DateTime"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetPublicationName(System.Int32)">
            <summary>
            <para> Returns the name of the publication identified by the specified publication ID. </para>
        </summary><remarks>
            <para><em>Note:</em> Publication IDs and counts may change during a schema upgrade. To correctly identify a publication, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
        </remarks><param name="pubID">
            The ID of the publication. The value must be in the range [1,PublicationCount]. 
        </param><returns>
        The publication name as a string. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.PublicationCount"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.PublicationCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetTableName(System.Int32)">
            <summary>
            <para> Returns the name of the table identified by the specified table ID. </para>
        </summary><remarks>
            <para> Table IDs may change during a schema upgrade. To correctly identify a table, access it by name or refresh the cached IDs after a schema upgrade. </para>
        </remarks><param name="tableID">
            The ID of the table. The value must be in range [1,TableCount]. 
        </param><returns>
        The table name as a string. 
        </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.TableCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.SetDatabaseOption(System.String,System.String)">
            <summary>
            <para>Sets the value for the specified database option. </para>
        </summary><remarks>
            <para>Setting a database option results in a commit being performed.</para>
            <para> Recognized options are: </para>
            <list type="table">
            <listheader>
                <term>Option</term> <term>Description</term> 
            </listheader>
            <item>
            <term>global_database_id</term> <term> 
            The value used for global autoincrement columns. The value must be in the range [0,System.UInt32.MaxValue]. The default is ULConnection.INVALID_DATABASE_ID (used to indicate that the database ID has not been set for the current database).
            </term> 
            </item>
            <item>
            <term>isolation_level</term> <term> 
            The value used to control the degree to which the operations in one transaction are visible to the operations in other concurrent transactions. The value must be one of "read_uncommitted" or "read_committed". The default is "read_committed".
            Setting the isolation_level on a connection to "read_uncommited" is equivalent to wrapping all operations on that connection with BeginTransaction(System.Data.IsolationLevel.ReadUncommitted) and Commit() calls. Similarly, "read_committed" is equivalent to System.Data.IsolationLevel.ReadCommitted. SetDatabaseOption() should not be used to set the current transaction's isolation level; use BeginTransaction(IsolationLevel) instead.
            UltraLite's definition of each isolation level is slightly different than ADO.NET's documentation of IsolationLevel. For more information, see @olink targetdoc="uladmin" targetptr="isolationlevels"@Isolation Levels@/olink@.
            This value is set on a per connection basis.
            </term> 
            </item>
            <item>
            <term>ml_remote_id</term> <term> 
            The value used for identifying the database during synchronization. Use a null reference (Nothing in Visual Basic) as the value to remove the ml_remote_id option from the database.
            </term> 
            </item>
            </list>
        </remarks><param name="name">
            The name of the database option. Option names are case insensitive. 
        </param><param name="value">
            The new value for the option. 
        </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetDatabaseProperty(System.String)"/><seealso cref="F:iAnywhere.Data.UltraLite.ULConnection.INVALID_DATABASE_ID"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction(System.Data.IsolationLevel)"/><seealso cref="F:System.UInt32.MaxValue"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.IsCaseSensitive">
            <summary>
            <para> Checks whether the database is case sensitive. </para>
        </summary><value>True if the database is case sensitive, and false if the database is case insensitive. </value><remarks>
            <para> Database case sensitivity affects how indexes on tables and result sets are sorted. Case sensitivity also affects how ULConnectionParms.UserID and ULConnectionParms.Password are verified. </para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            A SQL error occurred. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetDatabaseProperty(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.UserID"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.Password"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.IsOpen">
            <summary>
            <para> Whether the database schema is open. </para>
        </summary><value>True if this database schema is currently open, false if this database schema is currently closed. </value><remarks>
            <para>A ULDatabaseSchema object is open only if the connection it is attached to is open.</para>
        </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.PublicationCount">
            <summary>
            <para> The number of publications in the database.</para>
        </summary><value>The number of publications in the database.</value><remarks>
            <para> Publication IDs range from 1 to PublicationCount, inclusively.</para>
            <para><em>Note:</em> Publication IDs and counts may change during a schema upgrade. To correctly identify a publication, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetPublicationName(System.Int32)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.TableCount">
            <summary>
            <para>The number of tables in the database. </para>
        </summary><value>The number of tables in the database.</value><remarks>
            <para> Table IDs range from 1 to TableCount, inclusively. </para>
            <para> <em>Note:</em> Table IDs and counts may change during a schema upgrade. To correctly identify a table, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
        </remarks>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDataReader">
            <summary>
			<para> Represents a read-only bi-directional cursor in an UltraLite database. Cursors are sets of rows from either a table or the result set from a query. </para>
		</summary><remarks>
			<para>There is no constructor for ULDataReader. To get a ULDataReader object, execute a ULCommand:</para>
			<code>
' Visual Basic
Dim cmd As ULCommand = new ULCommand( _
    "SELECT emp_id FROM employee", conn _
)
Dim reader As ULDataReader = cmd.ExecuteReader()
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULCommand cmd = new ULCommand(
    "SELECT emp_id FROM employee", conn
);
ULDataReader reader = cmd.ExecuteReader();
</code>
			<para><i><b>UL Ext: </b></i> The ADO.NET standard only requires forward-only motion through the result set, but ULDataReader is bi-directional. ULDataReader's Move methods provide you with full flexibility when moving through results. </para>
			<para> ULDataReader is a read-only result set. If you need a more flexible object to manipulate results, use a ULCommand.ExecuteResultSet(), ULCommand.ExecuteTable(), or a ULDataAdapter. ULDataReader retrieves rows as needed, whereas ULDataAdapter must retrieve all rows of a result set before you can carry out any action on the object. For large result sets, this difference gives the ULDataReader a much faster response time. </para>
			<para><i><b>UL Ext: </b></i> All columns of a ULDataReader may be retrieved using GetString.</para>

		</remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteResultSet"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataAdapter"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetString(System.Int32)"/><seealso cref="T:System.Data.Common.DbDataReader"/><seealso cref="T:System.Data.IDataReader"/><seealso cref="T:System.Data.IDataRecord"/><seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.Close">
            <summary>
			<para> Closes the cursor. </para>
		</summary><remarks>
			<para> It is not an error to close a cursor that is already closed. </para>
		</remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.Validate">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.Validate(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetDbDataReader(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetDataTypeName(System.Int32)">
            <summary>
			<para> Returns the name of the specified column's provider data type.</para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		<para>A string corresponding to the column's ULDbType.</para>
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDbType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)">
            <summary>
			<para> Returns the System.Type most appropriate for the specified column.</para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		<para>A System.Type value for the column.</para>
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetDataTypeName(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Type"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetName(System.Int32)">
            <summary>
			<para> Returns the name of the specified column.</para>
		</summary><remarks>
			<para>Note that in result sets, not all columns have names and not all column names are unique. If you are not using aliases, the name of a non-computed column is prefixed with the name of the table the column is from. For example, MyTable.ID is the name of the only column in the result set for the query "SELECT ID FROM MyTable".</para>
			<para>This method is identical to the ULCursorSchema.GetColumnName method.</para>
		</remarks><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The name of the column or a null reference (Nothing in Visual Basic) if the column has no name. If the column is aliased in the SQL query, the alias is returned. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetSchemaTable"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnName(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)">
            <summary>
			<para> Returns the column ID of the named column. </para>
		</summary><remarks>
			<para> Column IDs range from 0 to ULDataReader.FieldCount-1, inclusively. </para>
			<para>Note that in result sets, not all columns have names and not all column names are unique. If you are not using aliases, the name of a non-computed column is prefixed with the name of the table the column is from. For example, MyTable.ID is the name of the only column in the result set for the query "SELECT ID FROM MyTable".</para>
			<para> Column IDs and counts may change during a schema upgrade. To correctly identify a column, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
			<para>This method is identical to the ULCursorSchema.GetColumnID method.</para>
		</remarks><param name="columnName">
			The name of the column. 
		</param><returns>
		The column ID of the named column. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetSchemaTable"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnID(System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetSchemaTable">
            <summary>
			<para> Returns a System.Data.DataTable that describes the column metadata of the ULDataReader. </para>
		</summary><remarks>
			<para>The GetSchemaTable method returns metadata about each column in the following order: </para>
			<list type="table">
			<listheader>
				<term>DataTable column</term> <term>Description</term> 
			</listheader>
			<item>
			<term>ColumnName</term> <term>The name of the column or a null reference (Nothing in Visual Basic) if the column has no name. If the column is aliased in the SQL query, the alias is returned. Note that in result sets, not all columns have names and not all column names are unique. </term> 
			</item>
			<item>
			<term>ColumnOrdinal</term> <term>The ID of the column. The value is in the range [0,FieldCount-1].</term> 
			</item>
			<item>
			<term>ColumnSize</term> <term>For sized columns, the maximum length of a value in the column. For other columns, this is the size in bytes of the data type.</term> 
			</item>
			<item>
			<term>NumericPrecision</term> <term>The precision of a numeric column (ProviderType ULDbType.Decimal or ULDbType.Numeric) or DBNull if the column is not numeric.</term> 
			</item>
			<item>
			<term>NumericScale</term> <term>The scale of a numeric column (ProviderType ULDbType.Decimal or ULDbType.Numeric) or DBNull if the column is not numeric.</term> 
			</item>
			<item>
			<term>IsUnique</term> <term>True if the column is a non-computed unique column in the table (BaseTableName) it is taken from.</term> 
			</item>
			<item>
			<term>IsKey</term> <term>True if the column is one of a set of columns in the result set that taken together from a unique key for the result set. The set of columns with IsKey set to true does not need to be the minimal set that uniquely identifies a row in the result set. </term> 
			</item>
			<item>
			<term>BaseCatalogName</term> <term>The name of the catalog in the database that contains the column. For UltraLite.NET, this value is always DBNull.</term> 
			</item>
			<item>
			<term>BaseColumnName</term><term>The original name of the column in the table BaseTableName of the database or DBNull if the column is computed or if this information cannot be determined.</term> 
			</item>
			<item>
			<term>BaseSchemaName</term> <term>The name of the schema in the database that contains the column. For UltraLite.NET, this value is always DBNull.</term> 
			</item>
			<item>
			<term>BaseTableName</term> <term>The name of the table in the database that contains the column, or DBNull if column is computed or if this information cannot be determined.</term> 
			</item>
			<item>
			<term>DataType</term> <term>The .NET data type that is most appropriate for this type of column.</term> 
			</item>
			<item>
			<term>AllowDBNull</term> <term>True if the column is nullable, false if the column is not nullable or if this information cannot be determined. </term> 
			</item>
			<item>
			<term>ProviderType</term> <term>The ULDbType of the column.</term> 
			</item>
			<item>
			<term>IsIdentity</term> <term>True if the column is an identity column, false if it is not an identity column. For UltraLite.NET, this value is always false.</term> 
			</item>
			<item>
			<term>IsAutoIncrement</term> <term>True if the column is an autoincrement or global autoincrement column, false otherwise (or if this information cannot be determined).</term> 
			</item>
			<item>
			<term>IsRowVersion</term> <term>True if the column contains a persistent row identifier that cannot be written to, and has no meaningful value except to identity the row. For UltraLite.NET, this value is always false.</term> 
			</item>
			<item>
			<term>IsLong</term> <term>True if the column is a ULDbType.LongVarchar or a ULDbType.LongBinary column, false otherwise.</term> 
			</item>
			<item>
			<term>IsReadOnly</term> <term>True if the column is read-only, false if the column is modifiable or if its access cannot be determined.</term> 
			</item>
			<item>
			<term>IsAliased </term> <term>True if the column name is an alias, false if it is not an alias.</term> 
			</item>
			<item>
			<term>IsExpression </term> <term>True if the column is an expression, false if it is a column value.</term> 
			</item>
			</list>
		</remarks><returns>
		<para>A System.Data.DataTable describing the schema of each column in the ULDataReader.</para>
		</returns><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.Decimal"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.Numeric"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDbType"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.LongVarchar"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.LongBinary"/><seealso cref="T:System.Data.DataTable"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetBoolean(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as a System.Boolean. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as a System.Boolean. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Boolean"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetByte(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as an unsigned 8-bit value (System.Byte).</para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as a System.Byte. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Byte"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetBytes(System.Int32)">
            <summary>
			<para> <i><b>UL Ext: </b></i> Returns the value for the specified column as an array of System.Bytes. Only valid for columns of type ULDbType.Binary, ULDbType.LongBinary, or ULDbType.UniqueIdentifier. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as an array of System.Bytes. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.Binary"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.LongBinary"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.UniqueIdentifier"/><seealso cref="T:System.Byte"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
			<para>Copies a subset of the value for the specified ULDbType.LongBinary column, beginning at the specified offset, to the specified offset of the destination System.Byte array. </para>
		</summary><remarks>
			<para> If you pass a <paramref name="dst"/> buffer that is a null reference (Nothing in Visual Basic), GetBytes returns the length of the field in bytes.</para>
			<para>The bytes at position <paramref name="srcOffset"/> through <paramref name="srcOffset"/>+<paramref name="count"/>-1 of the value are copied into positions <paramref name="dstOffset"/> through <paramref name="dstOffset"/>+<paramref name="count"/>-1, respectively, of the destination array. If the end of the value is encountered before <paramref name="count"/> bytes are copied, the remainder of the destination array is left unchanged. </para>
			<para> If any of the following is true, a ULException with code ULSQLCode.SQLE_INVALID_PARAMETER is thrown and the destination is not modified: </para>
			<list type="bullet">
			<item>
			<paramref name="srcOffset"/> is negative.
			</item>
			<item>
			<paramref name="dstOffset"/> is negative.
			</item>
			<item>
			<paramref name="count"/> is negative.
			</item>
			<item>
			<paramref name="dstOffset"/>+<paramref name="count"/> is greater than the <paramref name="dst"/> length.
			</item>
			</list>
			<para> For other errors, a ULException with the appropriate error code is thrown. </para>
		</remarks><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><param name="srcOffset">
			The start position in the column value. Zero is the beginning of the value. 
		</param><param name="dst">
			The destination array. 
		</param><param name="dstOffset">
			The start position in the destination array. 
		</param><param name="count">
			The number of bytes to be copied. 
		</param><returns>
		The actual number of bytes copied. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetBytes(System.Int32)"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.LongBinary"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_PARAMETER"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Byte"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetChar(System.Int32)">
            <summary>
			<para> This method is not supported in UltraLite.NET.</para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		This method is not supported in UltraLite.NET. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			This method is not supported in UltraLite.NET. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetString(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
			<para>Copies a subset of the value for the specified ULDbType.LongVarchar column, beginning at the specified offset, to the specified offset of the destination System.Char array. </para>
		</summary><remarks>
			<para> If you pass a <paramref name="dst"/> buffer that is a null reference (Nothing in Visual Basic), GetChars returns the length of the field in characters.</para>
			<para> The characters at position <paramref name="srcOffset"/> through <paramref name="srcOffset"/>+<paramref name="count"/>-1 of the value are copied into positions <paramref name="dstOffset"/> through <paramref name="dstOffset"/>+<paramref name="count"/>-1, respectively, of the destination array. If the end of the value is encountered before <paramref name="count"/> characters are copied, the remainder of the destination array is left unchanged. </para>
			<para> If any of the following is true, a ULException with code ULSQLCode.SQLE_INVALID_PARAMETER is thrown and the destination is not modified: </para>
			<list type="bullet">
			<item>
			<paramref name="srcOffset"/> is negative.
			</item>
			<item>
			<paramref name="dstOffset"/> is negative.
			</item>
			<item>
			<paramref name="count"/> is negative.
			</item>
			<item>
			<paramref name="dstOffset"/>+<paramref name="count"/> is greater than the <paramref name="dst"/> length.
			</item>
			</list>
			<para> For other errors, a ULException with the appropriate error code is thrown. </para>
		</remarks><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><param name="srcOffset">
			The start position in the column value. Zero is the beginning of the value. 
		</param><param name="dst">
			The destination array. 
		</param><param name="dstOffset">
			The start position in the destination array. 
		</param><param name="count">
			The number of characters to be copied. 
		</param><returns>
		The actual number of characters copied. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.LongVarchar"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_PARAMETER"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Char"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetDateTime(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as a System.DateTime with millisecond accuracy. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as a System.DateTime. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.DateTime"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetDecimal(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as a System.Decimal.</para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as a System.Decimal. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Decimal"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetDouble(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as a System.Double. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as a System.Double. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Double"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetFloat(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as a System.Single. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as a System.Single. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Single"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetGuid(System.Int32)">
            <summary>
			<para>Returns the value for the specified column as a UUID (System.Guid). </para>
		</summary><remarks>
			<para>This method is only valid for columns of type ULDbType.UniqueIdentifier or for columns of type ULDbType.Binary with length 16. </para>
		</remarks><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as a Guid. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnSize(System.Int32)"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.UniqueIdentifier"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.Binary"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Guid"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetInt16(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as a System.Int16. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as an System.Int16. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Int16"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetInt32(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as an Int32. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as an Int32. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Int32"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetInt64(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as an Int64. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
			The column value as an Int64. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Int64"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetString(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as a System.String. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as a System.String. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.String"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetTimeSpan(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as a System.TimeSpan with millisecond accuracy. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as a System.TimeSpan. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.TimeSpan"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetUInt16(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as a System.UInt16. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as an System.UInt16. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.UInt16"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetUInt32(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as a UInt32. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as an UInt32. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.UInt32"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetUInt64(System.Int32)">
            <summary>
			<para> Returns the value for the specified column as a System.UInt64. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		The column value as a System.UInt64 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.UInt64"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetValue(System.Int32)">
            <summary>
			<para> Returns the value of the specified column in its native format.</para>
		</summary><remarks>
			<para>This method is identical in functionality to the ULDataReader.this[int].</para>
		</remarks><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		<para>The column value as the .NET type most appropriate for the column or DBNull if column is NULL.</para>
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Item(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetValues(System.Object[])">
            <summary>
			<para> Returns all the column values for the current row.</para>
		</summary><remarks>
			<para>For most applications, the GetValues method provides an efficient means for retrieving all columns, rather than retrieving each column individually.</para>
			<para> You can pass an System.Object array that contains fewer than the number of columns contained in the resulting row. Only the amount of data the System.Object array holds is copied to the array. You can also pass an System.Object array whose length is more than the number of columns contained in the resulting row.</para>
			<para> This method returns DBNull for NULL database columns. For other columns, it returns the value of the column in its native format. </para>
		</remarks><param name="values">
			The array of System.Objects to hold the entire row. 
		</param><returns>
		<para>The number of column values retrieved. If the length of the array is greater than the number of columns (ULDataReader.FieldCount), only FieldCount items are retrieved and the rest of the array is left unchanged.</para>
		</returns><exception cref="T:System.ArgumentNullException">
			<para>The <paramref name="values"/> array is NULL or has zero length.</para>
		</exception><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetValue(System.Int32)"/><seealso cref="T:System.Object"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.IsDBNull(System.Int32)">
            <summary>
			<para> Checks whether the value from the specified column is NULL. </para>
		</summary><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		True if value is NULL, false if value is not NULL. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.NextResult">
            <summary>
			<para>Advances the ULDataReader to the next result when reading the results of batch SQL statements. </para>
		</summary><remarks>
			<para><i><b>UL Ext: </b></i> UltraLite.NET does not support batches of SQL statements, hence the ULDataReader is always positioned on the first and only result set. Calling NextResult has no effect.</para>
		</remarks><returns>
		<para>True if there are more result sets, false otherwise. For UltraLite.NET, always returns false.</para>
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			The ULDataReader is not opened. 
		</exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.Read">
            <summary>
			<para>Positions the cursor to the next row, or after the last row if the cursor was already on the last row. </para>
		</summary><remarks>
			<para>This method is identical to the ULDataReader.MoveNext method.</para>
		</remarks><returns>
		True if successful, false otherwise. For example, the method fails if there are no more rows. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.MoveNext"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetEnumerator">
            <summary>
			<para>Returns an System.Collections.IEnumerator that iterates through the ULDataReader.</para>
		</summary><returns>
		<para>A System.Collections.IEnumerator for the ULDataReader.</para>
		</returns><seealso cref="T:System.Collections.IEnumerator"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetRowCount(System.Int32)">
            <summary>
			<para><i><b>UL Ext: </b></i> Returns the number of rows in the cursor, within threshold. </para>
		</summary><value>The number of rows in the cursor.</value><param name="threshold">Threshold limit for row count.</param><remarks>
			<para>The property RowCount is expensive with complex queries, as it requires passing through the cursor rows.
			By using GetRowCount( threshold ), the caller can determine if there are at least threshold rows.
			If the number of rows is below the threshold, that number is returned; otherwise, threshold is returned.
			This can be called again with a higher threshold. </para>
			<para> If threshold is 0, returns the RowCount property. </para>
		</remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.RowCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MoveBeforeFirst">
            <summary>
			<para><i><b>UL Ext: </b></i> Positions the cursor to before the first row of the cursor. </para>
		</summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MoveAfterLast">
            <summary>
			<para><i><b>UL Ext: </b></i> Positions the cursor to after the last row of the cursor. </para>
		</summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MoveFirst">
            <summary>
			<para><i><b>UL Ext: </b></i> Positions the cursor to the first row of the cursor. </para>
		</summary><returns>
		True if successful, false otherwise. For example, the method fails if there are no rows. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MoveLast">
            <summary>
			<para><i><b>UL Ext: </b></i> Positions the cursor to the last row of the cursor. </para>
		</summary><returns>
		True if successful, false otherwise. For example, the method fails if there are no rows. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MoveNext">
            <summary>
			<para><i><b>UL Ext: </b></i> Positions the cursor to the next row or after the last row if the cursor was already on the last row. </para>
		</summary><remarks>
			<para>This method is identical to the ULDataReader.Read method.</para>
		</remarks><returns>
		True if successful, false otherwise. For example, the method fails if there are no more rows. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.Read"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MovePrevious">
            <summary>
			<para><i><b>UL Ext: </b></i> Positions the cursor to the previous row or before the first row. </para>
		</summary><returns>
		True if successful, false otherwise. For example, the method fails if there are no more rows. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MoveRelative(System.Int32)">
            <summary>
			<para><i><b>UL Ext: </b></i> Positions the cursor relative to the current row. </para>
		</summary><remarks>
			<para> If the row does not exist, the method returns false, and the cursor position is after the last row (ULDataReader.IsEOF) if <paramref name="offset"/> is positive, and before the first row (ULDataReader.IsBOF) if the <paramref name="offset"/> is negative. </para>
		</remarks><param name="offset">
			The number of rows to move. Negative values correspond to moving backward. 
		</param><returns>
		True if successful, false otherwise. For example, the method fails if it positions beyond the first or last row. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.Depth">
            <summary>
			<para> Returns the depth of nesting for the current row. The outermost table has a depth of zero. </para>
		</summary><value> All UltraLite.NET result sets have a depth of zero. </value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			The ULDataReader is not opened. 
		</exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount">
            <summary>
			<para> Returns the number of columns in the cursor.</para>
		</summary><remarks>
			<para>This method is identical to the ULCursorSchema.ColumnCount method.</para>
		</remarks><returns>
		<para>The number of columns in the cursor as an integer. Returns 0 if the cursor is closed.</para>
		</returns><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.HasRows">
            <summary>
			<para>Checks whether the ULDataReader has one or more rows.</para>
		</summary><value>True if the result set has at least one row, false if there are no rows.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.IsClosed">
            <summary>
			<para>Checks whether the cursor is currently open. </para>
		</summary><value>True if the cursor is currently open, false if the cursor is closed. </value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.RecordsAffected">
            <summary>
			<para>Returns the number of rows changed, inserted, or deleted by execution of the SQL statement. For SELECT statements or CommandType.TableDirect tables, this value is -1.</para>
		</summary><value>The number of rows changed, inserted, or deleted by execution of the SQL statement. </value><seealso cref="T:System.Data.CommandType"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.Item(System.Int32)">
            <summary>
			<para> Returns the value of the specified column in its native format. In C#, this property is the indexer for the ULDataReader class.</para>
		</summary><remarks>
			<para>This method is identical in functionality to the ULDataReader.GetValue(int) method.</para>
		</remarks><param name="colID">
			The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		</param><returns>
		<para>The column value as the .NET type most appropriate for the column or DBNull if column is NULL.</para>
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Item(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetValue(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.Item(System.String)">
            <summary>
			<para> Returns the value of the specified named column in its native format. In C#, this property is the indexer for the ULDataReader class.</para>
		</summary><remarks>
			<para>Note that in result sets, not all columns have names and not all column names are unique. If you are not using aliases, the name of a non-computed column is prefixed with the name of the table the column is from. For example, MyTable.ID is the name of the only column in the result set for the query "SELECT ID FROM MyTable".</para>
			<para>When accessing columns multiple times, it is more efficient to access columns by column ID than by name.</para>
			<para>This method is equivalent to:</para>
			<code>dataReader.GetValue( dataReader.GetOrdinal( name ) )</code>

		</remarks><param name="name">
			The name of the column. 
		</param><returns>
		<para>The column value as the .NET type most appropriate for the column or DBNull if column is NULL.</para>
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Item(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetValue(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.RowCount">
            <summary>
			<para><i><b>UL Ext: </b></i> Returns the number of rows in the cursor. </para>
		</summary><value>The number of rows in the cursor.</value><remarks>
			<para> One use for RowCount is to decide when to delete old rows to save space. Old rows can be deleted from the UltraLite database without being deleted from the consolidated database using the ULConnection.StopSynchronizationDelete method. </para>
		</remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.StartSynchronizationDelete"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.StopSynchronizationDelete"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.Schema">
            <summary>
			<para><i><b>UL Ext: </b></i> Holds the schema of this cursor.</para>
		</summary><value>For result sets, the ULResultSetSchema object representing the schema of the result set. For tables, the ULTableSchema object representing the schema of the table.</value><remarks>
			<para>This property represents the complete schema of the cursor, including UltraLite.NET extended information which is not represented in the results from ULDataReader.GetSchemaTable.</para>
		</remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULTableSchema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetSchemaTable"/><seealso cref="T:iAnywhere.Data.UltraLite.ULResultSetSchema"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF">
            <summary>
			<para><i><b>UL Ext: </b></i> Checks whether the current row position is before the first row. </para>
		</summary><value>True if the current row position is before the first row, false otherwise.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF">
            <summary>
			<para><i><b>UL Ext: </b></i> Checks whether the current row position is after the last row. </para>
		</summary><value>True if the current row position is after the last row, false otherwise.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDateTime">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDbType">
            <summary>
			<para> Enumerates the UltraLite.NET database data types. </para>
		</summary><remarks>
			<para>The table below lists which .NET types are compatible with each ULDbType. In the case of integral types, table columns can always be set using smaller integer types, but can also be set using larger types as long as the actual value is within the range of the type.</para>
			<list type="table">
			<listheader>
				<term>ULDbType</term><term>Compatible .NET type</term> <term>C# built-in type</term>	<term>Visual Basic built-in type</term> 
			</listheader>
			<item>
			<term><b>Binary</b>, <b>VarBinary</b></term>	<term>System.Byte[], or System.Guid if size is 16</term> <term>byte[]</term> <term>Byte()</term> 
			</item>
			<item>
			<term><b>Bit</b></term> <term>System.Boolean</term> <term>bool</term> <term>Boolean</term> 
			</item>
			<item>
			<term><b>Char</b>, <b>VarChar</b></term> <term>System.String</term> <term>String</term> <term>String</term> 
			</item>
			<item>
			<term><b>Date</b></term> <term>System.DateTime</term> <term>DateTime (no built-in type)</term> <term>Date</term> 
			</item>
			<item>
			<term><b>Double</b></term>	<term>System.Double</term> <term>double</term> <term>Double</term> 
			</item>
			<item>
			<term><b>LongBinary</b></term>	<term>System.Byte[]</term> <term>byte[]</term> <term>Byte()</term> 
			</item>
			<item>
			<term><b>LongVarchar</b></term> <term>System.String</term> <term>String</term> <term>String</term> 
			</item>
			<item>
			<term><b>Decimal</b>, <b>Numeric</b></term>	<term>System.String</term> <term>decimal</term> <term>Decimal</term> 
			</item>
			<item>
			<term><b>Float</b>, <b>Real</b></term> <term>System.Single</term> <term>float</term> <term>Single</term> 
			</item>
			<item>
			<term><b>BigInt</b></term>	<term>System.Int64</term> <term>long</term> <term>Long</term> 
			</item>
			<item>
			<term><b>Integer</b></term>	<term>System.Int32</term> <term>int</term> <term>Integer</term> 
			</item>
			<item>
			<term><b>SmallInt</b></term>	<term>System.Int16</term> <term>short</term> <term>Short</term> 
			</item>
			<item>
			<term><b>STGeometry</b></term>	<term>System.String</term> <term>String</term> <term>String</term> 
			</item>
			<item>
			<term><b>Time</b></term> <term>System.TimeSpan</term> <term>TimeSpan (no built-in type)</term>	<term>TimeSpan (no built-in type)</term> 
			</item>
			<item>
			<term><b>DateTime</b>, <b>TimeStamp</b></term>	<term>System.DateTime</term> <term>DateTime (no built-in type)</term> <term>Date</term> 
			</item>
			<item>
			<term><b>TimeStampWithTimeZone</b></term>	<term>System.String</term> <term>String</term> <term>String</term> 
			</item>
			<item>
			<term><b>TinyInt</b></term> <term>System.Byte</term> <term>byte</term> <term>Byte</term> 
			</item>
			<item>
			<term><b>UnsignedBigInt</b></term>	<term>System.UInt64</term> <term>ulong</term> <term>UInt64 (no built-in type)</term> 
			</item>
			<item>
			<term><b>UnsignedInt</b></term>	<term>System.UInt32</term> <term>uint</term> <term>UInt32 (no built-in type)</term> 
			</item>
			<item>
			<term><b>UnsignedSmallInt</b></term>	<term>System.UInt16</term> <term>ushort</term> <term>UInt16 (no built-in type)</term> 
			</item>
			<item>
			<term><b>UniqueIdentifier</b></term> <term>System.Guid</term> <term>Guid (no built-in type)</term> <term>Guid (no built-in type)</term> 
			</item>
			</list>
			<para> Binary columns of length 16 are fully compatible with the UniqueIdentifier type.</para>
		</remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetDataTypeName(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/><seealso cref="T:System.Byte"/><seealso cref="T:System.Guid"/><seealso cref="T:System.Boolean"/><seealso cref="T:System.String"/><seealso cref="T:System.DateTime"/><seealso cref="T:System.Single"/><seealso cref="T:System.Int64"/><seealso cref="T:System.Int32"/><seealso cref="T:System.Int16"/><seealso cref="T:System.TimeSpan"/><seealso cref="T:System.UInt64"/><seealso cref="T:System.UInt32"/><seealso cref="T:System.UInt16"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.BigInt">
            <summary>
			<para>Signed 64-bit integer.</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Binary">
            <summary>
			<para>Binary data, with a specified maximum length. The enumeration values <b>Binary</b> and <b>VarBinary</b> are aliases of each other.</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Bit">
            <summary>
			<para>1-bit flag. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Char">
            <summary>
			<para>Character data, with a specified length. In UltraLite.NET, this type always supports Unicode characters. The types <b>Char</b> and <b>VarChar</b> are fully compatible.</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Date">
            <summary>
			<para>Date information. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.DateTime">
            <summary>
			<para>Timestamp information (date, time). The enumeration values <b>DateTime</b> and <b>TimeStamp</b> are aliases of each other.</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Decimal">
            <summary>
			<para>Exact numerical data, with a specified precision and scale. The enumeration values <b>Decimal</b> and <b>Numeric</b> are aliases of each other.</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Double">
            <summary>
			<para>Double precision floating-point number (8 bytes). </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Float">
            <summary>
			<para>Single precision floating-point number (4 bytes). The enumeration values <b>Float</b> and <b>Real</b> are aliases of each other.</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Integer">
            <summary>
			<para>Unsigned 32-bit integer. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.LongBinary">
            <summary>
			<para>Binary data, with variable length. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.LongVarchar">
            <summary>
			<para>Character data, with variable length. In UltraLite.NET, this type always supports Unicode characters.</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Numeric">
            <summary>
			<para>Exact numerical data, with a specified precision and scale. The enumeration values <b>Decimal</b> and <b>Numeric</b> are aliases of each other.</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Real">
            <summary>
			<para>Single precision floating-point number (4 bytes). The enumeration values <b>Float</b> and <b>Real</b> are aliases of each other.</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.SmallInt">
            <summary>
			<para>Signed 16-bit integer. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.STGeometry">
            <summary>
			<para>ST Geometry information. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Time">
            <summary>
			<para>Time information. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.TimeStamp">
            <summary>
			<para>Timestamp information (date, time). The enumeration values <b>DateTime</b> and <b>TimeStamp</b> are aliases of each other.</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.TimeStampWithTimeZone">
            <summary>
			<para>Timestamp information (date, time) along with the time zone offset.</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.TinyInt">
            <summary>
			<para>Unsigned 8-bit integer. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.UniqueIdentifier">
            <summary>
			<para>Universally Unique Identifier (UUID/GUID). </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.UnsignedBigInt">
            <summary>
			<para>Unsigned 64-bit integer. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.UnsignedInt">
            <summary>
			<para>Unsigned 32-bit integer. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.UnsignedSmallInt">
            <summary>
			<para>Unsigned 16-bit integer. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.VarBinary">
            <summary>
			<para>Binary data, with a specified maximum length. The enumeration values <b>Binary</b> and <b>VarBinary</b> are aliases of each other.</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.VarChar">
            <summary>
			<para>Character data, with a specified maximum length. In UltraLite.NET, this type always supports Unicode characters. The types <b>Char</b> and <b>VarChar</b> are fully compatible.</para>
		</summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDbTypeConverter">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULException">
            <summary>
			<para> Represents a SQL error returned by the UltraLite.NET database. </para>
		</summary><remarks>
			<para>The SQLCODE denoting the error is returned in the NativeError.</para>
			<para>This class is not serializable under the .NET Compact Framework.</para>
		</remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULException.NativeError"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
			<para> Populates a SerializationInfo with the data needed to serialize this ULException. </para>
		</summary><remarks>
			<para>This method is not supported under the .NET Compact Framework.</para>
		</remarks><param name="info">
			The SerializationInfo to populate with data. 
		</param><param name="context">
			The destination for this serialization. 
		</param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Private serialization contructor</summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULException.NativeError">
            <summary>
			<para> Returns the SQLCODE returned by the database. </para>
		</summary><value>The ULSQLCode value returned by the database.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULException.Source">
            <summary>
			<para>Returns the name of the provider that generated the error. </para>
		</summary><value>The string value identifying UltraLite.NET as the provider.</value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULFileTransferProgressData">
            <summary>
			<para><i><b>UL Ext: </b></i> Returns file transfer progress monitoring data. </para>
		</summary><seealso cref="T:iAnywhere.Data.UltraLite.ULFileTransferProgressListener"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULFileTransferProgressData.FLAG_IS_BLOCKING">
            <summary>
			<para>A flag indicating that the file transfer is blocked awaiting a response from the MobiLink server.</para>
		</summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransferProgressData.FileSize">
            <summary>
			<para> Returns the size of the file being transferred.</para>
		</summary><value>The size of the file in bytes.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransferProgressData.BytesReceived">
            <summary>
			<para> Returns the number of bytes received so far.</para>
		</summary><value>The number of bytes received so far.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransferProgressData.ResumedAtSize">
            <summary>
			<para> Returns the point in the file where the transfer was resumed. </para>
		</summary><value>The number of bytes transferred previously.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransferProgressData.Flags">
            <summary>
			<para> Returns the current file transfer flags indicating additional information relating to the current state. </para>
		</summary><value>An integer containing a combination of flags or'ed together.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULFileTransferProgressData.FLAG_IS_BLOCKING"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULFileTransferProgressListener">
            <summary>
			<para> <i><b>UL Ext: </b></i> The listener interface for receiving file transfer progress events. </para>
		</summary><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile(iAnywhere.Data.UltraLite.ULFileTransferProgressListener)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULFileTransferProgressListener.FileTransferProgressed(iAnywhere.Data.UltraLite.ULFileTransferProgressData)">
            <summary>
			<para> Invoked during a file transfer to inform the user of progress. This method should return true to cancel the transfer or return false to continue. </para>
		</summary><remarks>
			<para> No UltraLite.NET API methods should be invoked during a FileTransferProgressed call. </para>
		</remarks><param name="data">
			A ULFileTransferProgressData object containing the latest file transfer progress data. 
		</param><returns>
		This method should return true to cancel the transfer or return false to continue. 
		</returns><seealso cref="T:iAnywhere.Data.UltraLite.ULFileTransferProgressData"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULFileTransferStatus">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULFileTransferResult">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULFileTransferProgressListenerServer">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULFileTransfer">
            <summary>
            <para><i><b>UL Ext: </b></i> Transfers a file from a remote database using the MobiLink server. </para>
        </summary><remarks>
            <para>You do not need a database connection to perform a file transfer, however, if your application uses an UltraLite database with the UltraLite Engine runtime, you must set ULDatabaseManager.RuntimeType to the appropriate value before using this API or any other UltraLite.NET API.</para>
            <para> To transfer a file you must set the ULFileTransfer.FileName, ULFileTransfer.Stream, ULFileTransfer.UserName, and ULFileTransfer.Version. </para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.FileName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Stream"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.UserName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Version"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULFileTransfer.#ctor">
            <summary>
            <para> Initializes a ULFileTransfer object. The connection must be opened before you can perform any operations against the database. </para>
        </summary><remarks>
            <para>You do not need a database connection to perform a file transfer, however, if your application uses an UltraLite database with the UltraLite Engine runtime, you must set ULDatabaseManager.RuntimeType to the appropriate value before using this API or any other UltraLite.NET API.</para>
            <para> The ULFileTransfer object needs to have the ULFileTransfer.FileName, ULFileTransfer.Stream, ULFileTransfer.UserName, and ULFileTransfer.Version set before it can transfer a file. </para>
        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.FileName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Stream"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.UserName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Version"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile">
            <summary>
            <para>Download the file specified by the properties of this object.</para>
        </summary><remarks>
            <para>The file specified by the ULFileTransfer.FileName is downloaded by the MobiLink server to the ULFileTransfer.LocalPath using the ULFileTransfer.Stream, ULFileTransfer.UserName, ULFileTransfer.Password, and ULFileTransfer.Version. Other properties that affect the download are ULFileTransfer.LocalFileName, ULFileTransfer.AuthenticationParms, and ULFileTransfer.ResumePartialDownload.</para>
            <para> To avoid file corruption, UltraLite.NET downloads to a temporary file and only replaces the local file once the download has completed.</para>
            <para>A detailed result status is reported in this object's ULFileTransfer.AuthStatus, ULFileTransfer.AuthValue, ULFileTransfer.FileAuthCode, ULFileTransfer.TransferedFile, ULFileTransfer.StreamErrorCode, and ULFileTransfer.StreamErrorSystem.</para>
        </remarks><returns>
        <para>True if successful, false otherwise (check ULFileTransfer.StreamErrorCode and other status properties for reason).</para>
        </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile(iAnywhere.Data.UltraLite.ULFileTransferProgressListener)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.FileName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.LocalPath"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Stream"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.UserName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Password"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Version"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.LocalFileName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthenticationParms"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.ResumePartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthStatus"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthValue"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.FileAuthCode"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.TransferedFile"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorCode"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorSystem"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorCode"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile(iAnywhere.Data.UltraLite.ULFileTransferProgressListener)">
            <summary>
            <para> Download the file specified by the properties of this object with progress events posted to the specified listener.</para>
        </summary><remarks>
            <para>The file specified by the ULFileTransfer.FileName is downloaded by the MobiLink server to the ULFileTransfer.LocalPath using the ULFileTransfer.Stream, ULFileTransfer.UserName, ULFileTransfer.Password, and ULFileTransfer.Version. Other properties that affect the download are ULFileTransfer.LocalFileName, ULFileTransfer.AuthenticationParms, and ULFileTransfer.ResumePartialDownload.</para>
            <para> To avoid file corruption, UltraLite.NET downloads to a temporary file and only replaces the local file once the download has completed.</para>
            <para>A detailed result status is reported in this object's ULFileTransfer.AuthStatus, ULFileTransfer.AuthValue, ULFileTransfer.FileAuthCode, ULFileTransfer.TransferedFile, ULFileTransfer.StreamErrorCode, and ULFileTransfer.StreamErrorSystem.</para>
            <para>Errors may result in no data being sent to the listener.</para>
        </remarks><param name="listener">
            The object that receives file transfer progress events. 
        </param><returns>
        <para>True if successful, false otherwise (check ULFileTransfer.StreamErrorCode and other status properties for reason).</para>
        </returns><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.FileName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.LocalPath"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Stream"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.UserName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Password"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Version"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.LocalFileName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthenticationParms"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.ResumePartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthStatus"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthValue"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.FileAuthCode"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.TransferedFile"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorCode"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorSystem"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorCode"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile">
            <summary>
            <para>Upload the file specified by the properties of this object.</para>
        </summary><remarks>
            <para>The file specified by the ULFileTransfer.FileName is uploaded to the MobiLink server from the ULFileTransfer.LocalPath using the ULFileTransfer.Stream, ULFileTransfer.UserName, ULFileTransfer.Password, and ULFileTransfer.Version.</para>
            <para>A detailed result status is reported in this object's ULFileTransfer.AuthStatus, ULFileTransfer.AuthValue, ULFileTransfer.FileAuthCode, ULFileTransfer.TransferedFile, ULFileTransfer.StreamErrorCode, and ULFileTransfer.StreamErrorSystem.</para>
        </remarks><returns>
        <para>True if successful, false otherwise (check ULFileTransfer.StreamErrorCode and other status properties for reason).</para>
        </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile(iAnywhere.Data.UltraLite.ULFileTransferProgressListener)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.FileName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.LocalPath"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Stream"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.UserName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Password"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Version"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.LocalFileName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthenticationParms"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.ResumePartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthStatus"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthValue"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.FileAuthCode"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.TransferedFile"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorCode"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorSystem"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorCode"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile(iAnywhere.Data.UltraLite.ULFileTransferProgressListener)">
            <summary>
            <para>Upload the file specified by the properties of this object with progress events posted to the specified listener.</para>
        </summary><remarks>
            <para>The file specified by the ULFileTransfer.FileName is uploaded to the MobiLink server from the ULFileTransfer.LocalPath using the ULFileTransfer.Stream, ULFileTransfer.UserName, ULFileTransfer.Password, and ULFileTransfer.Version.</para>
            <para>A detailed result status is reported in this object's ULFileTransfer.AuthStatus, ULFileTransfer.AuthValue, ULFileTransfer.FileAuthCode, ULFileTransfer.TransferedFile, ULFileTransfer.StreamErrorCode, and ULFileTransfer.StreamErrorSystem.</para>
            <para>Errors may result in no data being sent to the listener.</para>
        </remarks><param name="listener">
            The object that receives file transfer progress events. 
        </param><returns>
        <para>True if successful, false otherwise (check ULFileTransfer.StreamErrorCode and other status properties for reason).</para>
        </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.FileName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.LocalPath"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Stream"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.UserName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Password"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Version"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.LocalFileName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthenticationParms"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.ResumePartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthStatus"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthValue"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.FileAuthCode"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.TransferedFile"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorCode"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorSystem"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorCode"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.FileName">
            <summary>
            <para> Specifies the name of the file to download.</para>
        </summary><value> 
        <para>A string specifying the name of the file as recognized by the MobiLink server. This property has no default value, and must be explicitly set.</para>
        </value><remarks>
            <para>FileName is the name of the file on the server running MobiLink. MobiLink first searches for this file in the UserName subdirectory and then in the root directory (the root directory is specified via the MobiLink server's -ftr option). FileName must not include any drive or path information so that the MobiLink server can find it. For example, "myfile.txt" is valid, but "somedir\myfile.txt", "..\myfile.txt", and "c:\myfile.txt" are all invalid.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.LocalFileName"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.LocalPath">
            <summary>
            <para> Specifies where to download the file.</para>
        </summary><value> 
        <para>A string specifying the local directory of the file. The default is a null reference (Nothing in Visual Basic).</para>
        </value><remarks>
            <para>The default local directory varies depending on the device's operating system:</para>
            <list type="bullet">
            <item>
            For Windows Mobile devices, if the LocalPath is a null reference (Nothing in Visual Basic), the file is stored in the root (\) directory.
            </item>
            <item>
            For desktop applications, if the LocalPath is a null reference (Nothing in Visual Basic), the file is stored in the current directory.
            </item>
            </list>
        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.LocalFileName">
            <summary>
            <para>Specifies the local file name for the downloaded file.</para>
        </summary><value> 
        <para>A string specifying the local file name for the downloaded file. If the value is a null reference (Nothing in Visual Basic), FileName is used. The default is a null reference (Nothing in Visual Basic).</para>
        </value><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.FileName"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.Stream">
            <summary>
            <para> Specifies the MobiLink synchronization stream to use for the file transfer. </para>
        </summary><value>One of the ULStreamType values specifying the type of synchronization stream to use. The default is ULStreamType.TCPIP.</value><remarks>
            <para> Most synchronization streams require parameters to identify the MobiLink server address and control other behavior. These parameters are supplied by the ULFileTransfer.StreamParms. </para>
            <para> If the stream type is set to a value that is invalid for the platform, the stream type is set to ULStreamType.TCPIP. </para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULStreamType"/><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamParms"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/><seealso cref="F:iAnywhere.Data.UltraLite.ULStreamType.TCPIP"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamParms">
            <summary>
            <para> Specifies the parameters to configure the synchronization stream. </para>
        </summary><value>A string, in the form of a semicolon-separated list of keyword-value pairs, specifying the parameters for the stream. The default is a null reference. (Nothing in Visual Basic)</value><remarks>
            <para> For information about configuring specific stream types, see @olink targetdoc="uladmin" targetptr="streamparms-s-3928666"@Network protocol options for UltraLite synchronization streams@/olink@. </para>
            <para> StreamParms is a string containing all the parameters used for synchronization streams. Parameters are specified as a semicolon-separated list of name=value pairs ("param1=value1;param2=value2").</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Stream"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/><seealso cref="T:iAnywhere.Data.UltraLite.ULStreamType"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.UserName">
            <summary>
            <para> The user name that identifies the MobiLink client to the MobiLink server. </para>
        </summary><value>A string specifying the user name. This property has no default value, and must be explicitly set.</value><remarks>
            <para> The MobiLink server uses this value to locate the file to download. The MobiLink user name and password are separate from any database user ID and password, and serve to identify and authenticate the application to the MobiLink server.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.Password"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.RemoteKey">
            <summary>
            <para>The key that uniquely identifies the MobiLink client to the MobiLink server. </para>
        </summary><value>A string specifying the remote key. This property has no default value, and must be explicitly set.</value><remarks>
            <para>The MobiLink server passes this value to various scripts to uniquely identify this client.</para>
        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.Password">
            <summary>
            <para> The MobiLink password for the user specified by UserName. </para>
        </summary><value>A string specifying the MobiLink password. The default is a null reference (Nothing in Visual Basic), meaning no password is specified.</value><remarks>
            <para> The MobiLink user name and password are separate from any database user ID and password, and serve to identify and authenticate the application to the MobiLink server. </para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.UserName"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.Version">
            <summary>
            <para> Specifies which synchronization script to use. </para>
        </summary><value>A string specifying the version of the synchronization script to use. This property has no default value, and must be explicitly set.</value><remarks>
            <para> Each synchronization script in the consolidated database is marked with a version string. The version string allows an UltraLite application to choose from a set of synchronization scripts. </para>
        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.ResumePartialDownload">
            <summary>
            <para> Specifies whether to resume or discard a previous partial download. </para>
        </summary><value>True to resume a previous partial download, false to discard a previous partial download. The default is false.</value><remarks>
            <para> UltraLite.NET has the ability to restart downloads that fail because of communication errors or user aborts through the ULFileTransferListener. UltraLite.NET processes the download as it is received. If a download is interrupted, then the partially download file is retained and can be resumed during the next file transfer. </para>
            <para>If the file has been updated on the server, a partial download is discarded and a new download starts.</para>
        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthenticationParms">
            <summary>
            <para> Specifies parameters for a custom user authentication script (MobiLink authenticate_parameters connection event). </para>
        </summary><value>An array of strings, each containing an authentication parameter (null array entries result in a synchronization error). The default is a null reference (Nothing in Visual Basic), meaning no authentication parameters.</value><remarks>
            <para> Only the first 255 strings are used and each string should be no longer than the MobiLink server's limit for authentication parameters (currently 4000 UTF8 bytes). </para>
        </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.FileAuthCode">
            <summary>
            <para>Returns the return value from the authenticate_file_transfer script for the last file transfer attempt.</para>
        </summary><value>An unsigned short integer returned from the authenticate_file_transfer script for the last file transfer attempt.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthStatus">
            <summary>
            <para>Returns the authorization status code for the last file transfer attempt.</para>
        </summary><value>One of the ULAuthStatusCode values denoting the authorization status for the last file transfer attempt.</value><seealso cref="T:iAnywhere.Data.UltraLite.ULAuthStatusCode"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.AuthValue">
            <summary>
            <para> Returns the return value from custom user authentication synchronization scripts. </para>
        </summary><value>A long integer returned from custom user authentication synchronization scripts.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorCode">
            <summary>
            <para> Returns the error reported by the stream itself for the last file transfer attempt.</para>
        </summary><value>One of the ULStreamErrorCode values denoting the error reported by the stream itself, ULStreamErrorCode.NONE if no error occurred.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorSystem">
            <summary>
            <para> Returns the stream error system-specific code. </para>
        </summary><value>An integer denoting the stream error system-specific code.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFileTransfer.TransferedFile">
            <summary>
            <para> Checks whether the file was actually downloaded during the last file transfer attempt. </para>
        </summary><value>True if the file was downloaded, false otherwise.</value><remarks>
            <para>If the file is already up-to-date when the DownloadFile() or UploadFile() is invoked, it returns true, but TransferedFile is false. If an error occurs and DownloadFile() or UploadFile() returns false, TransferedFile is false.</para>
        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.DownloadFile"/><seealso cref="M:iAnywhere.Data.UltraLite.ULFileTransfer.UploadFile"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULIndexSchema">
            <summary>
				<para><i><b>UL Ext: </b></i> Represents the schema of an UltraLite table index. </para>
		  </summary><remarks>
				<para> There is no constructor for this class. Index schemas are created using the ULTableSchema.PrimaryKey, ULTableSchema.GetIndex(string), and ULTableSchema.GetOptimalIndex(int) of the ULTableSchema. </para>
		</remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULTableSchema.PrimaryKey"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTableSchema.GetIndex(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTableSchema.GetOptimalIndex(System.Int32)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTableSchema"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULIndexSchema.GetColumnName(System.Int16)">
            <summary>
				<para> Returns the name of the <paramref name="colOrdinalInIndex"/>'th column in this index. </para>
		  </summary><remarks>
				<para> Column ordinals and count may change during a schema upgrade. Column ordinals from an index are different than the column IDs in a table or another index, even if they refer to the same physical column in a particular table. </para>
		  </remarks><param name="colOrdinalInIndex">
				The ordinal of the desired column in the index. The value must be in the range [1,ColumnCount]. 
		  </param><returns>
		  The name of the column. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.ColumnCount"/><seealso cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULIndexSchema.IsColumnDescending(System.String)">
            <summary>
				<para> Checks whether the named column is used in descending order by the index. </para>
		  </summary><param name="name">
				The name of the column. 
		  </param><returns>
		  True if the column is used in descending order, false if the column is used in ascending order. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULIndexSchema.GetColumnName(System.Int16)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.ColumnCount"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.ColumnCount">
            <summary>
				<para> Returns the number of columns in the index. </para>
		  </summary><value>The number of columns in the index. </value><remarks>
				<para> Column ordinals in indexes range from 1 to ColumnCount, inclusive. </para>
				<para> Column ordinals and count may change during a schema upgrade. Column ordinals from an index are different than the column IDs in a table or another index, even if they refer to the same physical column in a particular table. </para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKey">
            <summary>
				<para> Checks whether the index is a foreign key. </para>
		  </summary><value>True if the index is the foreign key, false if the index is not the foreign key. </value><remarks>
				<para> Columns in a foreign key may reference another table's non-null, unique index. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKeyCheckOnCommit">
            <summary>
				<para> Checks whether referential integrity for the foreign key is performed on commits or on inserts and updates. </para>
		  </summary><value>True if referential integrity is checked on commits, false if it is checked on inserts and updates.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred (including index is not a foreign key). 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKey"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKeyNullable">
            <summary>
				<para>Checks whether the foreign key is nullable. </para>
		  </summary><value>True if the foreign key is nullable, false if the foreign key is not nullable.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred (including index is not a foreign key). 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKey"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsOpen">
            <summary>
				<para> Determines whether the index schema is open or closed. </para>
		  </summary><value>True if the index schema is open, otherwise false. </value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsPrimaryKey">
            <summary>
				<para> Checks whether the index is the primary key. </para>
		  </summary><value>True if the index is the primary key, false if the index is not the primary key. </value><remarks>
				<para> Columns in the primary key may not be null. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsUniqueIndex">
            <summary>
				<para> Checks whether the index is unique. </para>
		  </summary><value>True if the index is unique, false if the index is not unique. </value><remarks>
				<para> Columns in a unique index may be null. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsUniqueKey">
            <summary>
				<para>Checks whether the index is a unique key. </para>
		  </summary><value>True if the index is a unique key, false if the index is not a unique key. </value><remarks>
				<para> Columns in a unique key may not be null. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.Name">
            <summary>
				<para> Returns the name of the index. </para>
		  </summary><value>A string specifying the name of the index.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.ReferencedIndexName">
            <summary>
				<para> The name of the referenced primary index if the index is a foreign key. </para>
		  </summary><value>A string specifying the name of the referenced primary index.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred (including index is not a foreign key). 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKey"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.ReferencedTableName">
            <summary>
				<para> The name of the referenced primary table if the index is a foreign key. </para>
		  </summary><value>A string specifying the name of the referenced primary table.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred (including index is not a foreign key). 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKey"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULMetaDataCollectionNames">
            <summary>
			<para> Provides a list of constants for use with the ULConnection.GetSchema(String,String[]) to retrieve metadata collections. </para>
		</summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULMetaDataCollectionNames.Columns">
            <summary>
			<para>Provides a constant for use with the ULConnection.GetSchema(String) that represents the Columns collection.</para>
		</summary><value>A string representing the name of the Columns collection.</value><example>
			<para>The following code fills a DataTable with the Columns collection.</para>
			<code>
' Visual Basic
Dim schema As DataTable = _
    conn.GetSchema( ULMetaDataCollectionNames.Columns )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
DataTable schema =
    conn.GetSchema( ULMetaDataCollectionNames.Columns );
</code>

		</example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULMetaDataCollectionNames.DataSourceInformation">
            <summary>
			<para>Provides a constant for use with the ULConnection.GetSchema(String) that represents the DataSourceInformation collection.</para>
		</summary><value>A string representing the name of the DataSourceInformation collection.</value><example>
			<para>The following code fills a DataTable with the DataSourceInformation collection.</para>
			<code>
' Visual Basic
Dim schema As DataTable = _
    conn.GetSchema( ULMetaDataCollectionNames.DataSourceInformation )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
DataTable schema =
    conn.GetSchema( ULMetaDataCollectionNames.DataSourceInformation );
</code>

		</example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULMetaDataCollectionNames.DataTypes">
            <summary>
			<para>Provides a constant for use with the ULConnection.GetSchema(String) that represents the DataTypes collection.</para>
		</summary><value>A string representing the name of the DataTypes collection.</value><example>
			<para>The following code fills a DataTable with the DataTypes collection.</para>
			<code>
' Visual Basic
Dim schema As DataTable = _
    conn.GetSchema( ULMetaDataCollectionNames.DataTypes )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
DataTable schema =
    conn.GetSchema( ULMetaDataCollectionNames.DataTypes );
</code>

		</example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULMetaDataCollectionNames.ForeignKeys">
            <summary>
			<para>Provides a constant for use with the ULConnection.GetSchema(String) that represents the ForeignKeys collection.</para>
		</summary><value>A string representing the name of the ForeignKeys collection.</value><example>
			<para>The following code fills a DataTable with the ForeignKeys collection.</para>
			<code>
' Visual Basic
Dim schema As DataTable = _
    conn.GetSchema( ULMetaDataCollectionNames.ForeignKeys )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
DataTable schema =
    conn.GetSchema( ULMetaDataCollectionNames.ForeignKeys );
</code>

		</example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULMetaDataCollectionNames.IndexColumns">
            <summary>
			<para>Provides a constant for use with the ULConnection.GetSchema(String) that represents the IndexColumns collection.</para>
		</summary><value>A string representing the name of the IndexColumns collection.</value><example>
			<para>The following code fills a DataTable with the IndexColumns collection.</para>
			<code>
' Visual Basic
Dim schema As DataTable = _
    conn.GetSchema( ULMetaDataCollectionNames.IndexColumns )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
DataTable schema =
    conn.GetSchema( ULMetaDataCollectionNames.IndexColumns );
</code>

		</example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULMetaDataCollectionNames.Indexes">
            <summary>
			<para>Provides a constant for use with the ULConnection.GetSchema(String) that represents the Indexes collection.</para>
		</summary><value>A string representing the name of the Indexes collection.</value><example>
			<para>The following code fills a DataTable with the Indexes collection.</para>
			<code>
' Visual Basic
Dim schema As DataTable = _
    conn.GetSchema( ULMetaDataCollectionNames.Indexes )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
DataTable schema =
    conn.GetSchema( ULMetaDataCollectionNames.Indexes );
</code>

		</example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULMetaDataCollectionNames.MetaDataCollections">
            <summary>
			<para>Provides a constant for use with the ULConnection.GetSchema(String) that represents the MetaDataCollections collection.</para>
		</summary><value>A string representing the name of the MetaDataCollections collection.</value><example>
			<para>The following code fills a DataTable with the MetaDataCollections collection.</para>
			<code>
' Visual Basic
Dim schema As DataTable = _
    conn.GetSchema( ULMetaDataCollectionNames.MetaDataCollections )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
DataTable schema =
    conn.GetSchema( ULMetaDataCollectionNames.MetaDataCollections );
</code>

		</example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULMetaDataCollectionNames.Publications">
            <summary>
			<para>Provides a constant for use with the ULConnection.GetSchema(String) that represents the Publications collection.</para>
		</summary><value>A string representing the name of the Publications collection.</value><example>
			<para>The following code fills a DataTable with the Publications collection.</para>
			<code>
' Visual Basic
Dim schema As DataTable = _
    conn.GetSchema( ULMetaDataCollectionNames.Publications )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
DataTable schema =
    conn.GetSchema( ULMetaDataCollectionNames.Publications );
</code>

		</example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULMetaDataCollectionNames.ReservedWords">
            <summary>
			<para>Provides a constant for use with the ULConnection.GetSchema(String) that represents the ReservedWords collection.</para>
		</summary><value>A string representing the name of the ReservedWords collection.</value><example>
			<para>The following code fills a DataTable with the ReservedWords collection.</para>
			<code>
' Visual Basic
Dim schema As DataTable = _
    conn.GetSchema( ULMetaDataCollectionNames.ReservedWords )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
DataTable schema =
    conn.GetSchema( ULMetaDataCollectionNames.ReservedWords );
</code>

		</example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULMetaDataCollectionNames.Restrictions">
            <summary>
			<para>Provides a constant for use with the ULConnection.GetSchema(String) that represents the Restrictions collection.</para>
		</summary><value>A string representing the name of the Restrictions collection.</value><example>
			<para>The following code fills a DataTable with the Restrictions collection.</para>
			<code>
' Visual Basic
Dim schema As DataTable = _
    conn.GetSchema( ULMetaDataCollectionNames.Restrictions )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
DataTable schema =
    conn.GetSchema( ULMetaDataCollectionNames.Restrictions );
</code>

		</example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULMetaDataCollectionNames.Tables">
            <summary>
			<para>Provides a constant for use with the ULConnection.GetSchema(String) that represents the Tables collection.</para>
		</summary><value>A string representing the name of the Tables collection.</value><example>
			<para>The following code fills a DataTable with the Tables collection.</para>
			<code>
' Visual Basic
Dim schema As DataTable = _
    conn.GetSchema( ULMetaDataCollectionNames.Tables )
</code>
<code>
// C#
DataTable schema =
    conn.GetSchema( ULMetaDataCollectionNames.Tables );
</code>

		</example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetSchema(System.String)"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULColumnNameType">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULNativeIface">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULParameter">
            <summary>
            <para>Represents a parameter to a ULCommand. </para>
        </summary><remarks>
            <para>A ULParameter object can be created directly using one of its many constructors, or using the ULCommand.CreateParameter method. Because of the special treatment of the 0 and 0.0 constants and the way overloaded methods are resolved, it is highly recommended that you explicitly cast constant values to type object when using the ULParameter(string,object) constructor. For example: </para>
            <code>
' Visual Basic
Dim p As ULParameter = New ULParameter( "", CType( 0, Object ) )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULParameter p = new ULParameter( "", (object)0 );
</code>
            <para> Parameters (including those created by ULCommand.CreateParameter) must be added to a ULCommand.Parameters collection to be used. All parameters are treated as positional parameters and are used by a command in the order that they were added.</para>
            <para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>

        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.CreateParameter"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/><seealso cref="T:System.Data.Common.DbParameter"/><seealso cref="T:System.Data.IDbDataParameter"/><seealso cref="T:System.Data.IDataParameter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.#ctor">
            <summary>
            <para> Initializes a ULParameter object with null (Nothing in Visual Basic) as its value. </para>
        </summary><example>
            <para>The following code creates a ULParameter with the value 3 and adds it to a ULCommand called cmd.</para>
            <code>
' Visual Basic
Dim p As ULParameter = New ULParameter
p.Value = 3
cmd.Parameters.Add( p )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULParameter p = new ULParameter();
p.Value = 3;
cmd.Parameters.Add( p );
</code>

        </example><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)">
            <summary>
            <para> Initializes a ULParameter object with the specified parameter name and value. </para>
        </summary><remarks>
            <para> Because of the special treatment of the 0 and 0.0 constants and the way overloaded methods are resolved, it is highly recommended that you explicitly cast constant values to type object when using this constructor. </para>
        </remarks><param name="parameterName">
            The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by ULCommand. 
        </param><param name="value">
            A System.Object that is to be the value of the parameter. 
        </param><example>
            <para>The following code creates a ULParameter with the value 0 and adds it to a ULCommand called cmd.</para>
            <code>
' Visual Basic
cmd.Parameters.Add( New ULParameter( "", CType( 0, Object ) ) )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
cmd.Parameters.Add( new ULParameter( "", (object)0 ) );
</code>

        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:System.Object"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,iAnywhere.Data.UltraLite.ULDbType)">
            <summary>
            <para> Initializes a ULParameter object with the specified parameter name and data type. This constructor is not recommended; it is provided for compatibility with other data providers.</para>
        </summary><remarks>
            <para> In UltraLite.NET parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>
        </remarks><param name="parameterName">
            The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by ULCommand. 
        </param><param name="dbType">
            One of the iAnywhere.Data.UltraLite.ULDbType values. 
        </param><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDbType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,iAnywhere.Data.UltraLite.ULDbType,System.Int32)">
            <summary>
            <para> Initializes a ULParameter object with the specified parameter name and data type. This constructor is not recommended; it is provided for compatibility with other data providers.</para>
        </summary><remarks>
            <para> In UltraLite.NET parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>
        </remarks><param name="parameterName">
            The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by ULCommand. 
        </param><param name="dbType">
            One of the iAnywhere.Data.UltraLite.ULDbType values. 
        </param><param name="size">
            The length of the parameter. 
        </param><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDbType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,iAnywhere.Data.UltraLite.ULDbType,System.Int32,System.String)">
            <summary>
            <para> Initializes a ULParameter object with the specified parameter name, data type, and length. This constructor is not recommended; it is provided for compatibility with other data providers.</para>
        </summary><remarks>
            <para> In UltraLite.NET parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>
        </remarks><param name="parameterName">
            The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by ULCommand. 
        </param><param name="dbType">
            One of the iAnywhere.Data.UltraLite.ULDbType values. 
        </param><param name="size">
            The length of the parameter. 
        </param><param name="sourceColumn">
            The name of the source column to map. 
        </param><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDbType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,iAnywhere.Data.UltraLite.ULDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para> Initializes a ULParameter object with the specified parameter name, data type, length, direction, nullability, numeric precision, numeric scale, source column, source version, and value. This constructor is not recommended; it is provided for compatibility with other data providers.</para>
        </summary><param name="parameterName">
            The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by ULCommand. 
        </param><param name="dbType">
            One of the iAnywhere.Data.UltraLite.ULDbType values. 
        </param><param name="size">
            The length of the parameter. 
        </param><param name="direction">
            One of the System.Data.ParameterDirection values. 
        </param><param name="isNullable">
            True if the value of the field can be null; otherwise, false. 
        </param><param name="precision">
            The total number of digits to the left and right of the decimal point to which Value is resolved. 
        </param><param name="scale">
            The total number of decimal places to which Value is resolved. 
        </param><param name="sourceColumn">
            The name of the source column to map. 
        </param><param name="sourceVersion">
            One of the System.Data.DataRowVersion values. 
        </param><param name="value">
            An System.Object that is to be the value of the parameter. 
        </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>Only the System.Data.ParameterDirection.Input direction is supported in UltraLite.NET.</para>
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDbType"/><seealso cref="T:System.Data.ParameterDirection"/><seealso cref="T:System.Data.DataRowVersion"/><seealso cref="T:System.Object"/><seealso cref="F:System.Data.ParameterDirection.Input"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.ResetDbType">
            <summary>
            <para>This method is not supported in UltraLite.NET.</para>
        </summary><remarks>
            <para>In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.ToString">
            <summary>
            <para> Returns the string representation of this instance.</para>
        </summary><returns>
        <para>The name of the parameter.</para>
        </returns>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.DbType">
            <summary>
            <para>Specifies the System.Data.DbType of the parameter</para>
        </summary><value>One of the System.Data.DbType values.</value><remarks>
            <para>The ULParameter.ULDbType and DbType properties are linked. Therefore, setting the DbType changes the ULParameter.ULDbType to a supporting iAnywhere.Data.UltraLite.ULDbType. </para>
        </remarks><exception cref="T:System.ArgumentException">
            <para>There is no mapping from the specified value to a iAnywhere.Data.UltraLite.ULDbType, hence, the specified value is not supported.</para>
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.ULDbType"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDbType"/><seealso cref="T:System.Data.DbType"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.Direction">
            <summary>
            <para>A value indicating whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.</para>
        </summary><value>One of the System.Data.ParameterDirection values.</value><remarks>
            <para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>
        </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
            <para>Only the System.Data.ParameterDirection.Input direction is supported in UltraLite.NET.</para>
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/><seealso cref="T:System.Data.ParameterDirection"/><seealso cref="F:System.Data.ParameterDirection.Input"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.IsNullable">
            <summary>
            <para>Specifies whether the parameter accepts null values.</para>
        </summary><value>True if null values are accepted, false otherwise. The default is false. Null values are handled using the DBNull class.</value><remarks>
            <para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.Offset">
            <summary>
            <para>Specifies the offset to the ULParameter.Value.</para>
        </summary><value>The offset to the value. The default is 0.</value><remarks>
            <para> In UltraLite.NET parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.ParameterName">
            <summary>
            <para>Specifies the name of the parameter.</para>
        </summary><value>A string representing the name of the parameter, or an empty string ("") for unnamed parameters. Specifying a null reference (Nothing in Visual Basic) results in an empty string being used.</value><remarks>
            <para>In UltraLite.NET, parameter names are not used by ULCommand. All parameters are treated as positional parameters and are used by a command in the order that they were added.</para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.Precision">
            <summary>
            <para>Specifies the maximum number of digits used to represent the ULParameter.Value.</para>
        </summary><value>The maximum number of digits used to represent the ULParameter.Value. The default value is 0, which indicates that the data provider sets the precision for the ULParameter.Value.</value><remarks>
            <para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>
        </remarks><exception cref="T:System.ArgumentException">
            <para>The value is greater then 38.</para>
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.Scale">
            <summary>
            <para>Specifies the number of decimal places to which ULParameter.Value is resolved.</para>
        </summary><value>The number of decimal places to which ULParameter.Value is resolved. The default is 0.</value><remarks>
            <para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.Size">
            <summary>
            <para>Specifies the maximum size of the data within the column.</para>
        </summary><value>The maximum size of the data within the column. The default value is inferred from the parameter value. The Size property is used for binary and string types. </value><remarks>
            <para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.SourceColumn">
            <summary>
            <para>Specifies the name of the source column mapped to the DataSet and used for loading or returning the value.</para>
        </summary><value>A string specifying the name of the source column mapped to the DataSet and used for loading or returning the value.</value><remarks>
            <para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.SourceColumnNullMapping">
            <summary>
            <para>Specifies whether the source column is nullable.</para>
        </summary><value>True if the source column is nullable; false, otherwise.</value><remarks>
            <para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.SourceVersion">
            <summary>
            <para>The System.Data.DataRowVersion to use when loading ULParameter.Value.</para>
        </summary><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/><seealso cref="T:System.Data.DataRowVersion"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.ULDbType">
            <summary>
            <para>Specifies the iAnywhere.Data.UltraLite.ULDbType of the parameter</para>
        </summary><value>One of the iAnywhere.Data.UltraLite.ULDbType values.</value><remarks>
            <para>The ULDbType and ULParameter.DbType are linked. Therefore, setting the ULDbType changes the ULParameter.DbType to a supporting System.Data.DbType. </para>
            <para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the ULParameter.Value is important.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.DbType"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDbType"/><seealso cref="T:System.Data.DbType"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.Value">
            <summary>
            <para>Specifies the value of the parameter.</para>
        </summary><value>A System.Object that specifies the value of the parameter.</value><remarks>
            <para>The value is sent as-is to the data provider without any type conversion or mapping. When the command is executed, the command attempts to convert the value to the required type, signaling a ULException with ULSQLCode.SQLE_CONVERSION_ERROR if it cannot convert the value.</para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CONVERSION_ERROR"/><seealso cref="T:System.Object"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULParameterCollection">
            <summary>
            <para>Represents all parameters to a ULCommand. </para>
        </summary><remarks>
            <para>All parameters in the collection are treated as positional parameters and are specified in the same order as the question mark placeholders in the ULCommand.CommandText. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the ULCommand.CommandText as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
            <para>There is no constructor for ULParameterCollection. You obtain a ULParameterCollection from the ULCommand.Parameters. </para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/><seealso cref="T:System.Data.Common.DbParameterCollection"/><seealso cref="T:System.Data.IDataParameterCollection"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.Object)">
            <summary>
            <para>Adds a ULParameter to the collection. </para>
        </summary><remarks>
            <para>All parameters in the collection are treated as positional parameters and must be added to the collection in the same order as the corresponding question mark placeholders in the ULCommand.CommandText. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the ULCommand.CommandText as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
        </remarks><param name="value">
            The ULParameter object to add to the collection. 
        </param><returns>
        <para>The index of the new ULParameter object.</para>
        </returns><exception cref="T:System.ArgumentNullException">
            The value cannot be null (Nothing in Visual Basic). 
        </exception><exception cref="T:System.InvalidCastException">
            The value specified must be a ULParameter. 
        </exception><exception cref="T:System.ArgumentException">
            The ULParameter object can only be added to the collection once. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(iAnywhere.Data.UltraLite.ULParameter)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,System.Object)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(iAnywhere.Data.UltraLite.ULParameter)">
            <summary>
            <para>Adds a ULParameter to the collection. </para>
        </summary><remarks>
            <para>All parameters in the collection are treated as positional parameters and must be added to the collection in the same order as the corresponding question mark placeholders in the ULCommand.CommandText. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the ULCommand.CommandText as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
        </remarks><param name="value">
            The ULParameter object to add to the collection. 
        </param><returns>
        <para>The new ULParameter object.</para>
        </returns><exception cref="T:System.ArgumentNullException">
            The value cannot be null (Nothing in Visual Basic). 
        </exception><exception cref="T:System.ArgumentException">
            The ULParameter object can only be added to the collection once. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,System.Object)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,System.Object)">
            <summary>
            <para>Adds a new ULParameter, created using the specified parameter name and value, to the collection.</para>
        </summary><remarks>
            <para>All parameters in the collection are treated as positional parameters and must be added to the collection in the same order as the corresponding question mark placeholders in the ULCommand.CommandText. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the ULCommand.CommandText as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
            <para>Because of the special treatment of the 0 and 0.0 constants and the way overloaded methods are resolved, it is highly recommended that you explicitly cast constant values to type object when using this method. </para>
        </remarks><param name="parameterName">
            The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by ULCommand. 
        </param><param name="value">
            A System.Object that is to be the value of the parameter. 
        </param><returns>
        <para>The new ULParameter object.</para>
        </returns><example>
            <para>The following code adds a ULParameter with the value 0 to a ULCommand called cmd.</para>
            <code>
' Visual Basic
cmd.Parameters.Add( "", CType( 0, Object ) )
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
cmd.Parameters.Add( "", (object)0 );
</code>

        </example><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(iAnywhere.Data.UltraLite.ULParameter)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:System.Object"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,iAnywhere.Data.UltraLite.ULDbType)">
            <summary>
            <para>Adds a new ULParameter, created using the specified parameter name and data type, to the collection.</para>
        </summary><remarks>
            <para>All parameters in the collection are treated as positional parameters and must be added to the collection in the same order as the corresponding question mark placeholders in the ULCommand.CommandText. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the ULCommand.CommandText as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
        </remarks><param name="parameterName">
            The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by ULCommand. 
        </param><param name="ulDbType">
            One of the iAnywhere.Data.UltraLite.ULDbType values. 
        </param><returns>
        <para>The new ULParameter object.</para>
        </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(iAnywhere.Data.UltraLite.ULParameter)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,System.Object)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDbType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,iAnywhere.Data.UltraLite.ULDbType,System.Int32)">
            <summary>
            <para>Adds a new ULParameter, created using the specified parameter name, data type, and length, to the collection.</para>
        </summary><remarks>
            <para>All parameters in the collection are treated as positional parameters and must be added to the collection in the same order as the corresponding question mark placeholders in the ULCommand.CommandText. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the ULCommand.CommandText as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
        </remarks><param name="parameterName">
            The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by ULCommand. 
        </param><param name="ulDbType">
            One of the iAnywhere.Data.UltraLite.ULDbType values. 
        </param><param name="size">
            The length of the parameter. 
        </param><returns>
        <para>The new ULParameter object.</para>
        </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(iAnywhere.Data.UltraLite.ULParameter)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,System.Object)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDbType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,iAnywhere.Data.UltraLite.ULDbType,System.Int32,System.String)">
            <summary>
            <para>Adds a new ULParameter, created using the specified parameter name, data type, length, and source column name, to the collection.</para>
        </summary><remarks>
            <para>All parameters in the collection are treated as positional parameters and must be added to the collection in the same order as the corresponding question mark placeholders in the ULCommand.CommandText. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the ULCommand.CommandText as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
        </remarks><param name="parameterName">
            The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by ULCommand. 
        </param><param name="ulDbType">
            One of the iAnywhere.Data.UltraLite.ULDbType values. 
        </param><param name="size">
            The length of the parameter. 
        </param><param name="sourceColumn">
            The name of the source column to map. 
        </param><returns>
        <para>The new ULParameter object.</para>
        </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(iAnywhere.Data.UltraLite.ULParameter)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,System.Object)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDbType"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.AddRange(System.Array)">
            <summary>
            <para>Adds an array of values to the end of the ULParameterCollection.</para>
        </summary><param name="values">
            An array of ULParameter objects to add to the end of this collection. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.AddRange(iAnywhere.Data.UltraLite.ULParameter[])">
            <summary>
            <para>Adds an array of values to the end of the ULParameterCollection.</para>
        </summary><remarks>
            <para>This is the strongly-typed version of DbParameterCollection.AddRange(Array).</para>
        </remarks><param name="values">
            An array of ULParameter objects to add to the end of this collection. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/><seealso cref="T:iAnywhere.Data.UltraLite.ULParameterCollection"/><seealso cref="M:System.Data.Common.DbParameterCollection.AddRange(System.Array)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Clear">
            <summary>
            <para>Removes all the parameters from the collection.</para>
        </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Contains(System.Object)">
            <summary>
            <para>Checks whether a ULParameter exists in the collection. </para>
        </summary><param name="value">
            The ULParameter object to check for. 
        </param><returns>
        <para>True if the collection contains the ULParameter, false otherwise. </para>
        </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Contains(System.String)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Contains(System.String)">
            <summary>
            <para>Checks whether a ULParameter with the specified name exists in the collection. </para>
        </summary><param name="value">
            The name of the parameter to search for. 
        </param><returns>
        <para>True if the collection contains the ULParameter, false otherwise. </para>
        </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Contains(System.Object)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            <para>Copies ULParameter objects from the ULParameterCollection to the specified array. </para>
        </summary><param name="array">
            The array into which to copy the ULParameter objects. 
        </param><param name="index">
            The starting index of the array. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.GetEnumerator">
            <summary>
            <para>Returns an enumerator for the collection.</para>
        </summary><returns>
        <para>An ArrayList enumerator enumerating the parameters in the collection.</para>
        </returns>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.GetParameter(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.GetParameter(System.String)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.IndexOf(System.Object)">
            <summary>
            <para>Returns the location of the ULParameter in the collection. </para>
        </summary><param name="value">
            The ULParameter object to locate. 
        </param><returns>
        <para>The zero-based index of the ULParameter in the collection or -1 if the parameter is not found.</para>
        </returns><exception cref="T:System.InvalidCastException">
            The value specified must be a ULParameter. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.IndexOf(System.String)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.IndexOf(System.String)">
            <summary>
            <para>Returns the location of the ULParameter with the specified name in the collection.</para>
        </summary><param name="parameterName">
            The name of the parameter to locate. 
        </param><returns>
        <para>The zero-based index of the ULParameter in the collection or -1 if the parameter is not found.</para>
        </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.IndexOf(System.Object)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            <para>Inserts an ULParameter in the collection at the specified index. </para>
        </summary><param name="index">
            The zero-based index where the parameter is to be inserted within the collection. 
        </param><param name="value">
            The ULParameter object to insert. 
        </param><exception cref="T:System.IndexOutOfRangeException">
            The index is invalid. 
        </exception><exception cref="T:System.ArgumentNullException">
            You cannot set a parameter using a null reference (Nothing in Visual Basic). 
        </exception><exception cref="T:System.InvalidCastException">
            The value specified must be a ULParameter. 
        </exception><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Remove(System.Object)">
            <summary>
            <para>Removes an ULParameter from the collection. </para>
        </summary><param name="value">
            The ULParameter object to remove. 
        </param><exception cref="T:System.ArgumentNullException">
            You cannot set a parameter using a null reference (Nothing in Visual Basic). 
        </exception><exception cref="T:System.InvalidCastException">
            The value specified must be a ULParameter. 
        </exception><exception cref="T:System.ArgumentException">
            The collection does not contain the specified parameter. 
        </exception><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the parameter at the specified index in the collection.</para>
        </summary><param name="index">
            The zero-based index of the parameter to remove. The value must be in the range [0,ULParameterCollection.Count-1]. The first parameter in the collection has an index value of zero. 
        </param><exception cref="T:System.IndexOutOfRangeException">
            The index is invalid. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.RemoveAt(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULParameterCollection.Count"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.RemoveAt(System.String)">
            <summary>
            <para>Removes the parameter with the specified name from the collection.</para>
        </summary><param name="parameterName">
            The name of the parameter to retrieve. 
        </param><exception cref="T:System.IndexOutOfRangeException">
            There is no parameter with the specified name. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary></summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameterCollection.Count">
            <summary>
            <para>Returns the number of ULParameter objects in the collection.</para>
        </summary><value>The number of ULParameter objects in the collection.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameterCollection.IsFixedSize">
            <summary>
            <para>Indicates whether the ULParameterCollection has a fixed size.</para>
        </summary><value>True if this collection has a fixed size, false otherwise.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameterCollection.IsReadOnly">
            <summary>
            <para>Indicates whether the ULParameterCollection is read-only.</para>
        </summary><value>True if this collection is read-only, false otherwise.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameterCollection.IsSynchronized">
            <summary>
            <para>Indicates whether the ULParameterCollection is synchronized.</para>
        </summary><value>True if this collection is synchronized, false otherwise.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameterCollection.SyncRoot">
            <summary>
            <para>Returns an object that can be used to synchronize access to the SAParameterCollection.</para>
        </summary><value>The object to be used to synchronize access to this collection.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameterCollection.Item(System.Int32)">
            <summary>
            <para> Returns the ULParameter at the specified index. In C#, this property is the indexer for the ULParameterCollection class.</para>
        </summary><remarks>
            <para>This is the strongly-typed version of DbParameterCollection.this[int].</para>
        </remarks><param name="index">
            The zero-based index of the parameter to retrieve. The value must be in the range [0,ULParameterCollection.Count-1]. The first parameter in the collection has an index value of zero. 
        </param><returns>
        <para>The ULParameter at the specified index.</para>
        </returns><exception cref="T:System.IndexOutOfRangeException">
            The index is invalid. 
        </exception><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/><seealso cref="P:System.Data.Common.DbParameterCollection.Item(System.Int32)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameterCollection.Item(System.String)">
            <summary>
            <para> Returns the ULParameter with the specified name. In C#, this property is the indexer for the ULParameterCollection class.</para>
        </summary><remarks>
            <para>This is the strongly-typed version of DbParameterCollection.this[string].</para>
        </remarks><param name="parameterName">
            The name of the parameter to retrieve. 
        </param><returns>
        <para>The ULParameter with the specified name.</para>
        </returns><exception cref="T:System.IndexOutOfRangeException">
            There is no parameter with the specified name. 
        </exception><exception cref="T:System.ArgumentNullException">
            You cannot set a parameter using a null (Nothing in Visual Basic) parameter name. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Item(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetValue(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULResID">
            <summary>
            Resource IDs for localized strings
            </summary>
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRes">
            <summary>
            Represents the keys for localized messages from UltraLite for ADO.NET.
            The actual message strings are contained in
            iAynwhere.Data.UltraLite.Message.resources
            </summary>
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULResultSet">
            <summary>
				<para> <i><b>UL Ext: </b></i> Represents an editable result set in an UltraLite database. </para>
		  </summary><remarks>
				<para> There is no constructor for this class. ResultSets are created using the ULCommand.ExecuteResultSet() method of the ULCommand class. </para>
				<code>
' Visual Basic
Dim cmd As ULCommand = new ULCommand( _
    "SELECT emp_id FROM employee", conn _
)
Dim resultSet As ULResultSet = cmd.ExecuteResultSet()
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULCommand cmd = new ULCommand(
    "SELECT emp_id FROM employee", conn
);
ULResultSet resultSet = cmd.ExecuteResultSet();
</code>
				<para> A ULResultSet object represents an editable result set on which you can perform positioned updates and deletes. For fully editable result sets, use ULCommand.ExecuteTable() or a ULDataAdapter.</para>

		</remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteResultSet"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:iAnywhere.Data.UltraLite.ULResultSet"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataAdapter"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/><seealso cref="T:System.Data.IDataReader"/><seealso cref="T:System.Data.IDataRecord"/><seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.AppendBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
				<para> Appends the specified subset of the specified array of System.Bytes to the new value for the specified ULDbType.LongBinary column.</para>
		  </summary><remarks>
				<para> The bytes at position <paramref name="srcOffset"/> (starting from 0) through <paramref name="srcOffset"/>+<paramref name="count"/>-1 of the array <paramref name="val"/> are appended to the value for the specified column. </para>
				<para>When inserting, ULTable.InsertBegin initializes the new value to the column's default value. The data in the row is not actually changed until you execute an ULTable.Insert, and that change is not made permanent until it is committed. </para>
				<para> When updating, the first append on a column clears the current value prior to appending the new value. </para>
				<para> If any of the following are true, a ULException with code ULSQLCode.SQLE_INVALID_PARAMETER is thrown and the destination is not modified:</para>
				<list type="bullet">
				<item>
				<paramref name="val"/> is null. 
				</item>
				<item>
				<paramref name="srcOffset"/> is negative. 
				</item>
				<item>
				<paramref name="count"/> is negative. 
				</item>
				<item>
				<paramref name="srcOffset"/>+<paramref name="count"/> is greater than the <paramref name="val"/> length. 
				</item>
				</list>
				<para>For other errors, a ULException with the appropriate error code is thrown.</para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The value to append to the current new value for the column. 
		  </param><param name="srcOffset">
				The start position in the source array. 
		  </param><param name="count">
				The number of bytes to be copied. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.LongBinary"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_PARAMETER"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Byte"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.AppendChars(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
				<para> Appends the specified subset of the specified array of System.Chars to the new value for the specified ULDbType.LongVarchar column. </para>
		  </summary><remarks>
				<para> The characters at position <paramref name="srcOffset"/> (starting from 0) through <paramref name="srcOffset"/>+<paramref name="count"/>-1 of the array <paramref name="val"/> are appended to the value for the specified column. When inserting, ULTable.InsertBegin initializes the new value to the column's default value. The data in the row is not actually changed until you execute an ULTable.Insert, and that change is not made permanent until it is committed. </para>
				<para> When updating, the first append on a column clears the current value prior to appending the new value. </para>
				<para> If any of the following is true, a ULException with code ULSQLCode.SQLE_INVALID_PARAMETER is thrown and the destination is not modified: </para>
				<list type="bullet">
				<item>
				<paramref name="val"/> is null. 
				</item>
				<item>
				<paramref name="srcOffset"/> is negative. 
				</item>
				<item>
				<paramref name="count"/> is negative. 
				</item>
				<item>
				<paramref name="srcOffset"/>+<paramref name="count"/> is greater than <paramref name="value"/> length. 
				</item>
				</list>
				<para>For other errors, a ULException with the appropriate error code is thrown. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The value to append to the current new value for the column. 
		  </param><param name="srcOffset">
				The start position in the source array. 
		  </param><param name="count">
				The number of bytes to be copied. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.LongVarchar"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="T:iAnywhere.Data.UltraLite.ULException"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_PARAMETER"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Char"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.Delete">
            <summary>
				<para> Deletes the current row. </para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.StartSynchronizationDelete"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.StopSynchronizationDelete"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetBoolean(System.Int32,System.Boolean)">
            <summary>
				<para> Sets the value for the specified column using a System.Boolean. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Boolean"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetByte(System.Int32,System.Byte)">
            <summary>
				<para> Sets the value for the specified column using a System.Byte (unsigned 8-bit integer). </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Byte"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetBytes(System.Int32,System.Byte[])">
            <summary>
				<para> Sets the value for the specified column using an array of System.Bytes. </para>
		  </summary><remarks>
				<para> Only suitable for columns of type ULDbType.Binary or ULDbType.LongBinary, or for columns of type ULDbType.UniqueIdentifier when val is of length 16. The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.Binary"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.LongBinary"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.UniqueIdentifier"/><seealso cref="T:System.Byte"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetDBNull(System.Int32)">
            <summary>
				<para> Sets a column to NULL.</para>
		  </summary><remarks>
				<para> The data is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnNullable(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetDateTime(System.Int32,System.DateTime)">
            <summary>
				<para> Sets the value for the specified column using a System.DateTime. </para>
		  </summary><remarks>
				<para> The set value is accurate to the millisecond. The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.DateTime"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetDecimal(System.Int32,System.Decimal)">
            <summary>
				<para> Sets the value for the specified column using a System.Decimal. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Decimal"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetDouble(System.Int32,System.Double)">
            <summary>
				<para> Sets the value for the specified column using a System.Double. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Double"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetFloat(System.Int32,System.Single)">
            <summary>
				<para> Sets the value for the specified column using a System.Single. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Single"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetGuid(System.Int32,System.Guid)">
            <summary>
				<para> Sets the value for the specified column using a System.Guid. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. Only valid for columns of type ULDbType.UniqueIdentifier or for columns of type ULDbType.Binary with length 16. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetNewUUID"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnSize(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.UniqueIdentifier"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.Binary"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Guid"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetInt16(System.Int32,System.Int16)">
            <summary>
				<para> Sets the value for the specified column using an System.Int16. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Int16"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetInt32(System.Int32,System.Int32)">
            <summary>
				<para> Sets the value for the specified column using an System.Int32. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Int32"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetInt64(System.Int32,System.Int64)">
            <summary>
				<para>Sets the value for the specified column using an Int64. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.Int64"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetString(System.Int32,System.String)">
            <summary>
				<para> Sets the value for the specified column using a System.String. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetTimeSpan(System.Int32,System.TimeSpan)">
            <summary>
				<para> Sets the value for the specified column using a System.TimeSpan. </para>
		  </summary><remarks>
				<para> The set value is accurate to the millisecond and is normalized to a nonnegative value between 0 and 24 hours. The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.TimeSpan"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetToDefault(System.Int32)">
            <summary>
				<para> Sets the value for the specified column to its default value. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTableSchema.GetColumnDefaultValue(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetUInt16(System.Int32,System.UInt16)">
            <summary>
				<para> Sets the value for the specified column using a System.UInt16. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.UInt16"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetUInt32(System.Int32,System.UInt32)">
            <summary>
				<para> Sets the value for the specified column using an System.UInt32. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.UInt32"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.SetUInt64(System.Int32,System.UInt64)">
            <summary>
				<para> Sets the value for the specified column using a System.UInt64. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an ULTable.Insert or Update, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="colID">
				The ID number of the column. The value must be in the range [0,ULDataReader.FieldCount-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="T:System.UInt64"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.UpdateBegin">
            <summary>
				<para> Prepares to update the current row. </para>
		  </summary><remarks>
				<para> Column values are modified by calling the appropriate setType or AppendType method(s). The first append on a column clears the current column value prior to appending the new value. </para>
				<para> The data in the row is not actually changed until you call Update(), and that change is not made permanent until it is committed. </para>
				<para> Modifying columns in the index used to open the table affects any active searches in unpredictable ways. Columns in the primary key of the table can not be updated. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
			</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.Update"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSet.Update">
            <summary>
				<para> Updates the current row with the current column values (specified using the set methods). </para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULResultSet.UpdateBegin"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULResultSetSchema">
            <summary>
				<para><i><b>UL Ext: </b></i> Represents the schema of an UltraLite result set. </para>
		  </summary><remarks>
				<para> There is no constructor for this class. A ULResultSetSchema object is attached to a result set as its ULDataReader.Schema. </para>
				<para> A result set schema is only valid while the data reader is open. </para>
		  </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/><seealso cref="T:iAnywhere.Data.UltraLite.ULResultSetSchema"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCursorSchema"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSetSchema.VerifyOpen">
            <summary></summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULResultSetSchema.Name">
            <summary>
				<para> Returns the name of the cursor. </para>
		  </summary><value>The SQL statement that generated the ULResultSetSchema.</value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULServerSyncListener">
            <summary>
				<para> <i><b>UL Ext: </b></i> The listener interface for receiving server synchronization messages. </para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULServerSyncListener.ServerSyncInvoked(System.String)">
            <summary>
				<para> Invoked when the MobiLink Listener for server-initiated synchronizations calls the application to perform synchronization. </para>
		  </summary><remarks>
				<para> This method is invoked by a separate thread. To avoid multi-threading issues, it should post an event to the UI. If you are using multi-threading, it is recommended that you use a separate connection and use the lock keyword to access any objects shared with the rest of the application. </para>
		  </remarks><param name="messageName">
				The name of the message sent to the application. 
		  </param><example>
				The following Visual Basic code demonstrates how to receive a server synchronization request and perform a synchronization in the UI thread. 
				<code>
Imports iAnywhere.Data.UltraLite
   
Public Class MainWindow
    Inherits System.Windows.Forms.Form
    Implements ULServerSyncListener
    
	Private conn As ULConnection

    Public Sub New(ByVal args() As String)
        MyBase.New()

        'This call is required by the Windows Form Designer.
        InitializeComponent()

        'Add any initialization after the InitializeComponent() call
        ULConnection.DatabaseManager.SetServerSyncListener( _
            "myCompany.mymsg", "myCompany.myapp", Me _
        )
        'Create Connection
        ...
    End Sub

    Protected Overrides Sub OnClosing( _
        ByVal e As System.ComponentModel.CancelEventArgs _
    )
        ULConnection.DatabaseManager.SetServerSyncListener( _
            Nothing, Nothing, Nothing _
        )
        MyBase.OnClosing(e)
    End Sub

    Public Sub ServerSyncInvoked(ByVal messageName As String) _
        Implements ULServerSyncListener.ServerSyncInvoked

        Me.Invoke(New EventHandler(AddressOf Me.ServerSyncAction))
    End Sub

    Public Sub ServerSyncAction( _
        ByVal sender As Object, ByVal e As EventArgs _
    )
        ' Do Server sync
        conn.Synchronize()
    End Sub
End Class
                </code>
                <para>The following C# code demonstrates how to receive a server synchronization request and perform a synchronization in the UI thread. </para>
                <code>
using iAnywhere.Data.UltraLite;
public class Form1 : System.Windows.Forms.Form, ULServerSyncListener
{
    private System.Windows.Forms.MainMenu mainMenu1;
    private ULConnection conn;

    public Form1()
    {
        //
        // Required for Windows Form Designer support
        //
        InitializeComponent();

        //
        // TODO: Add any constructor code after
        // InitializeComponent call
        //
        ULConnection.DatabaseManager.SetServerSyncListener(
            "myCompany.mymsg", "myCompany.myapp", this
        );
    
	    // Create connection
        ...
    }

    protected override void Dispose( bool disposing )
    {
        base.Dispose( disposing );
    }

    protected override void OnClosing(
        System.ComponentModel.CancelEventArgs e)
    {
        ULConnection.DatabaseManager.SetServerSyncListener(
            null, null, null
        );
        base.OnClosing(e);
    }

    public void ServerSyncInvoked( string messageName )
    {
        this.Invoke( new EventHandler( ServerSyncHandler ) );
    }

    internal void ServerSyncHandler(object sender, EventArgs e)
    {
        conn.Synchronize();
    }
}
</code>











		  </example>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULServerSyncWorker">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSQLCode">
            <summary><para>
            <b>UL Ext.: </b> Enumerates the SQL codes that may be reported by UltraLite.NET.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NOERROR">
            <summary><para>SQLE_NOERROR(0) - This code indicates that there was no error or warning.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NO_TABLES_TO_SYNCHRONIZE">
            <summary><para>See @olink targetdoc="errors" targetptr="err150"@SQLE_NO_TABLES_TO_SYNCHRONIZE(150)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_EVENT_NOTIFICATION_QUEUE_NOT_FOUND_WARN">
            <summary><para>See @olink targetdoc="errors" targetptr="err148"@SQLE_EVENT_NOTIFICATION_QUEUE_NOT_FOUND_WARN(148)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_EVENT_NOTIFICATIONS_LOST">
            <summary><para>See @olink targetdoc="errors" targetptr="err147"@SQLE_EVENT_NOTIFICATIONS_LOST(147)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_EVENT_NOTIFICATION_QUEUE_FULL">
            <summary><para>See @olink targetdoc="errors" targetptr="err146"@SQLE_EVENT_NOTIFICATION_QUEUE_FULL(146)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DUPLICATE_ROW_FOUND_IN_DOWNLOAD">
            <summary><para>See @olink targetdoc="errors" targetptr="err145"@SQLE_DUPLICATE_ROW_FOUND_IN_DOWNLOAD(145)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_MIRROR_FILE_REQUIRES_CHECKSUMS">
            <summary><para>See @olink targetdoc="errors" targetptr="err144"@SQLE_MIRROR_FILE_REQUIRES_CHECKSUMS(144)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CORRUPT_PAGE_READ_RETRY">
            <summary><para>See @olink targetdoc="errors" targetptr="err143"@SQLE_CORRUPT_PAGE_READ_RETRY(143)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ENCRYPTION_NOT_ENABLED_WARNING">
            <summary><para>See @olink targetdoc="errors" targetptr="err140"@SQLE_ENCRYPTION_NOT_ENABLED_WARNING(140)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DUPLICATE_OPTION">
            <summary><para>See @olink targetdoc="errors" targetptr="err139"@SQLE_DUPLICATE_OPTION(139)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PUBLICATION_PREDICATE_IGNORED">
            <summary><para>See @olink targetdoc="errors" targetptr="err138"@SQLE_PUBLICATION_PREDICATE_IGNORED(138)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ROW_DELETED_TO_MAINTAIN_REFERENTIAL_INTEGRITY">
            <summary><para>See @olink targetdoc="errors" targetptr="err137"@SQLE_ROW_DELETED_TO_MAINTAIN_REFERENTIAL_INTEGRITY(137)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ROW_DROPPED_DURING_SCHEMA_UPGRADE">
            <summary><para>See @olink targetdoc="errors" targetptr="err130"@SQLE_ROW_DROPPED_DURING_SCHEMA_UPGRADE(130)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CANNOT_EXECUTE_STMT">
            <summary><para>See @olink targetdoc="errors" targetptr="err111"@SQLE_CANNOT_EXECUTE_STMT(111)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TRUNCATED">
            <summary><para>See @olink targetdoc="errors" targetptr="err101"@SQLE_TRUNCATED(101)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NOTFOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="err100"@SQLE_NOTFOUND(100)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_START_STOP_DATABASE_DENIED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm75"@SQLE_START_STOP_DATABASE_DENIED(-75)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DYNAMIC_MEMORY_EXHAUSTED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm78"@SQLE_DYNAMIC_MEMORY_EXHAUSTED(-78)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNABLE_TO_START_DATABASE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm82"@SQLE_UNABLE_TO_START_DATABASE(-82)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DATABASE_NAME_REQUIRED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm87"@SQLE_DATABASE_NAME_REQUIRED(-87)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ARGUMENT_CANNOT_BE_NULL">
            <summary><para>See @olink targetdoc="errors" targetptr="errm90"@SQLE_ARGUMENT_CANNOT_BE_NULL(-90)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_PARSE_PARAMETER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm95"@SQLE_INVALID_PARSE_PARAMETER(-95)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ENGINE_ALREADY_RUNNING">
            <summary><para>See @olink targetdoc="errors" targetptr="errm96"@SQLE_ENGINE_ALREADY_RUNNING(-96)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ENGINE_NOT_RUNNING">
            <summary><para>See @olink targetdoc="errors" targetptr="errm100"@SQLE_ENGINE_NOT_RUNNING(-100)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TOO_MANY_CONNECTIONS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm102"@SQLE_TOO_MANY_CONNECTIONS(-102)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_LOGON">
            <summary><para>See @olink targetdoc="errors" targetptr="errm103"@SQLE_INVALID_LOGON(-103)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNABLE_TO_CONNECT">
            <summary><para>See @olink targetdoc="errors" targetptr="errm105"@SQLE_UNABLE_TO_CONNECT(-105)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CANNOT_OPEN_LOG">
            <summary><para>See @olink targetdoc="errors" targetptr="errm106"@SQLE_CANNOT_OPEN_LOG(-106)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CONNECTION_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm108"@SQLE_CONNECTION_NOT_FOUND(-108)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NAME_NOT_UNIQUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm110"@SQLE_NAME_NOT_UNIQUE(-110)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INDEX_NAME_NOT_UNIQUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm111"@SQLE_INDEX_NAME_NOT_UNIQUE(-111)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_EXISTING_PRIMARY_KEY">
            <summary><para>See @olink targetdoc="errors" targetptr="errm112"@SQLE_EXISTING_PRIMARY_KEY(-112)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_FOREIGN_KEY_DEF">
            <summary><para>See @olink targetdoc="errors" targetptr="errm113"@SQLE_INVALID_FOREIGN_KEY_DEF(-113)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NO_PRIMARY_KEY">
            <summary><para>See @olink targetdoc="errors" targetptr="errm118"@SQLE_NO_PRIMARY_KEY(-118)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PERMISSION_DENIED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm121"@SQLE_PERMISSION_DENIED(-121)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PRIMARY_KEY_TWICE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm126"@SQLE_PRIMARY_KEY_TWICE(-126)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COLUMN_IN_INDEX">
            <summary><para>See @olink targetdoc="errors" targetptr="errm127"@SQLE_COLUMN_IN_INDEX(-127)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_STATEMENT">
            <summary><para>See @olink targetdoc="errors" targetptr="errm130"@SQLE_INVALID_STATEMENT(-130)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNTAX_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm131"@SQLE_SYNTAX_ERROR(-131)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_STATEMENT_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm132"@SQLE_STATEMENT_ERROR(-132)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NOT_IMPLEMENTED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm134"@SQLE_NOT_IMPLEMENTED(-134)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNKNOWN_USERID">
            <summary><para>See @olink targetdoc="errors" targetptr="errm140"@SQLE_UNKNOWN_USERID(-140)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TABLE_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm141"@SQLE_TABLE_NOT_FOUND(-141)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COLUMN_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm143"@SQLE_COLUMN_NOT_FOUND(-143)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COLUMN_AMBIGUOUS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm144"@SQLE_COLUMN_AMBIGUOUS(-144)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_FOREIGN_KEY_NAME_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm145"@SQLE_FOREIGN_KEY_NAME_NOT_FOUND(-145)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNKNOWN_FUNC">
            <summary><para>See @olink targetdoc="errors" targetptr="errm148"@SQLE_UNKNOWN_FUNC(-148)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_GROUP_SELECT">
            <summary><para>See @olink targetdoc="errors" targetptr="errm149"@SQLE_INVALID_GROUP_SELECT(-149)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_AGGREGATES_NOT_ALLOWED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm150"@SQLE_AGGREGATES_NOT_ALLOWED(-150)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SUBQUERY_SELECT_LIST">
            <summary><para>See @olink targetdoc="errors" targetptr="errm151"@SQLE_SUBQUERY_SELECT_LIST(-151)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_ORDER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm152"@SQLE_INVALID_ORDER(-152)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_UNION">
            <summary><para>See @olink targetdoc="errors" targetptr="errm153"@SQLE_INVALID_UNION(-153)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_WRONG_PARAMETER_COUNT">
            <summary><para>See @olink targetdoc="errors" targetptr="errm154"@SQLE_WRONG_PARAMETER_COUNT(-154)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_VARIABLE_INVALID">
            <summary><para>See @olink targetdoc="errors" targetptr="errm155"@SQLE_VARIABLE_INVALID(-155)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_EXPRESSION_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm156"@SQLE_EXPRESSION_ERROR(-156)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CONVERSION_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm157"@SQLE_CONVERSION_ERROR(-157)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_OVERFLOW_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm158"@SQLE_OVERFLOW_ERROR(-158)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CONVERSION_ERROR_LOAD_TABLE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm162"@SQLE_CONVERSION_ERROR_LOAD_TABLE(-162)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NO_COLUMN_NAME">
            <summary><para>See @olink targetdoc="errors" targetptr="errm163"@SQLE_NO_COLUMN_NAME(-163)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CURSOR_NOT_DECLARED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm170"@SQLE_CURSOR_NOT_DECLARED(-170)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CURSOR_ALREADY_OPEN">
            <summary><para>See @olink targetdoc="errors" targetptr="errm172"@SQLE_CURSOR_ALREADY_OPEN(-172)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CURSOR_NOT_OPEN">
            <summary><para>See @olink targetdoc="errors" targetptr="errm180"@SQLE_CURSOR_NOT_OPEN(-180)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NO_INDICATOR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm181"@SQLE_NO_INDICATOR(-181)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INDEX_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm183"@SQLE_INDEX_NOT_FOUND(-183)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SUBQUERY_RESULT_NOT_UNIQUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm186"@SQLE_SUBQUERY_RESULT_NOT_UNIQUE(-186)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CURSOROP_NOT_ALLOWED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm187"@SQLE_CURSOROP_NOT_ALLOWED(-187)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NON_UPDATEABLE_COLUMN">
            <summary><para>See @olink targetdoc="errors" targetptr="errm190"@SQLE_NON_UPDATEABLE_COLUMN(-190)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PRIMARY_KEY_NOT_UNIQUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm193"@SQLE_PRIMARY_KEY_NOT_UNIQUE(-193)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_FOREIGN_KEY">
            <summary><para>See @olink targetdoc="errors" targetptr="errm194"@SQLE_INVALID_FOREIGN_KEY(-194)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COLUMN_CANNOT_BE_NULL">
            <summary><para>See @olink targetdoc="errors" targetptr="errm195"@SQLE_COLUMN_CANNOT_BE_NULL(-195)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INDEX_NOT_UNIQUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm196"@SQLE_INDEX_NOT_UNIQUE(-196)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NO_CURRENT_ROW">
            <summary><para>See @olink targetdoc="errors" targetptr="errm197"@SQLE_NO_CURRENT_ROW(-197)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PRIMARY_KEY_VALUE_REF">
            <summary><para>See @olink targetdoc="errors" targetptr="errm198"@SQLE_PRIMARY_KEY_VALUE_REF(-198)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ONLY_ONE_TABLE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm199"@SQLE_ONLY_ONE_TABLE(-199)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_OPTION">
            <summary><para>See @olink targetdoc="errors" targetptr="errm200"@SQLE_INVALID_OPTION(-200)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_OPTION_SETTING">
            <summary><para>See @olink targetdoc="errors" targetptr="errm201"@SQLE_INVALID_OPTION_SETTING(-201)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_WRONG_NUM_OF_INSERT_COLS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm207"@SQLE_WRONG_NUM_OF_INSERT_COLS(-207)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ROW_UPDATED_SINCE_READ">
            <summary><para>See @olink targetdoc="errors" targetptr="errm208"@SQLE_ROW_UPDATED_SINCE_READ(-208)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_LOCKED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm210"@SQLE_LOCKED(-210)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TABLE_IN_USE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm214"@SQLE_TABLE_IN_USE(-214)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_IDENTIFIER_TOO_LONG">
            <summary><para>See @olink targetdoc="errors" targetptr="errm250"@SQLE_IDENTIFIER_TOO_LONG(-250)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DUPLICATE_FOREIGN_KEY">
            <summary><para>See @olink targetdoc="errors" targetptr="errm251"@SQLE_DUPLICATE_FOREIGN_KEY(-251)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PUBLICATION_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm280"@SQLE_PUBLICATION_NOT_FOUND(-280)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TABLE_HAS_PUBLICATIONS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm281"@SQLE_TABLE_HAS_PUBLICATIONS(-281)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INTERRUPTED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm299"@SQLE_INTERRUPTED(-299)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm300"@SQLE_ERROR(-300)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DATABASE_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm301"@SQLE_DATABASE_ERROR(-301)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DEVICE_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm305"@SQLE_DEVICE_ERROR(-305)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_MEMORY_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm309"@SQLE_MEMORY_ERROR(-309)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CANNOT_ACCESS_FILE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm602"@SQLE_CANNOT_ACCESS_FILE(-602)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DBSPACE_FULL">
            <summary><para>See @olink targetdoc="errors" targetptr="errm604"@SQLE_DBSPACE_FULL(-604)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COULD_NOT_LOAD_LIBRARY">
            <summary><para>See @olink targetdoc="errors" targetptr="errm620"@SQLE_COULD_NOT_LOAD_LIBRARY(-620)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COULD_NOT_FIND_FUNCTION">
            <summary><para>See @olink targetdoc="errors" targetptr="errm621"@SQLE_COULD_NOT_FIND_FUNCTION(-621)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DATATYPE_NOT_ALLOWED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm624"@SQLE_DATATYPE_NOT_ALLOWED(-624)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DIV_ZERO_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm628"@SQLE_DIV_ZERO_ERROR(-628)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_STRING_RIGHT_TRUNCATION">
            <summary><para>See @olink targetdoc="errors" targetptr="errm638"@SQLE_STRING_RIGHT_TRUNCATION(-638)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_DESCRIPTOR_INDEX">
            <summary><para>See @olink targetdoc="errors" targetptr="errm640"@SQLE_INVALID_DESCRIPTOR_INDEX(-640)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ERROR_IN_ASSIGNMENT">
            <summary><para>See @olink targetdoc="errors" targetptr="errm641"@SQLE_ERROR_IN_ASSIGNMENT(-641)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_DESCRIPTOR_NAME">
            <summary><para>See @olink targetdoc="errors" targetptr="errm642"@SQLE_INVALID_DESCRIPTOR_NAME(-642)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PAGE_SIZE_INVALID">
            <summary><para>See @olink targetdoc="errors" targetptr="errm644"@SQLE_PAGE_SIZE_INVALID(-644)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DATABASE_NOT_CREATED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm645"@SQLE_DATABASE_NOT_CREATED(-645)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_INDEX_TYPE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm650"@SQLE_INVALID_INDEX_TYPE(-650)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DROP_DATABASE_FAILED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm651"@SQLE_DROP_DATABASE_FAILED(-651)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_METHOD_CANNOT_BE_CALLED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm669"@SQLE_METHOD_CANNOT_BE_CALLED(-669)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_AMBIGUOUS_INDEX_NAME">
            <summary><para>See @olink targetdoc="errors" targetptr="errm678"@SQLE_AMBIGUOUS_INDEX_NAME(-678)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DUPLICATE_CURSOR_NAME">
            <summary><para>See @olink targetdoc="errors" targetptr="errm683"@SQLE_DUPLICATE_CURSOR_NAME(-683)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_RESOURCE_GOVERNOR_EXCEEDED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm685"@SQLE_RESOURCE_GOVERNOR_EXCEEDED(-685)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_BAD_PARAM_INDEX">
            <summary><para>See @olink targetdoc="errors" targetptr="errm689"@SQLE_BAD_PARAM_INDEX(-689)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_PARAMETER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm735"@SQLE_INVALID_PARAMETER(-735)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NOT_SUPPORTED_IN_ULTRALITE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm749"@SQLE_NOT_SUPPORTED_IN_ULTRALITE(-749)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_SQL_IDENTIFIER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm760"@SQLE_INVALID_SQL_IDENTIFIER(-760)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_EVENT_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm771"@SQLE_EVENT_NOT_FOUND(-771)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UPLOAD_FAILED_AT_SERVER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm794"@SQLE_UPLOAD_FAILED_AT_SERVER(-794)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NO_MATCHING_SELECT_ITEM">
            <summary><para>See @olink targetdoc="errors" targetptr="errm812"@SQLE_NO_MATCHING_SELECT_ITEM(-812)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NON_UPDATEABLE_CURSOR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm813"@SQLE_NON_UPDATEABLE_CURSOR(-813)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_FILE_IN_USE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm816"@SQLE_FILE_IN_USE(-816)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TOO_MANY_TEMP_TABLES">
            <summary><para>See @olink targetdoc="errors" targetptr="errm817"@SQLE_TOO_MANY_TEMP_TABLES(-817)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TABLE_ALREADY_INCLUDED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm822"@SQLE_TABLE_ALREADY_INCLUDED(-822)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ALIAS_NOT_UNIQUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm830"@SQLE_ALIAS_NOT_UNIQUE(-830)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ALIAS_NOT_YET_DEFINED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm831"@SQLE_ALIAS_NOT_YET_DEFINED(-831)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DOWNLOAD_CONFLICT">
            <summary><para>See @olink targetdoc="errors" targetptr="errm839"@SQLE_DOWNLOAD_CONFLICT(-839)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_BAD_ENCRYPTION_KEY">
            <summary><para>See @olink targetdoc="errors" targetptr="errm840"@SQLE_BAD_ENCRYPTION_KEY(-840)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DECRYPT_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm851"@SQLE_DECRYPT_ERROR(-851)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CURSOR_INVALID_STATE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm853"@SQLE_CURSOR_INVALID_STATE(-853)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SERVER_SYNCHRONIZATION_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm857"@SQLE_SERVER_SYNCHRONIZATION_ERROR(-857)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_MULTIPLE_AGGREGATE_COLUMNS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm861"@SQLE_MULTIPLE_AGGREGATE_COLUMNS(-861)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_DISTINCT_AGGREGATE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm863"@SQLE_INVALID_DISTINCT_AGGREGATE(-863)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ULTRALITE_OBJ_CLOSED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm908"@SQLE_ULTRALITE_OBJ_CLOSED(-908)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CONSTRAINT_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm929"@SQLE_CONSTRAINT_NOT_FOUND(-929)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNABLE_TO_START_DATABASE_VER_NEWER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm934"@SQLE_UNABLE_TO_START_DATABASE_VER_NEWER(-934)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_CONSTRAINT_REF">
            <summary><para>See @olink targetdoc="errors" targetptr="errm937"@SQLE_INVALID_CONSTRAINT_REF(-937)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_STATUS_UNKNOWN">
            <summary><para>See @olink targetdoc="errors" targetptr="errm952"@SQLE_SYNC_STATUS_UNKNOWN(-952)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SCHEMA_UPGRADE_NOT_ALLOWED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm953"@SQLE_SCHEMA_UPGRADE_NOT_ALLOWED(-953)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ULTRALITE_DATABASE_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm954"@SQLE_ULTRALITE_DATABASE_NOT_FOUND(-954)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CONNECTION_ALREADY_EXISTS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm955"@SQLE_CONNECTION_ALREADY_EXISTS(-955)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_INVALID">
            <summary><para>See @olink targetdoc="errors" targetptr="errm956"@SQLE_SYNC_INFO_INVALID(-956)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COMPRESSION_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm959"@SQLE_COMPRESSION_ERROR(-959)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DECOMPRESSION_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm960"@SQLE_DECOMPRESSION_ERROR(-960)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DEVICE_IO_FAILED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm974"@SQLE_DEVICE_IO_FAILED(-974)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INCORRECT_VOLUME_ID">
            <summary><para>See @olink targetdoc="errors" targetptr="errm975"@SQLE_INCORRECT_VOLUME_ID(-975)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ENCRYPTION_INITIALIZATION_FAILED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm984"@SQLE_ENCRYPTION_INITIALIZATION_FAILED(-984)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CANNOT_REGISTER_LISTENER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm992"@SQLE_CANNOT_REGISTER_LISTENER(-992)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNRECOGNIZED_OPTION">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1002"@SQLE_UNRECOGNIZED_OPTION(-1002)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_FILE_NOT_DB">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1004"@SQLE_FILE_NOT_DB(-1004)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_FILE_WRONG_VERSION">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1005"@SQLE_FILE_WRONG_VERSION(-1005)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_FILE_BAD_DB">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1006"@SQLE_FILE_BAD_DB(-1006)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_OPTION_VALUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1053"@SQLE_INVALID_OPTION_VALUE(-1053)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_FEATURE_NOT_ENABLED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1092"@SQLE_FEATURE_NOT_ENABLED(-1092)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COLUMN_NOT_STREAMABLE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1100"@SQLE_COLUMN_NOT_STREAMABLE(-1100)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COLUMN_NOT_INDEXED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1101"@SQLE_COLUMN_NOT_INDEXED(-1101)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DOWNLOAD_RESTART_FAILED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1102"@SQLE_DOWNLOAD_RESTART_FAILED(-1102)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PARTIAL_DOWNLOAD_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1103"@SQLE_PARTIAL_DOWNLOAD_NOT_FOUND(-1103)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TOO_MANY_USERS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1104"@SQLE_TOO_MANY_USERS(-1104)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TOO_MANY_PUBLICATIONS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1106"@SQLE_TOO_MANY_PUBLICATIONS(-1106)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TOO_MANY_BLOB_REFS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1107"@SQLE_TOO_MANY_BLOB_REFS(-1107)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CANNOT_ACCESS_FILESYSTEM">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1108"@SQLE_CANNOT_ACCESS_FILESYSTEM(-1108)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_KEYLESS_ENCRYPTION">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1109"@SQLE_KEYLESS_ENCRYPTION(-1109)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_NOT_REENTRANT">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1110"@SQLE_SYNC_NOT_REENTRANT(-1110)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_REQUIRED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1111"@SQLE_SYNC_INFO_REQUIRED(-1111)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_FILE_VOLUME_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1112"@SQLE_FILE_VOLUME_NOT_FOUND(-1112)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ROW_EXCEEDS_PAGE_SIZE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1117"@SQLE_ROW_EXCEEDS_PAGE_SIZE(-1117)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CANNOT_CHANGE_ML_REMOTE_ID">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1118"@SQLE_CANNOT_CHANGE_ML_REMOTE_ID(-1118)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_MAX_ROW_SIZE_EXCEEDED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1132"@SQLE_MAX_ROW_SIZE_EXCEEDED(-1132)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_MIRROR_FILE_MISMATCH">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1138"@SQLE_MIRROR_FILE_MISMATCH(-1138)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ENCRYPTION_NOT_ENABLED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1143"@SQLE_ENCRYPTION_NOT_ENABLED(-1143)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CORRUPT_ULTRALITE_INDEX">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1185"@SQLE_CORRUPT_ULTRALITE_INDEX(-1185)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CORRUPT_ULTRALITE_DATABASE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1186"@SQLE_CORRUPT_ULTRALITE_DATABASE(-1186)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_USER_ALREADY_EXISTS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1198"@SQLE_USER_ALREADY_EXISTS(-1198)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_PROFILE_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1217"@SQLE_SYNC_PROFILE_NOT_FOUND(-1217)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_PROFILE_ALREADY_EXISTS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1223"@SQLE_SYNC_PROFILE_ALREADY_EXISTS(-1223)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_PROFILE_INVALID">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1224"@SQLE_SYNC_PROFILE_INVALID(-1224)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TOO_MANY_CURSORS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1230"@SQLE_TOO_MANY_CURSORS(-1230)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_EVENT_NOTIFICATION_QUEUE_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1263"@SQLE_EVENT_NOTIFICATION_QUEUE_NOT_FOUND(-1263)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_EVENT_OBJECT_NAME">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1264"@SQLE_INVALID_EVENT_OBJECT_NAME(-1264)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_EVENT_OBJECT_ALREADY_EXISTS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1265"@SQLE_EVENT_OBJECT_ALREADY_EXISTS(-1265)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_EVENT_NOTIFICATION_QUEUE_TIMEOUT">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1266"@SQLE_EVENT_NOTIFICATION_QUEUE_TIMEOUT(-1266)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_EVENT_PARAMETER_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1267"@SQLE_EVENT_PARAMETER_NOT_FOUND(-1267)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_MOBILINK_COMMUNICATIONS_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1305"@SQLE_MOBILINK_COMMUNICATIONS_ERROR(-1305)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_MAX_STRING_LENGTH_EXCEEDED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1313"@SQLE_MAX_STRING_LENGTH_EXCEEDED(-1313)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SCRIPT_MISSING_DELIMITER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1315"@SQLE_SCRIPT_MISSING_DELIMITER(-1315)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TABLE_MUST_SYNCHRONIZE_IN_PUB">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1328"@SQLE_TABLE_MUST_SYNCHRONIZE_IN_PUB(-1328)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_DOWNLOAD_VALUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1382"@SQLE_INVALID_DOWNLOAD_VALUE(-1382)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SLERR_SRID_UNKNOWN">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1409"@SQLE_SLERR_SRID_UNKNOWN(-1409)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SLERR_NO_XFORM_DEF">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1444"@SQLE_SLERR_NO_XFORM_DEF(-1444)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SLERR_CREATE_INDEX_UNIQUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1453"@SQLE_SLERR_CREATE_INDEX_UNIQUE(-1453)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_LOAD_TABLE_DATA_FILE_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1496"@SQLE_LOAD_TABLE_DATA_FILE_ERROR(-1496)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_MOBILINK_AUTHENTICATION_FAILED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1497"@SQLE_MOBILINK_AUTHENTICATION_FAILED(-1497)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNKNOWN_PROPERTY">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1498"@SQLE_UNKNOWN_PROPERTY(-1498)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNKNOWN_COLLATION">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1506"@SQLE_UNKNOWN_COLLATION(-1506)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ULTRALITE_DEPLOY_FILE_INVALID">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1625"@SQLE_ULTRALITE_DEPLOY_FILE_INVALID(-1625)@/olink@.</para></summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULStreamErrorCode">
            <summary><para><b>UL Ext.: </b> Enumerates the error codes that may
            be reported by streams during synchronization.
            </para></summary>
            <seealso cref="P:iAnywhere.Data.UltraLite.ULSyncResult.StreamErrorCode"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.NONE">
            <summary><para>
            This code indicates there was no network error.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.PARAMETER">
            <summary><para>
            Network parameters are of the form "name=value;[name2=value2[;...]]". This code indicates an invalid parameter value. Consult the documentation for the corresponding parameter name, and correct the parameter value.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.PARAMETER_NOT_UINT32">
            <summary><para>
            Network parameters are of the form "name=value;[name2=value2[;...]]". The parameter value is not an unsigned integer. Locate the offending parameter specification and change the value of the parameter to an unsigned integer.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.PARAMETER_NOT_UINT32_RANGE">
            <summary><para>
            Network parameters are of the form "name=value;[name2=value2[;...]]". The parameter value is not an unsigned integer value or range. Locate the offending parameter specification and change the value of the parameter to an unsigned integer or an unsigned range. An unsigned range has the form: NNN-NNN.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.PARAMETER_NOT_BOOLEAN">
            <summary><para>
            Network parameters are of the form "name=value;[name2=value2[;...]]". The parameter value is not a boolean value. Locate the offending parameter specification and change the value of the parameter to either 0 (for off or false) or 1 (for on or true).
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.PARAMETER_NOT_HEX">
            <summary><para>
            Network parameters are of the form "name=value;[name2=value2[;...]]". The parameter value is not a hexadecimal (base 16) value. Locate the offending parameter specification and change the value of the parameter to a hexadecimal value.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.MEMORY_ALLOCATION">
            <summary><para>
            The network layer was unable to allocate enough bytes of storage. Free up system memory and retry the operation. The technique used to free up system memory depends on the operating system and how it is configured. The simplest technique is to reduce the number of active processes. Consult your operating system documentation for details.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.PARSE">
            <summary><para>
            Network parameters are of the form "name=value;[name2=value2[;...]]". Optionally, the entire list of parameters may be enclosed in parentheses. The given string does not follow this convention. Inspect the string, fix any formatting problems, and retry the operation.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.READ">
            <summary><para>
            Unable to read the given number of bytes from the network layer. Note that reads may occur as part of any larger network operation. For example, some network layers have sub-layers that perform several reads and writes as part of a basic operation in the upper layer.
            The cause of a read error is usually one of the following:
            </para><para>
            1) The network had a problem that caused the read to fail.
            Reconnect and retry the operation.
            </para><para>
            2) The connection timed out.
            Reconnect and retry the operation.
            </para><para>
            3) The other side of the connection cleanly terminated the connection.
            Consult the client and/or server logs for errors that indicate why the connection has been dropped.
            Consult the output-log errors and fix the cause, then retry the operation.
            </para><para>
            4) The process at the other side of the connection was aborted.
            Consult the client and/or server output logs for errors that indicate why the process was aborted.
            If the process was shut down by other than normal means, there may not be any errors in its output log.
            Reconnect and retry the operation.
            </para><para>
            5) The system is low on resources, and cannot perform the read.
            Free up system resources, reconnect and retry the operation. If subsequent retry attempts fail, consult your network administrator.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.WRITE">
            <summary><para>
            Unable to write the given number of bytes to the network layer. Note that writes may occur as part of any larger network operation. For example, some network layers have sub-layers that perform several reads and writes as part of a basic operation in the upper layer.
            The cause of a write error is usually one of the following:
            </para><para>
            1) The network had a problem that caused the write to fail.
            Reconnect and retry the operation.
            </para><para>
            2) The connection timed out.
            Reconnect and retry the operation.
            </para><para>
            3) The other side of the connection cleanly terminated the connection.
            Consult the client and/or server logs for errors that indicate why the connection has been dropped.
            Consult the output-log errors and fix the cause, then retry the operation.
            </para><para>
            4) The process at the other side of the connection was aborted.
            Consult the client and/or server output logs for errors that indicate why the process was aborted.
            If the process was shut down by other than normal means, there may not be any errors in its output log.
            Reconnect and retry the operation.
            </para><para>
            5) The system is low on resources, and cannot perform the write.
            Free up system resources, reconnect and retry the operation. If subsequent retry attempts fail, consult your network administrator.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.END_WRITE">
            <summary><para>
            Unable to finish a sequence of writes to the network.
            See also: WRITE
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.END_READ">
            <summary><para>
            Unable to finish a sequence of reads from the network.
            See also: READ
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.NOT_IMPLEMENTED">
            <summary><para>
            An unimplemented internal feature was requested. Please contact technical support.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.WOULD_BLOCK">
            <summary><para>
            A requested operation would block where blocking is undesirable or unexpected.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.GENERATE_RANDOM">
            <summary><para>
            The secure network layer requires a random number but was unable to generate one. Free up system resources, reconnect and retry the operation.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.INIT_RANDOM">
            <summary><para>
            The secure network layer could not initialize its random number generator. Free up system resources, reconnect and retry the operation.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SEED_RANDOM">
            <summary><para>
            The secure network layer could not seed its random number generator. Free up system resources, reconnect and retry the operation.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.CREATE_RANDOM_OBJECT">
            <summary><para>
            The secure network layer could not create a random-number-generating object. Free up system resources, reconnect and retry the operation.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SHUTTING_DOWN">
            <summary><para>
            The MobiLink server encountered an error in the network layer during shutdown. Perhaps some network operations pending at the time of shutdown were affected.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.DEQUEUING_CONNECTION">
            <summary><para>
            The MobiLink server encountered an error while attempting to get a queued connection (synchronization) request. Free up system resources. If the problem persists, restart the MobiLink server.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_ROOT">
            <summary><para>
            The root certificate in the chain is invalid. At the time of publication, this error was defined but not used.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_COMPANY_NAME">
            <summary><para>
            The given organization name is not in the certificate chain. Check the following:
            </para><para>
            1) The organization name was properly entered.
            </para><para>
            2) The correct certificate file was specified.
            </para><para>
            3) The organization name is in the certificate chain. You can verify this with the viewcert utility.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_NOT_TRUSTED">
            <summary><para>
            The server's certificate was not signed by a trusted authority. Check the following:
            </para><para>
            1) The certificate file name was properly specified.
            </para><para>
            2) The certificate file contains one or more certificates.
            </para><para>
            3) The certificate file contains the correct certificate(s).
            </para><para>
            4) The client's list of trusted root certificates includes the server's root certificate.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_DUPLICATE_CONTEXT">
            <summary><para>
            The secure network layer was unable to duplicate a security context.
            Free up system resources and retry the operation.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_SET_IO">
            <summary><para>
            The secure network layer was unable to attach to the network layer. Free up system resources and retry the operation.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_FILE_NOT_FOUND">
            <summary><para>
            The certificate file could not be opened. Check the following:
            </para><para>
            1) The certificate file name was properly specified.
            </para><para>
            2) The certificate file exists.
            </para><para>
            3) The certificate file contains one or more certificates.
            </para><para>
            4) The certificate file contains the correct certificate(s).
            </para><para>
            5) The program attempting to open the certificate file has sufficient privileges to read the file. This only applies to operating systems having user and/or file permissions.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_READ_CERTIFICATE">
            <summary><para>
            The certificate file could not be read. Check the following:
            </para><para>
            1) The password was entered correctly.
            </para><para>
            2) The certificate file contains one or more certificates.
            </para><para>
            3) The certificate file contains the correct certificate(s).
            </para><para>
            4) The certificate file is undamaged.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_READ_PRIVATE_KEY">
            <summary><para>
            The private key could not be read from the certificate file. Check the following:
            </para><para>
            1) The password was entered correctly.
            </para><para>
            2) The certificate file contains one or more certificates.
            </para><para>
            3) The certificate file contains the correct certificate(s).
            </para><para>
            4) The certificate file is undamaged.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_SET_PRIVATE_KEY">
            <summary><para>
            The private key could not be used. Check the following:
            </para><para>
            1) The password was entered correctly.
            </para><para>
            2) The certificate file contains one or more certificates.
            </para><para>
            3) The certificate file contains the correct certificate(s).
            </para><para>
            4) The certificate file is undamaged.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_EXPIRY_DATE">
            <summary><para>
            A certificate's expiry date could not be read. Check the following:
            </para><para>
            1) The password was entered correctly.
            </para><para>
            2) The certificate file contains one or more certificates.
            </para><para>
            3) The certificate file contains the correct certificate(s).
            </para><para>
            4) The certificate file is undamaged.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_EXPORT_CERTIFICATE">
            <summary><para>
            The secure network layer was unable to copy a certificate. Free up system resources and retry the operation.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_ADD_CERTIFICATE">
            <summary><para>
            The secure network layer was unable to add a certificate to a certificate chain. Free up system resources and retry the operation.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_TRUSTED_CERTIFICATE_FILE_NOT_FOUND">
            <summary><para>
            The certificate file could not be found. Check the following:
            </para><para>
            1) The certificate file name was properly specified.
            </para><para>
            2) The certificate file exists.
            </para><para>
            3) The certificate file contains one or more certificates.
            </para><para>
            4) The certificate file contains the correct certificate(s).
            </para><para>
            5) The program attempting to open the certificate file has sufficient privileges to see the file. This only applies to operating systems having user and/or file permissions.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_TRUSTED_CERTIFICATE_READ">
            <summary><para>
            The secure network layer was unable to read the trusted certificate file. Check the following:
            </para><para>
            1) The certificate file name was properly specified.
            </para><para>
            2) The certificate file exists.
            </para><para>
            3) The certificate file contains one or more certificates.
            </para><para>
            4) The certificate file contains the correct certificate(s).
            </para><para>
            5) The program attempting to open the certificate file has sufficient privileges to see the file. This only applies to operating systems having user and/or file permissions.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_COUNT">
            <summary><para>
            The given file does not contain a certificate. Check the following:
            </para><para>
            1) The certificate file name was properly specified.
            </para><para>
            2) The certificate file contains one or more certificates.
            </para><para>
            3) The certificate file contains the correct certificate(s).
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CREATE_CERTIFICATE">
            <summary><para>
            The secure network layer was unable to allocate storage for a certificate. Free up system resources and retry the operation.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_IMPORT_CERTIFICATE">
            <summary><para>
            The secure network layer was unable to import a certificate. Check the following:
            </para><para>
            1) The certificate file name was properly specified.
            </para><para>
            2) The certificate file exists.
            </para><para>
            3) The certificate file contains one or more certificates.
            </para><para>
            4) The certificate file contains the correct certificate(s).
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_ADD_TRUSTED_CERTIFICATE">
            <summary><para>
            The secure network layer was unable to add a trusted certificate to a certificate chain. The most likely cause is a shortage of system resources. Free up system resources and retry the operation.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CREATE_PRIVATE_KEY_OBJECT">
            <summary><para>
            The secure network layer was unable to create a private key object before loading the private key. The most likely cause is a shortage of system resources. Free up system resources and retry the operation.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_EXPIRED">
            <summary><para>
            A certificate in the certificate chain has expired. Obtain a new certificate with a later expiry date and retry the operation.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_COMPANY_UNIT">
            <summary><para>
            The given organization unit is not in the certificate chain. Check the following:
            </para><para>
            1) The in company name was properly entered.
            </para><para>
            2) The correct certificate file was specified.
            </para><para>
            3) The company name is in the certificate chain. You can verify this with the viewcert utility.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_COMMON_NAME">
            <summary><para>
            The given common name is not in the certificate chain. Check the following:
            </para><para>
            1) The common name was properly entered.
            </para><para>
            2) The correct certificate file was specified.
            </para><para>
            3) The common name is in the certificate chain. You can verify this with the viewcert utility.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_HANDSHAKE">
            <summary><para>
            The secure handshake failed. Check the following:
            </para><para>
            1) On the client, the correct host machine and port number were specified.
            </para><para>
            2) On the server, the correct port number was specified.
            </para><para>
            3) The correct trusted certificate was specified on the client and the correct identity file was specified on the server.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_VERSION">
            <summary><para>
            The requested HTTP version is unsupported. Consult the documentation and specify a supported HTTP version. At the time of publication the supported HTTP versions are 1.0 and 1.1.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_HOST_NAME_NOT_FOUND">
            <summary><para>
            The given host name could not be found. Check the following:
            </para><para>
            1) The host name was correctly specified.
            </para><para>
            2) The host is accessible. Many systems include a "ping" utility that can be used to verify access to a named host.
            </para><para>
            3) The Domain Name Server (DNS), or its equivalent, is available. If the DNS is not available, try specifying the host's IP number (for example, NNN.NNN.NNN.NNN) instead of the host name.
            </para><para>
            4) The HOSTS file contains an entry that maps the host name to an IP number.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_CREATE_TCPIP">
            <summary><para>
            The network layer was unable to create a TCP/IP socket. Check the following:
            </para><para>
            1) The machine is connected to the network.
            </para><para>
            2) The socket layer is properly initialized.
            </para><para>
            5) If the device has a limit on the number of open sockets, verify that the limit has not been reached.
            </para><para>
            6) There are enough system resources available. Free up system resources if they are running low.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_CREATE_UDP">
            <summary><para>
            The network layer was unable to create a UDP socket. Check the following:
            </para><para>
            1) The machine is connected to the network.
            </para><para>
            2) The socket layer is properly initialized.
            </para><para>
            3) If the client_port option was used, verify that the given port isn't already in use. If only one client port was specified, consider using a range (for example, NNN-NNN). If a range was specified, consider making it a wider range, or a different range.
            </para><para>
            4) If the client_port option was used, verify that there are no firewall restrictions on the use of the port.
            </para><para>
            5) If the device has a limit on the number of open sockets, verify that the limit has not been reached.
            </para><para>
            6) There are enough system resources available. Free up system resources if they are running low.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_BIND">
            <summary><para>
            The network layer was unable to bind a socket to the given port. Check the following.
            </para><para>
            1) (Server only) Verify that the port isn't already in use. If the port is in use, either shut down the application listening on that port, or specify a different port.
            </para><para>
            2) (Server only) Verify that there are no firewall restrictions on the use of the port.
            </para><para>
            3) (Client only) If the client_port option was used, verify that the given port isn't already in use. If only one client port was specified, consider using a range (for example, NNN-NNN). If a range was specified, consider making it a wider range, or a different range.
            </para><para>
            4) (Client only) If the client_port option was used, verify that there are no firewall restrictions on the use of the port.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_CLEANUP">
            <summary><para>
            The network layer was unable to clean up the socket layer. This error should only occur after all connections are finished, so no current connections should be affected.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_CLOSE">
            <summary><para>
            The network layer was unable to close a socket. The network session may or may not have terminated prematurely, due to pending writes that were not flushed. Check the following:
            </para><para>
            1) The other side of the network connection had any errors.
            </para><para>
            2) The other side of the connection is running normally.
            </para><para>
            3) The machine is still connected to the network, and the network is responsive.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_CONNECT">
            <summary><para>
            The network layer was unable to connect a socket. Check the following:
            </para><para>
            1) The machine is connected to the network.
            </para><para>
            2) The socket layer is properly initialized.
            </para><para>
            3) The correct host machine and port were specified.
            </para><para>
            4) The host server is running normally and listening on the correct port.
            </para><para>
            5) The host machine is listening for the proper socket type (TCP/IP vs. UDP).
            </para><para>
            6) If the client_port option was used, verify that there are no firewall restrictions on the use of the port.
            </para><para>
            7) If the device has a limit on the number of open sockets, verify that the limit has not been reached.
            </para><para>
            8) There are enough system resources available. Free up system resources if they are running low.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_GET_NAME">
            <summary><para>
            The network layer was unable to determine a socket's local name. In a TCP/IP connection, each end of the connection has a socket exclusively attached to a port. A socket's local name includes this port number, which is assigned by the network at connection time. Check the following:
            </para><para>
            1) The machine is still connected to the network, and the network is responsive.
            </para><para>
            2) The other side of the connection is running normally.
            </para><para>
            3) There are enough system resources available. Free up system resources if they are running low.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_GET_OPTION">
            <summary><para>
            The network layer was unable to get a socket option. This error may be the first indication that a connection has been lost. Check the following:
            </para><para>
            1) The machine is still connected to the network, and the network is responsive.
            </para><para>
            2) The other side of the connection is running normally.
            </para><para>
            3) There are enough system resources available. Free up system resources if they are running low.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_SET_OPTION">
            <summary><para>
            The network layer was unable to set a socket option. This error may be the first indication that a connection has been lost. Check the following:
            </para><para>
            1) The machine is still connected to the network, and the network is responsive.
            </para><para>
            2) The other side of the connection is running normally.
            </para><para>
            3) There are enough system resources available. Free up system resources if they are running low.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_LISTEN">
            <summary><para>
            The server is unable to listen on a socket. The backlog refers to the maximum number of queued connection requests that may be pending at any given time. Check the following:
            </para><para>
            1) The machine is still connected to the network, and the network is responsive.
            </para><para>
            2) There are no firewall or other restrictions preventing a socket listener from running on the current machine.
            </para><para>
            3) The backlog setting is within the limit, if any, on the machine.
            </para><para>
            4) There are enough system resources available. Free up system resources if they are running low.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_SHUTDOWN">
            <summary><para>
            The network layer was unable to shut down a socket. Check the following:
            </para><para>
            1) The machine is connected to the network, and the network is responsive.
            </para><para>
            2) The other side of the connection is running normally.
            </para><para>
            3) There are enough system resources available. Free up system resources if they are running low.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_SELECT">
            <summary><para>
            The network layer encountered an error attempting to wait for a socket to be ready for reading or writing. Check the following:
            </para><para>
            1) The machine is connected to the network, and the network is responsive.
            </para><para>
            2) The other side of the connection is running normally.
            </para><para>
            3) There are enough system resources available. Free up system resources if they are running low.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_STARTUP">
            <summary><para>
            The network layer was unable to initialize the socket layer. Check the following:
            </para><para>
            1) The sockets layer is properly installed. The correct network interface library must be present and accessible.
            </para><para>
            2) The machine is connected to the network, and the network is responsive.
            </para><para>
            3) There are enough system resources available. Free up system resources if they are running low.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_LOCALHOST_NAME_NOT_FOUND">
            <summary><para>
            The network layer was unable to determine the IP address of "localhost". Check the following:
            </para><para>
            1) The Domain Name Server (DNS), or its equivalent, is available. If the DNS is not available, try explicitly specifying the localhost IP number (usually 127.0.0.1) instead.
            </para><para>
            2) The HOSTS file contains an entry that maps the "localhost" name to an IP number.
            </para><para>
            3) There are enough system resources available. Free up system resources if they are running low.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_GET_HOST_BY_ADDR">
            <summary><para>
            The network layer was unable to get the name of a host using its IP address. At the time of publication, this error was defined but not used.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.LOAD_NETWORK_LIBRARY">
            <summary><para>
            The network interface library could not be found and/or loaded.  Please check the following:
            </para><para>
            1) The sockets layer is properly installed. The correct network interface library (or DLL or shared object) must be present and accessible.
            </para><para>
            2) There are enough system resources available. Free up system resources if they are running low.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_PORT_OUT_OF_RANGE">
            <summary><para>
            An invalid port number was specified. The port number must be an integer between zero and 65535.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.ACTSYNC_NO_PORT">
            <summary><para>
            ActiveSync synchronization can only be initiated by ActiveSync itself, either by placing the device in its cradle or by selecting "Synchronize" from the ActiveSync Manager. To initiate a synchronization from an application, use the TCP/IP socket synchronization stream.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.ACTSYNC_NOT_INSTALLED">
            <summary><para>
            The ActiveSync provider has not been installed.  Run mlasinst to install it (see documentation for details).
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_CONTENT_TYPE_NOT_SPECIFIED">
            <summary><para>
            An unknown content type was specified. Refer to the documentation and change the content type to one of the supported types.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_CLIENT_ID_NOT_SET">
            <summary><para>
            The client id was not passed into the HTTP client code. Contact technical support for a fix.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_BUFFER_SIZE_OUT_OF_RANGE">
            <summary><para>
            Fix the HTTP buffer size. A valid buffer size is positive and not overly large for the host platform.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_EXTRA_DATA_END_READ">
            <summary><para>
            Extra data has been introduced into the HTTP body. This may have been added by a proxy agent.  Try eliminating the proxy.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_CRLF_ENCODED_MISSING">
            <summary><para>
            The proxy you are using may not be compatible with MobiLink. Please check your configuration.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_CRLF_MISSING">
            <summary><para>
            The proxy you are using may not be compatible with MobiLink. Please check your configuration.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_NO_CONTD_CONNECTION">
            <summary><para>
            The server timed out while waiting for the next HTTP request from the remote site. Determine why this request failed to reach the server or try a persistent connection.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_CHUNK_LEN_ENCODED_MISSING">
            <summary><para>
            Try using a fixed length HTTP body.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_CHUNK_LEN_BAD_CHARACTER">
            <summary><para>
            Try using a fixed length HTTP body.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_BAD_STATUS_CODE">
            <summary><para>
            Examine the status line to determine the cause of the failure.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_UNKNOWN_TRANSFER_ENCODING">
            <summary><para>
            Determine how the unknown transfer encoding is getting generated.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_UNABLE_TO_PARSE_COOKIE">
            <summary><para>
            Determine where the set cookie header is being corrupted. 
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_EXPECTED_POST">
            <summary><para>
            The proxy you are using may not be compatible with MobiLink. Please check your configuration.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_LIVENESS_OUT_OF_RANGE">
            <summary><para>
            An invalid liveness timeout value was specified. The liveness timeout value must be an integer between zero and 65535.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.READ_TIMEOUT">
            <summary><para>
            Unable to read the given number of bytes from the network layer in the given time.
            Check that the network is functioning correctly, and that the sending application is still running.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.WRITE_TIMEOUT">
            <summary><para>
            Unable to write the given number of bytes to the network layer in the given time.
            Check that the network is functioning correctly, and that the receiving application is still running.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.DUN_NOT_SUPPORTED">
            <summary><para>
            An attempt to dialup has failed due to insufficient system support.
            On PocketPC you must use cellcore.dll and on Windows you must use
            wininet.dll from IE 4.0 or above. Dialup is not supported on other
            platforms.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.DUN_DIAL_FAILED">
            <summary><para>
            Automatic dialup failed to establish connection to the specified
            dial up network.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_NO_SERVER_CERTIFICATE">
            <summary><para>
            No server certificate was provided.  A server certificate is required for
            secure communications.  The file provided must contain the full chain
            of certificates for the server as well as its private key.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_NO_SERVER_CERTIFICATE_PASSWORD">
            <summary><para>
            No server certificate password was provided.  This password is required to
            decrypt the server's encrypted private key.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_NO_TRUSTED_ROOTS">
            <summary><para>
            No trusted root certificates were provided.  At least one trusted root
            certificate is required for secure communications.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_REDUNDANT_SERVER_CERTIFICATE_PASSWORD">
            <summary><para>
            A password was specified when the server's private key wasn't encrypted
            by any password.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_AUTHENTICATION_REQUIRED">
            <summary><para>
            An HTTP server or gateway requested HTTP authentication.  Please supply
            a userid and password using the HTTP synchronization parameters
            http_userid and http_password.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_PROXY_AUTHENTICATION_REQUIRED">
            <summary><para>
            An HTTP proxy requested HTTP authentication.  Please supply a userid
            and password using the HTTP synchronization parameters
            http_proxy_userid and http_proxy_password.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_AUTHENTICATION_FAILED">
            <summary><para>
            The supplied userid and password were rejected.  Check that they were
            entered correctly.  If so, contact your systems administrator to
            ensure you have proper access.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_PROXY_AUTHENTICATION_FAILED">
            <summary><para>
            The supplied userid and password were rejected by the proxy server.
            Check that they were entered correctly.  If so, contact your systems
            administrator to ensure you have proper access.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_NO_USERID">
            <summary><para>
            A password was supplied for HTTP authentication but no userid.  Both
            are required for authentication.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_NO_PASSWORD">
            <summary><para>
            A userid was supplied for HTTP authentication but no password.  Both
            are required for authentication.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_UNSUPPORTED_AUTH_ALGORITHM">
            <summary><para>
            The HTTP Digest authentication algorithm requested by the server is
            unsupported.  Only "MD5" and "MD5-sess" are supported.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_HEADER_PARSE_ERROR">
            <summary><para>
            An error occurred while trying to parse an HTTP header.  The header may
            be malformed.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_SERVER_AUTH_FAILED">
            <summary><para>
            The Authentication-Info header sent from the server contained an
            incorrect value, causing authentication to fail.  Make sure that
            you are connecting to a legitimate HTTP server.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.INTERRUPTED">
            <summary><para>
            The current operation was interrupted by the caller.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_INVALID_CHARACTER">
            <summary><para>
            An unexpected character was read in an HTTP header.  The header may be
            malformed or the other side may not be sending HTTP at all.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.INTERNAL">
            <summary><para>
            An internal error has occurred in the network layer. Please contact technical support.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_OPEN_SYSTEM_CERT_STORE">
            <summary><para>
            An attempt to open a system certificate store failed.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_IMPORT_CERT_FROM_SYSTEM_STORE">
            <summary><para>
            Failed to import a certificate from the system certificate store.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_NO_CERTS_IN_SYS_STORE">
            <summary><para>
            No certificates were found in the system's certificate store.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.LOAD_LIBRARY_FAILURE">
            <summary><para>
            The indicated library could not be found in the path.  If you are trying to
            use TLS encryption for synchronization, make sure you have acquired the
            proper license.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.LIBRARY_ENTRY_POINT_NOT_FOUND">
            <summary><para>
            The indicated library entry point could not be found. 
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.INVALID_SYNC_PROTOCOL">
            <summary><para>
            The specified protocol is not a valid synchronization protocol.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.INTERNAL_PROTOCOL_NOT_LOADED">
            <summary><para>
            A synchronization protocol could not be loaded.  If you are using UltraLite,
            make sure you have called the proper ULEnable method.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SERVER_ERROR">
            <summary><para>
            The server reported an error.  Contact the MobiLink administrator to learn
            more.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.MISSING_PARAMETER">
            <summary><para>
            The specified parameter was expected but not supplied.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.COULD_NOT_OPEN_FILE_FOR_WRITE">
            <summary><para>
            The specified file could not be opened for write.  Make sure that this is
            the correct file and that no other application is using it.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.PROTOCOL_ERROR">
            <summary><para>
            An unexpected value or token was read.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.INVALID_COMPRESSION_TYPE">
            <summary><para>
            The specified compression type was not recognized.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.VALUE_OUT_OF_RANGE">
            <summary><para>
            The specified value was not in the range of acceptable values for
            that parameter.  Check the documentation for the parameter to
            learn the acceptable range of values.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.UNEXPECTED_HTTP_REQUEST_TYPE">
            <summary><para>
            The given HTTP request type was unexpected at this time.
            The most likely cause is an HTTP client that is not
            a MobiLink client.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_MALFORMED_SESSION_COOKIE">
            <summary><para>
            The HTTP cookie used to manage the synchronization session is corrupt.
            Determine where the cookie is being corrupted. 
            The most likely cause is a client error,
            or perhaps an HTTP intermediary misbehaving.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_INTERNAL_HEADER_STATE">
            <summary><para>
            There was a problem decoding the HTTP header. This is an internal error that should never occur. Please contact technical support.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_INTERNAL_REQUEST_TYPE">
            <summary><para>
            There was a problem determining the HTTP request type. This is an internal error that should never occur. Please contact technical support.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.INTERNAL_API">
            <summary><para>
            An internal error has occurred in the network layer. Please contact technical support.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.NO_ECC_FIPS">
            <summary><para>
            There was a problem performing the given compression operation. Please contact technical support.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.UNRECOGNIZED_TLS_TYPE">
            <summary><para>
            The TLS type is invalid. Consult the documentation for valid types.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.CONNECT_TIMEOUT">
            <summary><para>
            The connection attempt timed out.  Either the server is not running on the
            indicated host and port or the timeout value needs to increased to allow
            more time to connect.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.INCONSISTENT_FIPS">
            <summary><para>
            Use of the -fips switch on the MobiLink server command line requires that all secure streams be FIPS-compliant. If a secure stream is not configured with the fips option, it will automatically be FIPS-compliant (for example, fips=y). Either remove the fips option from the secure stream, or enable it with fips=y.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.INVALID_LOCAL_PATH">
            <summary><para>
            The destination path for the downloaded file is invalid. Consult the documentation for details.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_INVALID_SESSION_KEY">
            <summary><para>
            An unknown session key type was specified. Refer to the documentation and change the session key type to one of the supported types.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.INVALID_NETWORK_LIBRARY">
            <summary><para>
            The given network interface DLL or shared object could not be loaded, possibly because it is invalid or corrupt.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.NETWORK_LIBRARY_VERSION_MISMATCH">
            <summary><para>
            A network interface DLL or shared object could not be loaded because it is the wrong version.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.AUTHENTICATION_FAILED">
            <summary><para>
            The client failed to authenticate itself to MobiLink.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SACI_IMPLEMENTATION_MISMATCH">
            <summary><para>
            The SACI implementation could not be loaded because it had an incompatible implementation ID.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_UNKNOWN_PUBLIC_KEY_ENC_TYPE">
            <summary><para>
            The client sent an e2ee_type value that is not recognized by the server. Please make sure the server version is equal to or greater than the version of the remote.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_UNEXPECTED_PUBLIC_KEY_ENC_TYPE">
            <summary><para>
            The client sent an e2ee_type value that is different from the e2ee_type specified at the server. Please make sure these are the same.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_MISMATCHED_KEYS">
            <summary><para>
            The client and server are unable to communicate because the e2ee_public_key used for end-to-end encryption at the remote does not match the e2ee_private_key at the server.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_UNEXPECTED_PRIVATE_KEY_TYPE">
            <summary><para>
            The private key type found in the e2ee_private_key file does not match the type specified in the e2ee_type.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_READING_PRIVATE_KEY">
            <summary><para>
            An error occurred reading the e2ee_private_key file. Please contact technical support and provide the error code.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_NO_PRIVATE_KEY_IN_FILE">
            <summary><para>
            The given filename does not contain a private key.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_DECODING_PRIVATE_KEY_FILE">
            <summary><para>
            The file was found and its contents were read, but there was an error decoding the file. Please contact technical support and provide the error code.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_READING_PRIVATE_KEY_FILE">
            <summary><para>
            The given file could not be read. Please contact technical support and provide the error code.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_MISSING_PRIVATE_KEY_PASSWORD">
            <summary><para>
            The e2ee_private_key file cannot be read without an e2ee_private_key_password. Please provide the e2ee_private_key_password.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_MISSING_PRIVATE_KEY">
            <summary><para>
            Another end-to-end encryption option was specified, but not the e2ee_private_key option. Either specify all end-to-end encryption options or remove them all. Required end-to-end encryption options include: e2ee_type, e2ee_private_key, e2ee_private_key_password.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_INVALID_TYPE">
            <summary><para>
            An invalid e2ee_type was specified. Please specify a valid value.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_INIT_ECC">
            <summary><para>
            An error occurred when attempting to initialize ECC. Please make sure the ECC option is installed.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_PUBLIC_KEY">
            <summary><para>
            An error occurred while trying to read the end-to-end encryption public key.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.COULD_NOT_OPEN_FILE">
            <summary><para>
            The specified file could not be opened.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_UNKNOWN_SESSION">
            <summary><para>
            The HTTP cookie used to manage the synchronization session is not recognized.
            All HTTP requests for the same session must go to the same MobiLink server instance.
            The most likely cause is an HTTP intermediary not sending all HTTP requests for the same session to the same MobiLink server.
            This error can also occur when a server is quickly shut down and restarted between HTTP requests for the same session.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SACI_ERROR">
            <summary><para>
            The SACI encryption/decryption library is reporting an error. Refer to the provider of the SACI encryption/decryption library to resolve the problem.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_FAILED_READING_HEADERS">
            <summary><para>
            The MobiLink server received an incomplete set of HTTP headers.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_BAD_REQUEST">
            <summary><para>
            The MobiLink server received an HTTP request with either an unknown User-Agent header, or an unknown request type."
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.CONNECTION_ABANDONED">
            <summary><para>
            Some previous error forced the server to close this connection
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.TCP_INSTEAD_OF_HTTP">
            <summary><para>
            The MobiLink server aborted a request because it received non-HTTP traffic on a port that was servicing HTTP traffic.  Ensure that the stream options used on the client match those on the server.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.ENCRYPTED_INSTEAD_OF_HTTP">
            <summary><para>
            The MobiLink server aborted a request because it received encrypted, non-HTTP traffic on a port that was servicing HTTP traffic.  Ensure that the stream options used on the client match those on the server.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_INSTEAD_OF_HTTP">
            <summary><para>
            The MobiLink server aborted a request because it received end-to-end encrypted, non-HTTP traffic on a port that was servicing HTTP traffic.  Ensure that the stream options used on the client match those on the server.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.TCP_INSTEAD_OF_ENCR">
            <summary><para>
            The MobiLink server aborted a request because it received non-encrypted traffic on a port that was servicing encrypted traffic.  Ensure that the stream options used on the client match those on the server.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_INSTEAD_OF_ENCR">
            <summary><para>
            The MobiLink server aborted a request because it received non-encrypted HTTP traffic on a port that was servicing encrypted traffic.  Ensure that the stream options used on the client match those on the server.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.E2EE_INSTEAD_OF_ENCR">
            <summary><para>
            The MobiLink server aborted a request because it received non-tls encrypted, but end-to-end encrypted traffic on a port that was servicing tls encrypted traffic.  Ensure that the stream options used on the client match those on the server.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.BAD_PRIVATE_KEY_PASSWORD">
            <summary><para>
            The provided password for the encrypted private key is incorrect.
            </para></summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULStreamType">
            <summary>
            <para> <i><b>UL Ext: </b></i> Enumerates the types of MobiLink synchronization streams to use for synchronization. </para>
        </summary><remarks>
            <para> For information about configuring specific stream types, see @olink targetdoc="uladmin" targetptr="streamparms-s-3928666"@Network protocol options for UltraLite synchronization streams@/olink@.</para>
            \xmlonly <xinclude href="../common/seplicense.xml" xmlns:xi="http://www.w3.org/2001/XInclude"></xinclude> \endxmlonly 
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.Stream"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamType.TCPIP">
            <summary>
            <para> Synchronize via TCP/IP. </para>
        </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamType.HTTP">
            <summary>
            <para>Synchronize via HTTP. </para>
            <para> The HTTP stream uses TCP/IP as its underlying transport. UltraLite applications act as Web browsers and the MobiLink server acts as a Web server. UltraLite applications send POST requests to send data to the server and GET requests to read data from the server. </para>
        </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamType.HTTPS">
            <summary>
            <para> Synchronize via HTTPS (HTTP with transport-layer security). </para>
        </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamType.TLS">
            <summary>
            <para>Synchronize via TCP/IP with transport layer security. </para>
        </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSyncParms">
            <summary>
            <para><i><b>UL Ext: </b></i> Represents synchronization parameters that define how to synchronize an UltraLite database. </para>
        </summary><remarks>
            <para> There is no constructor for this class. Each connection has its own ULSyncParms instance, attached as its ULConnection.SyncParms. </para>
            <para> At most, only one synchronization command (ULSyncParms.DownloadOnly, ULSyncParms.PingOnly, ULSyncParms.ResumePartialDownload, or ULSyncParms.UploadOnly) can be specified at a time. If more than one of these parameters is set to true, a ULSQLCode.SQLE_SYNC_INFO_INVALID SQLException is thrown by ULConnection.Synchronize(). </para>
            <para> Other sources of ULSQLCode.SQLE_SYNC_INFO_INVALID errors include not specifying a ULSyncParms.Stream value or a ULSyncParms.Version value. </para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncParms"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.PingOnly"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_INVALID"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.Stream"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.Version"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULSyncParms.CopyFrom(iAnywhere.Data.UltraLite.ULSyncParms)">
            <summary>
            <para> Copies the properties of the specified ULSyncParms object to this ULSyncParms object. </para>
        </summary><param name="src">
            The object to copy from. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncParms"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULSyncParms.ToString">
            <summary>
            <para>Returns the string representation of this instance. </para>
        </summary><returns>
        The string representation of this instance as a semicolon-separated list keyword=value pairs. 
        </returns>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.AdditionalParms">
            <summary>
            <para>Specifies additional synchronization parameters as a semicolon-separated list of name=value pairs.</para>
        </summary><value>A string, in the form of a semicolon-separated list of name=value pairs. </value><remarks>
            <para>Use this property to specify several additional synchronization parameters that can not be readily specified using any other predefined parameters.  For more information, see @olink targetdoc="uladmin" targetptr="fo-ulsync-s-5110833"@Additional Parameters synchronization parameter@/olink@.</para>
        </remarks><example>
        The following example illustrates how to set the AllowDownloadDupRows, CheckpointStore, DisableConcurrency, and TableOrder parameters on a ULSyncParms object:
        <code>
private ULSyncParms info;
// ...
info.AdditionalParms = 
    "AllowDownloadDupRows=1;
    CheckpointStore=1;
    DisableConcurrency=1;
    TableOrder=Customer,Sales"
        </code>
        </example>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.AuthenticationParms">
            <summary>
            <para> Specifies parameters for a custom user authentication script (MobiLink authenticate_parameters connection event). </para>
        </summary><value>An array of strings, each containing an authentication parameter (null array entries result in a synchronization error). The default is a null reference (Nothing in Visual Basic), meaning no authentication parameters.</value><remarks>
            <para> Only the first 255 strings are used and each string should be no longer than the MobiLink server's limit for authentication parameters (currently 4000 UTF8 bytes). </para>
        </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly">
            <summary>
            <para> Specifies whether to disable or enable uploads when synchronizing. </para>
        </summary><value>True to disable uploads when synchronizing, false to enable uploads. The default is false.</value><remarks>
            <para>At most, only one synchronization command (ULSyncParms.DownloadOnly, ULSyncParms.PingOnly, ULSyncParms.ResumePartialDownload, or ULSyncParms.UploadOnly) can be specified at a time. If more than one of these parameters is set to true, a ULSQLCode.SQLE_SYNC_INFO_INVALID SQLException is thrown by ULConnection.Synchronize(). </para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.PingOnly"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_INVALID"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.KeepPartialDownload">
            <summary>
            <para> Specifies whether to disable or enable partial downloads when synchronizing. </para>
        </summary><value>True to enable partial downloads when synchronizing, false to disable partial downloads. The default is false.</value><remarks>
            <para> UltraLite.NET has the ability to restart downloads that fail because of communication errors or user aborts through the ULSyncProgressListener. UltraLite.NET processes the download as it is received. If a download is interrupted, then the partial download transaction remains in the database and can be resumed during the next synchronization. </para>
            <para> To indicate that UltraLite.NET should save partial downloads, specify connection.SyncParms.KeepPartialDownload=true; otherwise the download is rolled back if an error occurs. </para>
            <para> If a partial download was kept, then the output field connection.SyncResult.ULSyncResult.PartialDownloadRetained is set to true when connection.Synchronize() exits. </para>
            <para> If PartialDownloadRetained is set, then you can resume a download. To do this, call connection.Synchronize() with connection.SyncParms.ULSyncParms.ResumePartialDownload set to true. It is recommended that you keep KeepPartialDownload set to true as well in case another communications error occurs. No upload is done if a download is skipped. </para>
            <para> The download you receive during a resumed download is as old as when the download originally began. If you need the most up to date data, then you can do another download immediately after the special resumed download completes. </para>
            <para> When resuming a download, many of the ULSyncParms fields are not relevant. For example, the Publications field is not used. You receive the publications that you requested on the initial download. The only fields that need to be set are ResumePartialDownload and UserName. The field KeepPartialDownload can be set if desired and function as normal. </para>
            <para> If you have a partial download and it is no longer needed, then you can call ULConnection.RollbackPartialDownload() to roll back the failed download transaction. Also, if you attempt to synchronize again and do not specify ResumePartialDownload, then the partial download is rolled back before the next synchronization begins. </para>
            <para> For more information, see the @olink targetdoc="mobilink" targetptr="ml-synchtech-s-5287936"@Resuming failed downloads@/olink@. </para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncResult.PartialDownloadRetained"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.RollbackPartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UserName"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.RollbackPartialDownload"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.NewPassword">
            <summary>
            <para> Specifies a new MobiLink password for the user specified with UserName. </para>
        </summary><value>A string specifying a new MobiLink password. The default is a null reference (Nothing in Visual Basic), meaning the password is not changed.</value><remarks>
            <para> A new password takes effect after the next synchronization. </para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UserName"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.Password">
            <summary>
            <para> The MobiLink password for the user specified by UserName. </para>
        </summary><value>A string specifying the MobiLink password. The default is a null reference (Nothing in Visual Basic), meaning no password is specified.</value><remarks>
            <para> The MobiLink user name and password are separate from any database user ID and password, and serve to identify and authenticate the application to the MobiLink server. </para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.NewPassword"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UserName"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.PingOnly">
            <summary>
            <para> Specifies whether the client should only ping the MobiLink server instead of performing a real synchronization. </para>
        </summary><value>True to specify that the client should only ping the MobiLink server, false to specify the client should perform a real synchronization. The default is false.</value><remarks>
            <para>At most, only one synchronization command (ULSyncParms.DownloadOnly, ULSyncParms.PingOnly, ULSyncParms.ResumePartialDownload, or ULSyncParms.UploadOnly) can be specified at a time. If more than one of these parameters is set to true, a ULSQLCode.SQLE_SYNC_INFO_INVALID SQLException is thrown by ULConnection.Synchronize(). </para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.PingOnly"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_INVALID"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.Publications">
            <summary>
            <para> Specifies the publications to be synchronized. </para>
        </summary><value>A string containing a list of publication names, separated by comma (,); or the special value ULConnection.SYNC_ALL_PUBS, or the special value ULConnection.SYNC_ALL_DB. The default is ULConnection.SYNC_ALL_DB. </value><seealso cref="F:iAnywhere.Data.UltraLite.ULConnection.SYNC_ALL_PUBS"/><seealso cref="F:iAnywhere.Data.UltraLite.ULConnection.SYNC_ALL_DB"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload">
            <summary>
            <para> Specifies whether to resume or discard a previous partial download. </para>
        </summary><value>True to resume a previous partial download, false to discard a previous partial download. The default is false.</value><remarks>
            <para> Only at most one synchronization command (ULSyncParms.DownloadOnly, ULSyncParms.PingOnly, ULSyncParms.ResumePartialDownload, or ULSyncParms.UploadOnly) can be specified at a time. If more than one of these parameters is set to true, a ULSQLCode.SQLE_SYNC_INFO_INVALID SQLException is thrown by ULConnection.Synchronize(). </para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.KeepPartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.PingOnly"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_INVALID"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncResult.PartialDownloadRetained"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.SendColumnNames">
            <summary>
            <para> Specifies whether the client should send column names to the MobiLink server during synchronization. </para>
        </summary><value>True to specify that the client should send column names to the MobiLink server, false to specify that column names are not sent. The default is false.</value><remarks>
            <para> The column names are used by the MobiLink server for direct row handling. When the MobiLink server is using the row handling API to refer to columns by name rather than by index, you should set this option. This is the only use of the column names that are sent by this option. </para>
        </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.SendDownloadAck">
            <summary>
            <para> Specifies whether the client should send a download acknowledgement to the MobiLink server during synchronization. The download acknowledgement is sent after the download has been fully applied and committed at the remote (a positive acknowledgement) or after the download fails (a negative acknowledgement). </para>
        </summary><value>Set True to specify that the client should send a download acknowledgement to the MobiLink server. Set False to specify that no download acknowledgement is sent. The default is False.</value><remarks>
            <para> If the client sends a download acknowledgement, the MobiLink server database worker thread must wait for the client to apply and commit the download. If the client does not sent a download acknowledgement, the MobiLink server is freed up sooner for its next synchronization. </para>
        </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.Stream">
            <summary>
            <para> Specifies the MobiLink synchronization stream to use for synchronization. </para>
        </summary><value>One of the ULStreamType values specifying the type of synchronization stream to use. The default is ULStreamType.TCPIP.</value><remarks>
            <para> Most synchronization streams require parameters to identify the MobiLink server address and control other behavior. These parameters are supplied by ULSyncParms.StreamParms. </para>
            <para> If the stream type is set to a value that is invalid for the platform, the stream type is set to ULStreamType.TCPIP. </para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULStreamType"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.StreamParms"/><seealso cref="F:iAnywhere.Data.UltraLite.ULStreamType.TCPIP"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.StreamParms">
            <summary>
            <para> Specifies the parameters to configure the synchronization stream. </para>
        </summary><value>A string, in the form of a semicolon-separated list of keyword-value pairs, specifying the parameters for the stream.  The default is a null reference. (Nothing in Visual Basic)</value><remarks>
            <para> For information about configuring specific stream types, see </para>
            <para>@olink targetdoc="uladmin" targetptr="streamparms-s-3928666"@Network protocol options for UltraLite synchronization streams@/olink@.</para>
            <para> StreamParms is a string containing all the parameters used for synchronization streams. Parameters are specified as a semicolon-separated list of name=value pairs ("param1=value1;param2=value2"). </para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.Stream"/><seealso cref="T:iAnywhere.Data.UltraLite.ULStreamType"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly">
            <summary>
            <para> Specifies whether to disable or enable downloads when synchronizing. </para>
        </summary><value>True to disable downloads, false to enable downloads. The default is false.</value><remarks>
            <para>At most, only one synchronization command (ULSyncParms.DownloadOnly, ULSyncParms.PingOnly, ULSyncParms.ResumePartialDownload, or ULSyncParms.UploadOnly) can be specified at a time. If more than one of these parameters is set to true, a ULSQLCode.SQLE_SYNC_INFO_INVALID SQLException is thrown by ULConnection.Synchronize(). </para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.PingOnly"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_INVALID"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.UserName">
            <summary>
            <para> The user name that uniquely identifies the MobiLink client to the MobiLink server. </para>
        </summary><value>A string specifying the user name. This parameter has no default value, and must be explicitly set.</value><remarks>
            <para> The MobiLink server uses this value to determine the download content, to record the synchronization state, and to recover from interruptions during synchronization. This user name and password are separate from any database user ID and password, and serve to identify and authenticate the application to the MobiLink server. </para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.Password"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.Version">
            <summary>
            <para> Specifies which synchronization script to use. </para>
        </summary><value>A string specifying the version of the synchronization script to use. This parameter has no default value, and must be explicitly set.</value><remarks>
            <para> Each synchronization script in the consolidated database is marked with a version string. For example, there can be two different download_cursor scripts, with each one identified by a different version string. The version string allows an UltraLite application to choose from a set of synchronization scripts. </para>
        </remarks>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSyncProgressState">
            <summary>
			<para><i><b>UL Ext: </b></i> Enumerates all the states that can occur while synchronizing. </para>
		</summary><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressData"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedBytes"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedInserts"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedUpdates"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedDeletes"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentBytes"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentInserts"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentUpdates"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentDeletes"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SyncTableIndex"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SyncTableCount"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_STARTING">
            <summary>
			<para> No synchronization actions have been taken yet. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_CONNECTING">
            <summary>
			<para> The synchronization stream has been built, but is not yet opened. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_HEADER">
            <summary>
			<para> The synchronization stream has been opened and the header is about to be sent. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_TABLE">
            <summary>
			<para> A table is being sent.
			Progress can be monitored using ULSyncProgressData.SyncTableIndex and ULSyncProgressData.SyncTableCount.
			</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_DATA">
            <summary>
			<para> Data for the current table is being sent. ULSyncProgressData.SentBytes, ULSyncProgressData.SentInserts, ULSyncProgressData.SentUpdates, and ULSyncProgressData.SentDeletes have been updated. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_FINISHING_UPLOAD">
            <summary>
			<para> The upload is completing. The final count of rows sent is included with this event.</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_RECEIVING_UPLOAD_ACK">
            <summary>
			<para> An acknowledgement that the upload is complete is being received. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_RECEIVING_TABLE">
            <summary>
			<para> A table is being received.
			Progress can be monitored using ULSyncProgressData.SyncTableIndex and ULSyncProgressData.SyncTableCount.
			</para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_RECEIVING_DATA">
            <summary>
			<para> Data for the current table is being received. ULSyncProgressData.ReceivedBytes, ULSyncProgressData.ReceivedInserts, ULSyncProgressData.ReceivedUpdates, and ULSyncProgressData.ReceivedDeletes have been updated. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_COMMITTING_DOWNLOAD">
            <summary>
			<para> The download is being committed. The final count of rows received is included with this event. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_ROLLING_BACK_DOWNLOAD">
            <summary>
			<para> Synchronization is rolling back the download because an error was encountered during the download. The error is reported with a subsequent STATE_ERROR progress report. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_DOWNLOAD_ACK">
            <summary>
			<para> An acknowledgement that the download is complete is being sent. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_DISCONNECTING">
            <summary>
			<para> The synchronization stream is about to be closed. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_DONE">
            <summary>
			<para> Synchronization has successfully completed. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_ERROR">
            <summary>
			<para> Synchronization has completed, but an error occurred. </para>
		</summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_CANCELLED">
            <summary>
			<para> Synchronization has been canceled. </para>
		</summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSyncProgressData">
            <summary>
			<para><i><b>UL Ext: </b></i> Returns synchronization progress monitoring data. </para>
		</summary><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressListener"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressData.FLAG_IS_BLOCKING">
            <summary>
			<para>A flag indicating that the synchronization is blocked awaiting a response from the MobiLink server.</para>
		</summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.State">
            <summary>
			<para>Returns the current synchronization state. </para>
		</summary><value>One of the ULSyncProgressState values specifying the current synchronization state.</value><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.TableName">
            <summary><para>Returns the name of the current table being uploaded or downloaded.</para></summary><value>Name of the current table being synchronized; null if not applicable.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.TableID">
            <summary>
			<para>Returns the database index of the table currently being synchronized.</para>
		</summary><value>The database index, in the range from 1 to ULDatabaseSchema.TableCount</value><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.TableCount"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SyncTableCount">
            <summary>
			<para> Returns the number of tables being synchronized. </para>
		</summary><value>The number of tables being synchronized.
            For each table there is a sending and receiving phase, so this number
            may be more than the number of tables being synchronized.
		</value><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SyncTableIndex">
            <summary>
			<para>Returns the index of the table currently being synchronized (tables are numbered 1 to DatabaseSchema.TableCount). </para>
		</summary><value>The index of the table currently being synchronized, in the range from 1 to SyncTableCount
		</value><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentBytes">
            <summary>
			<para> Returns the number of bytes sent so far. This information is updated for all states. </para>
		</summary><value>The number of bytes sent so far.</value><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentInserts">
            <summary>
			<para> Returns the number of inserted rows sent so far. </para>
		</summary><value>The number of inserted rows sent so far.</value><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentUpdates">
            <summary>
			<para> Returns the number of updated rows sent so far. </para>
		</summary><value>The number of updated rows sent so far. </value><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentDeletes">
            <summary>
			<para> Returns the number of deleted rows sent so far. </para>
		</summary><value>The number of deleted rows sent so far.</value><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedBytes">
            <summary>
			<para> Returns the number of bytes received so far. This information is updated for all states. </para>
		</summary><value>The number of bytes received so far.</value><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedInserts">
            <summary>
			<para> Returns the number of inserted rows received so far. </para>
		</summary><value> The number of inserted rows received so far. </value><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedUpdates">
            <summary>
			<para> Returns the number of updated rows received so far. </para>
		</summary><value> The number of updated rows received so far.</value><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedDeletes">
            <summary>
			<para> Returns the number of deleted rows received so far. </para>
		</summary><value> The number of deleted rows received so far.</value><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.Flags">
            <summary>
			<para> Returns the current synchronization flags indicating additional information relating to the current state. </para>
		</summary><value>An integer containing a combination of flags or'ed together.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressData.FLAG_IS_BLOCKING"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.IsFinalSyncProgress">
            <summary>
			<para> Returns true if this is final sync progress message. </para>
		</summary><value>
        	    True if this is the final sync progress message.
        	</value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULAuthStatusCode">
            <summary>
				<para> <i><b>UL Ext: </b></i> Enumerates the status codes that may be reported during MobiLink user authentication. </para>
		  </summary><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncResult.AuthStatus"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULAuthStatusCode.UNKNOWN">
            <summary>
				<para> Authorization status is unknown, possibly because the connection has not yet performed a synchronization (UNKNOWN = 0). </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULAuthStatusCode.VALID">
            <summary>
				<para> User ID and password were valid at time of synchronization (VALID = 1). </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULAuthStatusCode.VALID_BUT_EXPIRES_SOON">
            <summary>
				<para> User ID and password were valid at time of synchronization, but expires soon (VALID_BUT_EXPIRES_SOON = 2). </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULAuthStatusCode.EXPIRED">
            <summary>
				<para> User ID or password has expired - authorization failed (EXPIRED = 3). </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULAuthStatusCode.INVALID">
            <summary>
				<para> Bad user ID or password - authorization failed (INVALID = 4). </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULAuthStatusCode.IN_USE">
            <summary>
				<para> User ID is already in use - authorization failed (IN_USE = 5). </para>
		  </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSyncResult">
            <summary>
				<para><i><b>UL Ext: </b></i> Represents the status of the last synchronization. </para>
		  </summary><remarks>
				<para> There is no constructor for this class. Each connection has its own ULSyncResult instance, attached as its ULConnection.SyncResult. A ULSyncResult instance is only valid while that connection is open. </para>
		  </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncResult"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.AuthStatus">
            <summary>
				<para>Returns the authorization status code for the last synchronization attempt.</para>
		  </summary><value>One of the ULAuthStatusCode values denoting the authorization status for the last synchronization attempt.</value><seealso cref="T:iAnywhere.Data.UltraLite.ULAuthStatusCode"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.AuthValue">
            <summary>
				<para> Returns the return value from custom user authentication synchronization scripts. </para>
		  </summary><value>A long integer returned from custom user authentication synchronization scripts.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.IgnoredRows">
            <summary>
				<para>Checks whether any uploaded rows were ignored during the last synchronization. </para>
		  </summary><value>True if any uploaded rows were ignored during the last synchronization, false if no rows were ignored. </value><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.PartialDownloadRetained">
            <summary>
				<para>Checks whether a partial download was retained during the last synchronization.</para>
		  </summary><value>True if a download was interrupted and the partial download was retained, false if the download was not interrupted or if the partial download was rolled back.</value><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.KeepPartialDownload"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.StreamErrorCode">
            <summary>
				<para> Returns the error reported by the stream itself.</para>
		  </summary><value>One of the ULStreamErrorCode values denoting the error reported by the stream itself, ULStreamErrorCode.NONE if no error occurred.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.StreamErrorParameters">
            <summary>
				<para>Returns a comma-separated list of stream error parameters.</para>
		  </summary><value>Contains a comma separated list of error parameters for the stream error code reported in StreamErrorCode property. This is an empty string either for errors with no parameters, or when no error has been set. </value><seealso cref="P:iAnywhere.Data.UltraLite.ULFileTransfer.StreamErrorCode"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.StreamErrorSystem">
            <summary>
				<para> Returns the stream error system-specific code. </para>
		  </summary><value>An integer denoting the stream error system-specific code.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.Timestamp">
            <summary>
				<para> Returns the timestamp of the last synchronization. </para>
		  </summary><value>A System.DateTime specifying the timestamp of the last synchronization.</value><seealso cref="T:System.DateTime"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.UploadOK">
            <summary>
				<para>Checks whether the last upload synchronization was successful.</para>
		  </summary><value>True if the last upload synchronization was successful, false if the last upload synchronization was unsuccessful.</value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSyncStatus">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULTable">
            <summary>
				<para> <i><b>UL Ext: </b></i> Represents a table in an UltraLite database. </para>
		  </summary><remarks>
				<para> There is no constructor for this class. Tables are created using the ULCommand.ExecuteTable() of the ULCommand. </para>
		</remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:iAnywhere.Data.UltraLite.ULResultSet"/><seealso cref="T:System.Data.IDataReader"/><seealso cref="T:System.Data.IDataRecord"/><seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.DeleteAllRows">
            <summary>
				<para>Deletes all rows in the table. </para>
		  </summary><remarks>
				<para> In some applications, it can be useful to delete all rows from a table before downloading a new set of data into the table. Rows can be deleted from the UltraLite database without being deleted from the consolidated database using ULConnection.StopSynchronizationDelete. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Truncate"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.StopSynchronizationDelete"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindBegin">
            <summary>
				<para> Prepares to perform a new Find on a table. </para>
		  </summary><remarks>
				<para>The value(s) for which to search are specified by calling the appropriate setType method(s) on the columns in the index with which the table was opened. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindFirst">
            <summary>
				<para> Moves forward through the table from the beginning, looking for a row that exactly matches a value or full set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value for which to search, set the column value for each column in the index. The cursor is left on the first row that exactly matches the index value. On failure, the cursor position is after the last row (ULDataReader.IsEOF). </para>
				<para> Each search must be preceded by a call to FindBegin. </para>
		  </remarks><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindNext"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst(System.Int16)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindFirst(System.Int16)">
            <summary>
				<para>Moves forward through the table from the beginning, looking for a row that exactly matches a value or partial set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value for which to search, set the column value for each column in the index. The cursor is left on the first row that exactly matches the index value. On failure, the cursor position is after the last row (ULDataReader.IsEOF). </para>
				<para> Each search must be preceded by a call to FindBegin. </para>
		  </remarks><param name="numColumns">
				For composite indexes, the number of columns to use in the find. For example, if you have a three column index and you want to look up a value that matches based on the first column only, you should set the value for the first column, and then supply a value of 1. 
		  </param><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindNext(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindLast">
            <summary>
				<para> Moves backward through the table from the end, looking for a row that exactly matches a value or full set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value for which to search, set the column value for each column in the index. The cursor is left on the first row found that exactly matches the index value. On failure, the cursor position is before the first row (ULDataReader.IsBOF). </para>
				<para> Each search must be preceded by a call to FindBegin. </para>
		  </remarks><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindNext"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast(System.Int16)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindLast(System.Int16)">
            <summary>
				<para> Moves backward through the table from the end, looking for a row that exactly matches a value or partial set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value for which to search, set the column value for each column in the index. The cursor is left on the first row found that exactly matches the index value. On failure, the cursor position is before the first row (ULDataReader.IsBOF). </para>
				<para> Each search must be preceded by a call to FindBegin. </para>
		  </remarks><param name="numColumns">
				For composite indexes, the number of columns to use in the find. For example, if you have a three column index and you want to find a value that matches based on the first column only, you should set the value for the first column, then supply a value of 1. 
		  </param><returns>
		  True if successful, false otherwise 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindNext(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindNext">
            <summary>
				<para> Continues a ULTable.FindFirst() search by moving forward through the table from the current position, looking to see if the next row exactly matches a value or full set of values in the current index. </para>
		  </summary><remarks>
				<para> The cursor is left on the next row if it exactly matches the index value. On failure, the cursor position is after the last row (ULDataReader.IsEOF). </para>
				<para> FindNext behavior is undefined if the column values being searched for are modified during a row update. </para>
		  </remarks><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindNext(System.Int16)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindNext(System.Int16)">
            <summary>
				<para> Continues a ULTable.FindFirst() search by moving forward through the table from the current position, looking to see if the next row exactly matches a value or partial set of values in the current index. </para>
		  </summary><remarks>
				<para> The cursor is left on the next row if it exactly matches the index value. On failure, the cursor position is after the last row (ULDataReader.IsEOF). </para>
				<para> FindNext behavior is undefined if the column values being searched for are modified during a row update. </para>
		  </remarks><param name="numColumns">
				For composite indexes, the number of columns to use in the find. For example, if you have a three column index, and you want to find a value that matches based on the first column only, you should set the value for the first column, and then supply a value of 1. 
		  </param><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindNext"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious">
            <summary>
				<para> Continues a ULTable.FindLast() search by moving backward through the table from the current position, looking to see if the previous row exactly matches a value or full set of values in the current index. </para>
		  </summary><remarks>
				<para> The cursor is left on the previous row if it exactly matches the index value. On failure, the cursor position is before the first row (ULDataReader.IsBOF). </para>
				<para> FindPrevious behavior is undefined if the column values being searched for are modified during a row update. </para>
		  </remarks><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious(System.Int16)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious(System.Int16)">
            <summary>
				<para> Continues a ULTable.FindLast() search by moving backward through the table from the current position, looking to see if the previous row exactly matches a value or partial set of values in the current index. </para>
		  </summary><remarks>
				<para> The cursor is left on the previous row if it exactly matches the index value. On failure, the cursor position is before the first row (ULDataReader.IsBOF). </para>
				<para> FindPrevious behavior is undefined if the column values being searched for are modified during a row update. </para>
		  </remarks><param name="numColumns">
				For composite indexes, the number of columns to use in the find. For example, if you have a three column index and you want to look up a value that matches based on the first column only, you should set the value for the first column, then supply a value of 1. 
		  </param><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
			</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin">
            <summary>
				<para> Prepares to insert a new row into the table by setting all current column values to their default values. </para>
		  </summary><remarks>
				<para> Call the appropriate SetType or AppendType method(s) to specify the non-default values that are to be inserted. </para>
				<para> The row is not actually inserted and the data in the row is not actually changed until you execute the Insert method, and that change is not made permanent until it is committed. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.Insert">
            <summary>
				<para> Inserts a new row with the current column values (specified using the set methods). </para>
				<para> Each insert must be preceded by a call to ULTable.InsertBegin. </para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
			</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin">
            <summary>
				<para> Prepares to perform a new lookup on the table. The value(s) for which to search are specified by calling the appropriate setType method(s) on the columns in the index with which the table was opened. </para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupForward"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupForward(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBackward"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBackward(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.LookupForward">
            <summary>
				<para> Moves forward through the table from the beginning, looking for a row that matches or is greater than a value or full set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value for which to search, set the column value for each column in the index. The cursor is left on the first row that matches or is greater than the index value. On failure, (no rows greater than the value being looked for) the cursor position is after the last row (ULDataReader.IsEOF). </para>
				<para> Each search must be preceded by a call to ULTable.LookupBegin(). </para>
		  </remarks><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupForward(System.Int16)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.LookupForward(System.Int16)">
            <summary>
				<para> Moves forward through the table from the beginning, looking for a row that matches or is greater than a value or partial set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value for which to search, set the column value for each column in the index. The cursor is left on the first row that matches or is greater than the index value. On failure, (no rows greater than the value being looked for) the cursor position is after the last row ULDataReader.IsEOF). </para>
				<para> Each search must be preceded by a call to LookupBegin. </para>
		  </remarks><param name="numColumns">
				For composite indexes, the number of columns to use in the lookup. For example, if you have a three column index and you want to look up a value that matches based on the first column only, you should set the value for the first column, and then supply a value of 1. 
		  </param><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupForward"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.LookupBackward">
            <summary>
				<para> Moves backward through the table from the end, looking for a row that matches or is less than a value or full set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value for which to search, set the column value for each column in the index. The cursor is left on the first row that matches or is less than the index value. On failure, (no rows less than the value being looked for) the cursor position is before the first row (ULDataReader.IsBOF). </para>
				<para> Each search must be preceded by a call to LookupBegin. </para>
		  </remarks><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBackward(System.Int16)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.LookupBackward(System.Int16)">
            <summary>
				<para> Moves backward through the table from the end, looking for a row that matches or is less than a value or partial set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value for which to search, set the column value for each column in the index. The cursor is left on the first row that matches or is less than the index value. On failure, (no rows less than the value being looked for) the cursor position is before the first row (ULDataReader.IsBOF). </para>
				<para> Each search must be preceded by a call to LookupBegin. </para>
		  </remarks><param name="numColumns">
				For composite indexes, the number of columns to use in the lookup. For example, if you have a three column index, and you want to look up a value that matches based on the first column only, you should set the value for the first column, and then supply a value of 1. 
		  </param><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBackward(System.Int16)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.Truncate">
            <summary>
				<para> Deletes all rows in the table while temporarily activating a stop synchronization delete. </para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.DeleteAllRows"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTable.Schema">
            <summary>
				<para> Holds the table schema. This property is only valid while its connection is open. </para>
		  </summary><value>The ULTableSchema object representing the table schema.</value><remarks>
				<para>This property represents the complete schema of the table, including UltraLite.NET extended information which is not represented in the results from ULDataReader.GetSchemaTable.</para>
			</remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULTableSchema"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULTableSchema">
            <summary>
			<para> <i><b>UL Ext: </b></i> Represents the schema of an UltraLite table. </para>
		</summary><remarks>
			<para> There is no constructor for this class. A ULTableSchema object is attached to a table as its ULTable.Schema. </para>
		</remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULTableSchema"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="T:iAnywhere.Data.UltraLite.ULCursorSchema"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.VerifyOpen">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.GetColumnDefaultValue(System.Int32)">
            <summary>
			<para>Returns the default value of the specified column. </para>
		</summary><param name="columnID">
			The ID number of the column. The value must be in the range [0,ULCursorSchema.ColumnCount-1]. The first column in a table has an ID value of zero. 
		</param><returns>
		The default value of the specified column as a string or a null reference (Nothing in Visual Basic) if the default value is null. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.GetColumnPartitionSize(System.Int32)">
            <summary>
			<para>Returns the global autoincrement partition size assigned to the specified column. </para>
		</summary><remarks>
			<para> All global autoincrement columns in a given table share the same global autoincrement partition. </para>
		</remarks><param name="columnID">
			The ID number of the column. The value must be in the range [0,ULCursorSchema.ColumnCount-1]. The first column in the table has an ID value of zero. 
		</param><returns>
		The column's global autoincrement partition size as a System.UInt64. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnGlobalAutoIncrement(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/><seealso cref="T:System.UInt64"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.GetIndex(System.String)">
            <summary>
			<para> Returns the index schema of the named index. </para>
		</summary><param name="name">
			The name of the index. 
		</param><returns>
		A ULIndexSchema object representing the named index. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="T:iAnywhere.Data.UltraLite.ULIndexSchema"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.GetIndexName(System.Int32)">
            <summary>
			<para> Returns the name of the index identified by the specified index ID. </para>
		</summary><remarks>
			<para> Index IDs and counts may change during a schema upgrade. To correctly identify an index, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
		</remarks><param name="indexID">
			The ID of the index. The value must be in the range [1,IndexCount]. 
		</param><returns>
		The name of the index as a string. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULTableSchema.IndexCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.GetOptimalIndex(System.Int32)">
            <summary>
			<para> The optimal index for searching a table using the specified column. </para>
		</summary><remarks>
			<para> The specified column is the first column in the index, but the index may have more than one column. </para>
		</remarks><param name="columnID">
			The ID number of the column. The first column in the table has an ID value of zero. 
		</param><returns>
		A ULIndexSchema object representing the optimal index for the specified column. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/><seealso cref="T:iAnywhere.Data.UltraLite.ULIndexSchema"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.GetPublicationPredicate(System.String)">
            <summary>
			<para> Returns the publication predicate for this table in the named publication. </para>
		</summary><param name="pubName">
			The name of the publication. 
		</param><returns>
		The publication predicate as a string. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnAutoIncrement(System.Int32)">
            <summary>
			<para> Checks whether the specified column's default is set to autoincrement. </para>
		</summary><param name="columnID">
			The ID number of the column. The value must be in the range [0,ULCursorSchema.ColumnCount-1]. The first column in the table has an ID value of zero. 
		</param><returns>
		True if the column is autoincrementing, false if it is not autoincrementing. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnCurrentDate(System.Int32)">
            <summary>
			<para> Checks whether the specified column's default is set to the current date (ULDbType.Date). </para>
		</summary><param name="columnID">
			The ID number of the column. The value must be in the range [0,ULCursorSchema.ColumnCount-1]. The first column in the table has an ID value of zero. 
		</param><returns>
		True if the column defaults to the current date, false if the column does not default to the current date. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.Date"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnCurrentTime(System.Int32)">
            <summary>
			<para> Checks whether the specified column's default is set to the current time (ULDbType.Time). </para>
		</summary><param name="columnID">
			The ID number of the column. The value must be in the range [0,ULCursorSchema.ColumnCount-1]. The first column in the table has an ID value of zero. 
		</param><returns>
		True if the column defaults to the current time, false if the column does not default to the current time. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.Time"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnCurrentTimestamp(System.Int32)">
            <summary>
			<para> Checks whether the specified column's default is set to the current timestamp (ULDbType.TimeStamp). </para>
		</summary><param name="columnID">
			The ID number of the column. The value must be in the range [0,ULCursorSchema.ColumnCount-1]. The first column in the table has an ID value of zero. 
		</param><returns>
		True if the column defaults to the current timestamp, false if the column does not default to the current timestamp. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.TimeStamp"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnCurrentUTCTimestamp(System.Int32)">
            <summary>
			<para> Checks whether the specified column's default is set to the current UTC timestamp (ULDbType.TimeStamp). </para>
		</summary><param name="columnID">
			The ID number of the column. The value must be in the range [0,ULCursorSchema.ColumnCount-1]. The first column in the table has an ID value of zero. 
		</param><returns>
		True if the column defaults to the current UTC timestamp, false if the column does not default to the current UTC timestamp. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/><seealso cref="F:iAnywhere.Data.UltraLite.ULDbType.TimeStamp"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnGlobalAutoIncrement(System.Int32)">
            <summary>
			<para> Checks whether the specified column's default is set to global autoincrement. </para>
		</summary><param name="columnID">
			The ID number of the column. The value must be in the range [0,ULCursorSchema.ColumnCount-1]. The first column in the table has an ID value of zero. 
		</param><returns>
		True if the column is global autoincrementing, false if it is not global autoincrementing. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTableSchema.GetColumnPartitionSize(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.DatabaseID"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnNewUUID(System.Int32)">
            <summary>
			<para> Checks whether the specified column's default is set to a new UUID (System.Guid). </para>
		</summary><param name="columnID">
			The ID number of the column. The value must be in the range [0,ULCursorSchema.ColumnCount-1]. The first column in the table has an ID value of zero. 
		</param><returns>
		True if the column defaults to a new UUID, false if the column does not default to a new UUID. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/><seealso cref="T:System.Guid"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnNullable(System.Int32)">
            <summary>
			<para> Checks whether the specified column is nullable. </para>
		</summary><param name="columnID">
			The ID number of the column. The value must be in the range [0,ULCursorSchema.ColumnCount-1]. The first column in the table has an ID value of zero. 
		</param><returns>
		True if the column is nullable, false if it is not nullable. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsInPublication(System.String)">
            <summary>
			<para> Checks whether the table is contained in the named publication. </para>
		</summary><param name="pubName">
			The name of the publication. 
		</param><returns>
		True if the table is in the publication, false if the table is not in the publication. 
		</returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTableSchema.Name">
            <summary>
			<para> Returns the name of the table. </para>
		</summary><value>The name of the table as a string.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTableSchema.IndexCount">
            <summary>
			<para> Returns the number of indexes on the table. </para>
		</summary><value>The number of indexes on the table or 0 if the table schema is closed.</value><remarks>
			<para> Index IDs range from 1 to IndexCount, inclusively. </para>
			<para><em>Note:</em> Index IDs and count may change during a schema upgrade. To correctly identify an index, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
		</remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTableSchema.IsNeverSynchronized">
            <summary>
			<para>Checks whether the table is marked as never being synchronized. </para>
		</summary><value> True if the table is marked as never being synchronized, false otherwise. </value><remarks>
			<para> Tables marked as never being synchronized are never synchronized, even if they are included in a publication. These tables are sometimes referred to as "no sync" tables. </para>
		</remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTableSchema.PrimaryKey">
            <summary>
			<para> Returns the index schema of the primary key for the table. </para>
		</summary><value>A ULIndexSchema object representing the primary key for the table.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception><seealso cref="T:iAnywhere.Data.UltraLite.ULIndexSchema"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTableSchema.UploadUnchangedRows">
            <summary>
			<para> Checks whether the database uploads rows that have not changed. </para>
		</summary><value> True if the table is marked to always upload all rows during synchronization, false if the table is marked to upload only changed rows. </value><remarks>
			<para> Tables marked as such upload unchanged rows, as well as changed rows, when the table is synchronized. These tables are sometimes referred to as "all sync" tables. </para>
		</remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
			A SQL error occurred. 
		</exception>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULTransaction">
            <summary>
			<para> Represents a SQL transaction.</para>
		</summary><remarks>
			<para>There is no constructor for ULTransaction. To obtain a ULTransaction object, use the ULConnection.BeginTransaction(). To associate a command with a transaction, use the ULCommand.Transaction. </para>
			<para>Once a transaction has been committed or rolled back, the connection reverts to automatically committing all operations as they are executed. To group more operations together, a new transaction must be created.</para>
		</remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/><seealso cref="T:System.Data.Common.DbTransaction"/><seealso cref="T:System.Data.IDbTransaction"/><seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTransaction.Finalize">
            <summary>
			<para>Releases unmanaged resources and performs other cleanup operations before the ULTransaction is reclaimed by garbage collection.</para>
		</summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTransaction.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTransaction.Commit">
            <summary>
			<para> Commits the database transaction.</para>
		</summary><remarks>
			<para>Once a transaction has been committed or rolled back, the connection reverts to automatically committing all operations as they are executed. To group more operations together, a new transaction must be created.</para>
			<para>If Commit() fails due to a database error (for example, a referential integrity error), the transaction remains active. Correct the error and call the Commit() method again or call the ULTransaction.Rollback() to complete the transaction.</para>
		</remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULTransaction.Rollback"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTransaction.Rollback">
            <summary>
			<para> Rolls back the transaction's outstanding changes to the database.</para>
		</summary><remarks>
			<para>Once a transaction has been committed or rolled back, the connection reverts to automatically committing all operations as they are executed. To group more operations together, a new transaction must be created.</para>
		</remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULTransaction.Commit"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTransaction.DbConnection">
            <summary></summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTransaction.Connection">
            <summary>
			<para> Returns the connection associated with the transaction. </para>
		</summary><value>The ULConnection object associated with the transaction, or a null reference (Nothing in Visual Basic) if the transaction is no longer valid.</value><remarks>
			<para>This is the strongly-typed version of System.Data.IDbTransaction.Connection and System.Data.Common.DbCommand.Connection.</para>
		</remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/><seealso cref="P:System.Data.IDbTransaction.Connection"/><seealso cref="P:System.Data.Common.DbCommand.Connection"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTransaction.IsolationLevel">
            <summary>
			<para> Returns the isolation level for the transaction.</para>
		</summary><value>One of the System.Data.IsolationLevel values. UltraLite.NET only supports System.Data.IsolationLevel.ReadUncommitted. </value><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction"/><seealso cref="T:System.Data.IsolationLevel"/><seealso cref="F:System.Data.IsolationLevel.ReadUncommitted"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULBulkCopyOptions">
            <summary>
            <para> A bitwise flag that specifies one or more options to use with an instance of the ULBulkCopy class.</para>
        </summary><remarks>
            <para>The ULBulkCopyOptions class is not available in the .NET Compact Framework 2.0.</para>
            <para>The ULBulkCopyOptions enumeration is used when you construct a ULBulkCopy instance to specify how WriteToServer methods behave. </para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopy"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULBulkCopyOptions.Default">
            <summary>
            <para>Specifying only this causes the default behavior to be used.</para>
        </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULBulkCopyOptions.KeepIdentity">
            <summary>
            <para>When specified, the source values to be copied into an identity column are preserved. By default, new identity values are generated in the destination table.</para>
        </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULBulkCopyOptions.UseInternalTransaction">
            <summary>
            <para>When specified, each batch of the bulk-copy operation is executed within a transaction. When not specified, transaction aren't used. If you indicate this option and also provide a ULTransaction object to the constructor, a System.ArgumentException occurs.</para>
        </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping">
            <summary>
            <para>Defines the mapping between a column in a ULBulkCopy instance's data source and a column in the instance's destination table.</para>
        </summary><remarks>
            <para>The ULBulkCopyColumnMapping class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopy"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.#ctor">
            <summary>
            <para>Creates a new column mapping.</para>
        </summary><remarks>
            <para>The ULBulkCopyColumnMapping class is not available in the .NET Compact Framework 2.0.</para>
        </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Creates a new column mapping, using column ordinals or names to refer to source and destination columns.</para>
        </summary><remarks>
            <para>The ULBulkCopyColumnMapping class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><param name="sourceColumnOrdinal">
            The ordinal position of the source column within the data source. The first column in a data source has ordinal position zero. 
        </param><param name="destinationColumnOrdinal">
            The ordinal position of the destination column within the destination table. The first column in a table has ordinal position zero. 
        </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.#ctor(System.Int32,System.String)">
            <summary>
            <para>Creates a new column mapping, using a column ordinal to refer to the source column and a column name to refer to the destination column.</para>
        </summary><remarks>
            <para>The ULBulkCopyColumnMapping class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><param name="sourceColumnOrdinal">
            The ordinal position of the source column within the data source. The first column in a data source has ordinal position zero. 
        </param><param name="destinationColumn">
            The name of the destination column within the destination table. 
        </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.#ctor(System.String,System.Int32)">
            <summary>
            <para>Creates a new column mapping, using a column name to refer to the source column and a column ordinal to refer to the destination the column.</para>
        </summary><remarks>
            <para>The ULBulkCopyColumnMapping class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><param name="sourceColumn">
            The name of the source column within the data source. 
        </param><param name="destinationColumnOrdinal">
            The ordinal position of the destination column within the destination table. The first column in a table has ordinal position zero. 
        </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.#ctor(System.String,System.String)">
            <summary>
            <para>Creates a new column mapping, using column names to refer to source and destination columns.</para>
        </summary><remarks>
            <para>The ULBulkCopyColumnMapping class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><param name="sourceColumn">
            The name of the source column within the data source. 
        </param><param name="destinationColumn">
            The name of the destination column within the destination table. 
        </param>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.DestinationColumn">
            <summary>
            <para>Specifies the name of the column in the destination database table being mapped to.</para>
        </summary><value>A string specifying the name of the column in the destination table or a null reference (Nothing in Visual Basic) if the DestinationOrdinal has priority.</value><remarks>
            <para>The DestinationColumn and DestinationOrdinal properties are mutually exclusive. The most recently set value takes priority.</para>
            <para>Setting the DestinationColumn property causes the DestinationOrdinal property to be set to -1. Setting the DestinationOrdinal property causes the DestinationColumn property to be set to a null reference (Nothing in Visual Basic).</para>
            <para>It is an error to set DestinationColumn to null or the empty string.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.DestinationOrdinal"/><seealso cref="P:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.DestinationOrdinal"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.DestinationOrdinal">
            <summary>
            <para>Specifies the ordinal value of the column in the destination database table being mapped to.</para>
        </summary><value>An integer specifying the ordinal of the column being mapped to in the destination table or -1 if the property is not set.</value><remarks>
            <para>The DestinationColumn and DestinationOrdinal properties are mutually exclusive. The most recently set value takes priority.</para>
            <para>Setting the DestinationColumn property causes the DestinationOrdinal property to be set to -1. Setting the DestinationOrdinal property causes the DestinationColumn property to be set to a null reference (Nothing in Visual Basic).</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.DestinationColumn"/><seealso cref="P:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.DestinationColumn"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.SourceColumn">
            <summary>
            <para>Specifies the name of the column being mapped in the data source.</para>
        </summary><value>A string specifying the name of the column in the data source or a null reference (Nothing in Visual Basic) if the SourceOrdinal has priority.</value><remarks>
            <para>The SourceColumn and SourceOrdinal properties are mutually exclusive. The most recently set value takes priority.</para>
            <para>Setting the SourceColumn property causes the SourceOrdinal property to be set to -1. Setting the SourceOrdinal property causes the SourceColumn property to be set to a null reference (Nothing in Visual Basic).</para>
            <para>It is an error to set SourceColumn to null or the empty string.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.SourceOrdinal"/><seealso cref="P:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.SourceOrdinal"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.SourceOrdinal">
            <summary>
            <para>Specifies the ordinal position of the source column within the data source.</para>
        </summary><value>An integer specifying the ordinal of the column in the data source or -1 if the property is not set.</value><remarks>
            <para>The SourceColumn and SourceOrdinal properties are mutually exclusive. The most recently set value takes priority.</para>
            <para>Setting the SourceColumn property causes the SourceOrdinal property to be set to -1. Setting the SourceOrdinal property causes the SourceColumn property to be set to a null reference (Nothing in Visual Basic).</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping.SourceColumn"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMappingCollection">
            <summary>
            <para>A collection of ULBulkCopyColumnMapping objects that inherits from System.Collections.CollectionBase.</para>
        </summary><remarks>
            <para>The ULBulkCopyColumnMappingCollection class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMappingCollection.Add(iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping)">
            <summary>
            <para>Adds the specified ULBulkCopyColumnMapping to the collection.</para>
        </summary><remarks>
            <para>The ULBulkCopyColumnMappingCollection class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><param name="bulkCopyColumnMapping">
            <para>The ULBulkCopyColumnMapping object that describes the mapping to be added to the collection.</para>
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMappingCollection.Add(System.Int32,System.Int32)">
            <summary>
            <para>Creates a new ULBulkCopyColumnMapping instance using ordinals to specify both source and destination columns, and adds the mapping to the collection.</para>
        </summary><remarks>
            <para>The ULBulkCopyColumnMappingCollection class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><param name="sourceColumnOrdinal">
            The ordinal position of the source column within the data source. The first column in a data source has ordinal position zero. 
        </param><param name="destinationColumnOrdinal">
            The ordinal position of the destination column within the destination table. The first column in a table has ordinal position zero. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMappingCollection.Add(System.Int32,System.String)">
            <summary>
            <para>Creates a new ULBulkCopyColumnMapping using a column ordinal to refer to the source column and a column name to refer to the destination column, and adds mapping to the collection.</para>
        </summary><remarks>
            <para>The ULBulkCopyColumnMappingCollection class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><param name="sourceColumnOrdinal">
            The ordinal position of the source column within the data source. The first column in a data source has ordinal position zero. 
        </param><param name="destinationColumn">
            The name of the destination column within the destination table. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMappingCollection.Add(System.String,System.Int32)">
            <summary>
            <para>Creates a new ULBulkCopyColumnMapping using a column name to refer to the source column and a column ordinal to refer to the destination the column, and adds the mapping to the collection.</para>
            <para>Creates a new column mapping, using column ordinals or names to refer to source and destination columns.</para>
        </summary><remarks>
            <para>The ULBulkCopyColumnMappingCollection class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><param name="sourceColumn">
            The name of the source column within the data source. 
        </param><param name="destinationColumnOrdinal">
            The ordinal position of the destination column within the destination table. The first column in a table has ordinal position zero. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMappingCollection.Add(System.String,System.String)">
            <summary>
            <para>Creates a new ULBulkCopyColumnMapping using column names to specify both source and destination columns, and adds the mapping to the collection.</para>
        </summary><remarks>
            <para>The ULBulkCopyColumnMappingCollection class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><param name="sourceColumn">
            The name of the source column within the data source. 
        </param><param name="destinationColumn">
            The name of the destination column within the destination table. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMappingCollection.Contains(iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping)">
            <summary>
            <para>Returns whether the specified ULBulkCopyColumnMapping object exists in the collection.</para>
        </summary><param name="value">
            <para>A valid ULBulkCopyColumnMapping object.</para>
        </param><returns>
        <para>True if the specified mapping exists in the collection; otherwise, false.</para>
        </returns><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMappingCollection.CopyTo(iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping[],System.Int32)">
            <summary>
            <para>Copies the elements of the ULBulkCopyColumnMappingCollection to an array of ULBulkCopyColumnMapping items, starting at a particular index.</para>
        </summary><param name="array">
            The one-dimensional ULBulkCopyColumnMapping array that is the destination of the elements copied from this ULBulkCopyColumnMappingCollection. The array must have zero-based indexing. 
        </param><param name="index">
            The zero-based index in the array at which copying begins. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMappingCollection.IndexOf(iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping)">
            <summary>
            <para>Returns the index of the specified ULBulkCopyColumnMapping within the collection.</para>
        </summary><param name="value">
            The ULBulkCopyColumnMapping object to search for. 
        </param><returns>
        <para>The zero-based index of the column mapping is returned, or -1 is returned if the column mapping is not found in the collection.</para>
        </returns><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMappingCollection.Remove(iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping)">
            <summary>
            <para>Removes the specified ULBulkCopyColumnMapping element from the ULBulkCopyColumnMappingCollection.</para>
        </summary><param name="value">
            The ULBulkCopyColumnMapping object to be removed from the collection. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopyColumnMappingCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the mapping at the specified index from the collection.</para>
        </summary><param name="index">
            The zero-based index of the ULBulkCopyColumnMapping object to be removed from the collection. 
        </param>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULBulkCopyColumnMappingCollection.Item(System.Int32)">
            <summary>
            <para>Gets the ULBulkCopyColumnMapping object at the specified index.</para>
        </summary><value>An ULBulkCopyColumnMapping object is returned.</value><param name="index">
            The zero-based index of the ULBulkCopyColumnMapping object to find. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRowsCopiedEventArgs">
            <summary>
            <para>Represents the set of arguments passed to the ULRowsCopiedEventHandler.</para>
        </summary><remarks>
            <para>The ULRowsCopiedEventArgs class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULRowsCopiedEventHandler"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULRowsCopiedEventArgs.#ctor(System.Int64)">
            <summary>
            <para>Creates a new instance of the ULRowsCopiedEventArgs object.</para>
        </summary><remarks>
            <para>The ULRowsCopiedEventArgs class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><param name="rowsCopied">
            An 64-bit integer value that indicates the number of rows copied during the current bulk-copy operation. 
        </param>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULRowsCopiedEventArgs.Abort">
            <summary>
            <para>Gets or sets a value that indicates whether the bulk-copy operation should be aborted.</para>
        </summary><remarks>
            <para>The ULRowsCopiedEventArgs class is not available in the .NET Compact Framework 2.0.</para>
        </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULRowsCopiedEventArgs.RowsCopied">
            <summary>
            <para>Returns the number of rows copied during the current bulk-copy operation.</para>
        </summary><value>A long integer representing the number of rows copied.</value><remarks>
            <para>The ULRowsCopiedEventArgs class is not available in the .NET Compact Framework 2.0.</para>
        </remarks>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRowsCopiedEventHandler">
            <summary>
            <para>Represents the method that handles the ULBulkCopy.ULRowsCopied event.</para>
        </summary><remarks>
            <para>The ULRowsCopiedEventHandler delegate is not available in the .NET Compact Framework 2.0.</para>
        </remarks><seealso cref="E:iAnywhere.Data.UltraLite.ULBulkCopy.ULRowsCopied"/><seealso cref="T:System.Object"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULBulkCopy">
            <summary>
            <para>Efficiently bulk load an UltraLite table with data from another source.</para>
        </summary><remarks>
            <para>The ULBulkCopy class is not available in the .NET Compact Framework 2.0.</para>
        </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopy.#ctor(iAnywhere.Data.UltraLite.ULConnection)">
            <summary>
            <para>Initializes a ULBulkCopy object with the specified ULConnection.</para>
        </summary><remarks>
            <para>The ULBulkCopy class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><param name="connection">
            The already open ULConnection that is used to perform the bulk-copy operation. If the connection is not open, an exception is thrown in WriteToServer. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopy.#ctor(System.String)">
            <summary>
            <para>Initializes a ULBulkCopy object with the specified connection string.</para>
        </summary><remarks>
            <para>The ULBulkCopy class is not available in the .NET Compact Framework 2.0.</para>
            <para>This syntax opens a connection during WriteToServer using connectionString. The connection is closed at the end of WriteToServer.</para>
            <para>The connection string can be supplied using a ULConnectionParms object.</para>
        </remarks><param name="connectionString">
            <para>The string defining the connection to be opened for use by the ULBulkCopy instance. A connection string is a semicolon-separated list of keyword=value pairs. </para>
        </param><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnectionParms"/><seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopy.#ctor(System.String,iAnywhere.Data.UltraLite.ULBulkCopyOptions)">
            <summary>
            <para>Initializes a ULBulkCopy object with the specified connection string and copy options.</para>
        </summary><remarks>
            <para>The ULBulkCopy class is not available in the .NET Compact Framework 2.0.</para>
            <para>This syntax opens a connection during WriteToServer using connectionString. The connection is closed at the end of WriteToServer.</para>
        </remarks><param name="connectionString">
            <para>The string defining the connection to be opened for use by the ULBulkCopy instance. A connection string is a semicolon-separated list of keyword=value pairs.</para>
        </param><param name="copyOptions">
            A combination of values from the ULBulkCopyOptions enumeration that determines how data source rows are copied to the destination table. 
        </param><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopyOptions"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopy.#ctor(iAnywhere.Data.UltraLite.ULConnection,iAnywhere.Data.UltraLite.ULBulkCopyOptions,iAnywhere.Data.UltraLite.ULTransaction)">
            <summary>
            <para>Initializes a ULBulkCopy object with the specified ULConnection, copy options and ULTransaction.</para>
        </summary><remarks>
            <para>The ULBulkCopy class is not available in the .NET Compact Framework 2.0.</para>
        </remarks><param name="connection">
            The already open ULConnection that is used to perform the bulk-copy operation. If the connection is not open, an exception is thrown in WriteToServer. 
        </param><param name="copyOptions">
            A combination of values from the ULBulkCopyOptions enumeration that determines how data source rows are copied to the destination table. 
        </param><param name="externalTransaction">
            An existing ULTransaction instance under which the bulk copy occurs. If externalTransaction is not a null reference (Nothing in Visual Basic), then the bulk-copy operation is done within it. It is an error to specify both an external transaction and the ULBulkCopyOptions.UseInternalTransaction option. 
        </param><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/><seealso cref="T:iAnywhere.Data.UltraLite.ULTransaction"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopy.Finalize">
            <summary></summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopy.Dispose">
            <summary>
            <para>Disposes of the ULBulkCopy instance.</para>
        </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopy.Close">
            <summary>
            <para> Closes the ULBulkCopy instance.</para>
        </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopy.WriteToServer(System.Data.DataRow[])">
            <summary>
            <para>Copies all rows in the supplied array of System.Data.DataRow objects to a destination table specified by the DestinationTableName field of the ULBulkCopy object.</para>
        </summary><param name="rows">
            An array of System.Data.DataRow objects to be copied to the destination table. 
        </param><seealso cref="P:iAnywhere.Data.UltraLite.ULBulkCopy.DestinationTableName"/><seealso cref="T:System.Data.DataRow"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopy.WriteToServer(System.Data.DataTable)">
            <summary>
            <para>Copies all rows in the supplied System.Data.DataTable to a destination table specified by the DestinationTableName of the ULBulkCopy object.</para>
        </summary><param name="table">
            A System.Data.DataTable whose rows to be copied to the destination table. 
        </param><seealso cref="P:iAnywhere.Data.UltraLite.ULBulkCopy.DestinationTableName"/><seealso cref="T:System.Data.DataTable"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopy.WriteToServer(System.Data.IDataReader)">
            <summary>
            <para>Copies all rows in the supplied System.Data.IDataReader to a destination table specified by the DestinationTableName of the ULBulkCopy object.</para>
        </summary><param name="reader">
            A System.Data.IDataReader whose rows to be copied to the destination table. 
        </param><seealso cref="P:iAnywhere.Data.UltraLite.ULBulkCopy.DestinationTableName"/><seealso cref="T:System.Data.IDataReader"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)">
            <summary>
            <para>Copies all rows in the supplied System.Data.DataTable with the specified row state to a destination table specified by the DestinationTableName of the ULBulkCopy object.</para>
        </summary><remarks>
            <para>If rowState is specified, then only those rows that have the same row state are copied.</para>
        </remarks><param name="table">
            A System.Data.DataTable whose rows to be copied to the destination table. 
        </param><param name="rowState">
            A value from the System.Data.DataRowState enumeration. Only rows matching the row state are copied to the destination. 
        </param><seealso cref="P:iAnywhere.Data.UltraLite.ULBulkCopy.DestinationTableName"/><seealso cref="T:System.Data.DataTable"/><seealso cref="T:System.Data.DataRowState"/>
        </member>
        <member name="E:iAnywhere.Data.UltraLite.ULBulkCopy.ULRowsCopied">
            <summary>
            <para>This event occurs every time the number of rows specified by NotifyAfter have been processed.</para>
        </summary><remarks>
            <para>The receipt of a ULRowsCopied event does not imply that any rows have been committed. You cannot call the Close method from this event.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULBulkCopy.NotifyAfter"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULBulkCopy.BatchSize">
            <summary>
            <para> Gets or sets the number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server.</para>
        </summary><value> The number of rows in each batch. The default is 0.</value><remarks>
            <para>Setting it to zero causes all the rows to be sent in one batch.</para>
            <para>Setting it less than zero is an error.</para>
            <para>If this value is changed while a batch is in progress, the current batch completes and any further batches use the new value.</para>
        </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULBulkCopy.BulkCopyTimeout">
            <summary>
            <para>Gets or sets the number of seconds for the operation to complete before it times out.</para>
        </summary><value> 
        <para>The default value is 30 seconds.</para>
        </value><remarks>
            <para>A value of zero indicates no limit. This should be avoided because it may cause an indefinite wait.</para>
            <para>If the operation times out, then all rows in the current transaction are rolled back and an SAException is raised.</para>
            <para>Setting it less than zero is an error.</para>
        </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULBulkCopy.ColumnMappings">
            <summary>
            <para>Returns a collection of ULBulkCopyColumnMapping items. Column mappings define the relationships between columns in the data source and columns in the destination. </para>
        </summary><value>By default, it is an empty collection.</value><remarks>
            <para>The property cannot be modified while WriteToServer is executing.</para>
            <para>If ColumnMappings is empty when WriteToServer is executed, then the first column in the source is mapped to the first column in the destination, the second to the second, and so on. This takes place as long as the column types are convertible, there are at least as many destination columns as source columns, and any extra destination columns are nullable.</para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULBulkCopyColumnMapping"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULBulkCopy.DestinationTableName">
            <summary>
            <para>Gets or sets the name of the destination table on the server. </para>
        </summary><value>The default value is a null reference (Nothing in Visual Basic).</value><remarks>
            <para>If the value is changed while WriteToServer is executing, the change has no effect.</para>
            <para>If the value has not been set before a call to WriteToServer, an InvalidOperationException is raised.</para>
            <para>It is an error to set the value to null (Nothing in Visual Basic) or the empty string.</para>
        </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULBulkCopy.NotifyAfter">
            <summary>
            <para>Specifies the number of rows to be processed before generating a notification event.</para>
        </summary><value>An integer representing the number of rows to be processed before generating a notification event, or zero is if the property has not been set.</value><remarks>
            <para>Changes made to NotifyAfter, while executing WriteToServer, do not take effect until after the next notification.</para>
            <para>Setting it less than zero is an error.</para>
            <para>The value of NotifyAfter and BulkCopyTimeOut are mutually exclusive, so the event can fire even if no rows have been sent to the database or committed.</para>
        </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULBulkCopy.BulkCopyTimeout"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULConnOption">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULConnOptions">
            \internal
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULConnectionStringBuilder">
            <summary>
            <para> Builds a connection string for opening a connection to an UltraLite database. The frequently-used connection parameters are individual properties on the ULConnectionStringBuilder object.</para>
        </summary><remarks>
            <para>The ULConnectionStringBuilder class is not available in the .NET Compact Framework 2.0.</para>
            <para>A ULConnectionStringBuilder object is used to specify the parameters for opening a connection (ULConnection.Open) or dropping a database (ULDatabaseManager.DropDatabase).</para>
            <para>Leading and trailing spaces are ignored in all values. Values must not contain leading or trailing spaces, or a semicolon, or begin with either a single quote or a double quote.</para>
            <para> When building a connection string, you need to identify the database and specify any optional connection settings. Once you have supplied all the connection parameters by setting the appropriate properties on a ULConnectionStringBuilder object, you create a connection string using the System.Data.Common.DbConnectionStringBuilder.ConnectionString. The resulting string is used to create a new ULConnection with the ULConnection(String) constructor or set the ULConnection.ConnectionString of an existing ULConnection object.</para>
            <para> <i><b>Identifying the database</b></i> </para>
            <para> Each instance contains platform-specific paths to the database. Only the value corresponding to the executing platform is used. For example, in the code below the path \UltraLite\mydb1.udb would be used on Windows Mobile, while mydb2.db would be used on other platforms.</para>
            <code>
' Visual Basic
Dim dbName As ULConnectionStringBuilder = _
    new ULConnectionStringBuilder
dbName.DatabaseOnDevice = "\UltraLite\mydb1.udb"
dbName.DatabaseOnDesktop = "somedir\mydb2.udb"
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
ULConnectionStringBuilder dbName = new ULConnectionStringBuilder();
dbName.DatabaseOnDevice = "\\UltraLite\\mydb1.udb";
dbName.DatabaseOnDesktop = @"somedir\mydb2.udb";</code>
            <para> The recommended extension for UltraLite database files is .udb. On Windows Mobile devices, the default database is \UltraLiteDB\ulstore.udb. On other Windows platforms, the default database is ulstore.udb. In C#, you must escape any backslash characters in paths or use @-quoted string literals. </para>
            <para>If you are using multiple databases, you must specify a database name for each database.</para>
            <para><i><b>Optional connection settings</b></i></para>
            <para>Depending on your application's needs and how the database was created, you might need to supply a non-default ULConnectionStringBuilder.UserID and ULConnectionStringBuilder.Password, a database ULConnectionStringBuilder.DatabaseKey, and the connection ULConnectionStringBuilder.CacheSize. If your application is using multiple connections, you should provide a unique ULConnectionStringBuilder.ConnectionName for each connection.</para>
            <para>Databases are created with a single authenticated user, DBA, whose initial password is sql. By default, connections are opened using the user ID DBA and password sql. To disable the default user, use the ULConnection.RevokeConnectFrom. To add a user or change a user's password, use the ULConnection.GrantConnectTo. </para>
            <para>If an encryption key was supplied when the database was created, all subsequent connections to the database must use the same encryption key. To change a database's encryption key, use the ULConnection.ChangeEncryptionKey.</para>
            <para>For more information, see @olink targetdoc="uladmin" targetptr="fo-connparms"@Connection Parameters@/olink@.</para>

        </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.DropDatabase(System.String)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.#ctor(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.DatabaseName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.UserID"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.Password"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.DatabaseKey"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.CacheSize"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.ConnectionName"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.RevokeConnectFrom(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GrantConnectTo(System.String,System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ChangeEncryptionKey(System.String)"/><seealso cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.#ctor">
            <summary>
            <para> Initializes a ULConnectionStringBuilder instance with its default values. </para>
        </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.#ctor(System.String)">
            <summary>
            <para> Initializes a ULConnectionStringBuilder instance with the specified connection string. </para>
        </summary><param name="connectionString">
            <para>An UltraLite.NET connection string. A connection string is a semicolon-separated list of keyword-value pairs.</para>
        </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.ContainsKey(System.String)">
            <summary>
            <para>Determines whether the ULConnectionStringBuilder object contains a specific keyword.</para>
        </summary><param name="keyword">
            The name of the connection keyword. 
        </param><returns>
        <para>True if this connection string builder contains a value for the specified keyword, otherwise returns false.</para>
        </returns>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.Remove(System.String)">
            <summary>
            <para>Removes the entry with the specified key from the ULConnectionStringBuilder instance.</para>
        </summary><param name="keyword">
            The name of the connection keyword. 
        </param><returns>
        <para>True if the key existed within the connection string and was removed; false if the key did not exist. </para>
        </returns>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)">
            <summary>
            <para>Compares the connection information in this ULConnectionStringBuilder object with the connection information in the supplied DbConnectionStringBuilder object. </para>
        </summary><param name="connectionStringBuilder">
            The other DbConnectionStringBuilder object to compare this ULConnectionStringBuilder object to. 
        </param><returns>
        <para>True if this object is equivalent to the specified DbConnectionStringBuilder object, otherwise returns false.</para>
        </returns><seealso cref="T:System.Data.Common.DbConnectionStringBuilder"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            <para>Retrieves a value corresponding to the supplied key from this ULConnectionStringBuilder.</para>
        </summary><remarks>
            <para>The TryGetValue method lets developers safely retrieve a value from a ULConnectionStringBuilder without needing to first call the ContainsKey method. Because TryGetValue does not raise an exception when you call it, passing in a nonexistent key, you do not have to look for a key before retrieving its value. Calling TryGetValue with a nonexistent key places the null value (Nothing in Visual Basic) in the value parameter. </para>
        </remarks><param name="keyword">
            The key of the item to retrieve. 
        </param><param name="value">
            The value corresponding to the key. 
        </param><returns>
        <para>True if keyword was found within the connection string, false otherwise.</para>
        </returns>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.GetShortName(System.String)">
            <summary>
            <para>Retrieves the short version of the supplied keyword.</para>
        </summary><param name="keyword">
            The key of the item to retrieve. 
        </param><returns>
        <para>The short version of the supplied keyword if keyword is recognized, null otherwise.</para>
        </returns>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.Item(System.String)">
            <summary>
            <para>Specifies the value of the specified connection keyword.</para>
        </summary><value>An object representing the value of the specified connection keyword.</value><remarks>
            <para>Connection keywords and the corresponding properties on ULConnectionStringBuilder are described in the table below:</para>
            <list type="table">
            <listheader>
                <term>Keyword</term> <term>Corresponding Property</term> 
            </listheader>
            <item>
            <term>cache_size</term> <term> ULConnectionStringBuilder.CacheSize </term> 
            </item>
            <item>
            <term>ce_file</term> <term> ULConnectionStringBuilder.DatabaseOnDevice</term> 
            </item>
            <item>
            <term>con</term> <term>ULConnectionStringBuilder.ConnectionName</term> 
            </item>
            <item>
            <term>dbkey</term> <term>ULConnectionStringBuilder.DatabaseKey</term> 
            </item>
            <item>
            <term>dbn</term> <term>ULConnectionStringBuilder.DatabaseName</term> 
            </item>
            <item>
            <term>nt_file</term> <term>ULConnectionStringBuilder.DatabaseOnDesktop</term> 
            </item>
            <item>
            <term>pwd</term> <term>ULConnectionStringBuilder.Password</term> 
            </item>
            <item>
            <term>reserve_size</term> <term>ULConnectionStringBuilder.ReserveSize</term> 
            </item>
            <item>
            <term>start</term> <term>ULConnectionStringBuilder.StartLine</term> 
            </item>
            <item>
            <term>uid</term> <term>ULConnectionStringBuilder.UserID</term> 
            </item>
            </list>
        </remarks><param name="keyword">
            The name of the connection keyword. 
        </param><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.CacheSize"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.DatabaseOnDevice"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.ConnectionName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.DatabaseKey"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.DatabaseName"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.DatabaseOnDesktop"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.Password"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.ReserveSize"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.StartLine"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.UserID"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.CacheSize">
            <summary>
            <para> <i><b>UL Ext: </b></i> Specifies the size of the cache. </para>
        </summary><value>A string specifying the cache size. The default is a null reference (Nothing in Visual Basic) meaning the default of 16 pages is used.</value><remarks>
            <para> The values for the cache size are specified in units of bytes. Use the suffix k or K to indicate units of kilobytes and the suffix of m or M to indicate megabytes. </para>
            <para> For example, the following sets the cache size to 128 KB. </para>
            <code>connParms.CacheSize = "128k"</code>
            <para> The default cache size is 16 pages. Using the default page size of 4 KB, the default cache size is therefore 64 KB. The minimum cache size is platform dependent. </para>
            <para> The default cache size is conservative. If your testing shows the need for better performance, you should increase the cache size. </para>
            <para> Increasing the cache size beyond the size of the database itself provides no performance improvement and large cache sizes might interfere with the number of other applications you can use. </para>
            <para> If the cache size is unspecified or improperly specified, the default size is used. </para>

        </remarks><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.ConnectionName">
            <summary>
            <para> Specifies a name for the connection. This is only needed if you create more than one connection to the database. </para>
        </summary><value>A string specifying the name of the connection. The default is a null reference (Nothing in Visual Basic).</value><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.DatabaseOnDesktop">
            <summary>
            <para><i><b>UL Ext: </b></i> Specifies the path and file name of the UltraLite database on Windows desktop platforms.</para>
        </summary><value>A string specifying the absolute or relative path to the database. If the value is a null reference (Nothing in Visual Basic), the database ulstore.udb is used. In C#, you must escape any backslash characters in paths or use @-quoted string literals. The default is a null reference (Nothing in Visual Basic).</value><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.DatabaseOnDevice">
            <summary>
            <para><i><b>UL Ext: </b></i> Specifies the path and file name of the UltraLite database on Windows Mobile.</para>
        </summary><value>A string specifying the full path to the database. If the value is a null reference (Nothing in Visual Basic), the database \UltraLiteDB\ulstore.udb is used. In C#, you must escape any backslash characters in paths or use @-quoted string literals. The default is a null reference (Nothing in Visual Basic).</value><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.DatabaseKey">
            <summary>
            <para> Specifies a key for encrypting the database. </para>
        </summary><value>A string specifying the encryption key. The default is a null reference (Nothing in Visual Basic) meaning no encryption.</value><remarks>
            <para> All connections must use the same key as was specified when the database was created. Lost or forgotten keys result in completely inaccessible databases. </para>
            <para> As with all passwords, it is best to choose a key value that cannot be easily guessed. The key can be of arbitrary length, but generally the longer the key, the better, because a shorter key is easier to guess than a longer one. Using a combination of numbers, letters, and special characters decreases the chances of someone guessing the key. </para>
        </remarks><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ChangeEncryptionKey(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.DatabaseName">
            <summary>
            <para>Specifies a name for the database or the name of a loaded database to which a connection needs to be made. </para>
        </summary><value>A string specifying the name of the database. The default is a null reference (Nothing in Visual Basic).</value><remarks>
            <para> When a database is started, it is assigned a database name, either explicitly with the dbn parameter, or by UltraLite using the base of the file name with the extension and path removed. </para>
            <para> When opening connections, UltraLite first searches for a running database with a matching dbn. If one is not found, UltraLite starts a new database using the appropriate database file name parameter (DatabaseOnDevice or DatabaseOnDesktop). </para>
            <para> This parameter is required if the application (or UltraLite engine) needs to access two different databases that have the same base file name.</para>
        </remarks><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.DatabaseOnDevice"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.DatabaseOnDesktop"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.UserID">
            <summary>
            <para> Specifies an authenticated user for the database. </para>
        </summary><value>A string specifying a database user ID. The default value is a null reference (Nothing in Visual Basic).</value><remarks>
            <para>User IDs are case-insensitive.</para>
            <para> Databases are initially created with a single authenticated user named DBA. </para>
            <para>If both the user ID and password are not supplied, the user DBA with password sql are used. To make the database more secure, change the user DBA's password or create new users (using ULConnection.GrantConnectTo) and remove the DBA user (using ULConnection.RevokeConnectFrom).</para>
        </remarks><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.Password"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GrantConnectTo(System.String,System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.RevokeConnectFrom(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.Password">
            <summary>
            <para> Specifies the password for the authenticated user. </para>
        </summary><value>A string specifying a database user ID. The default is a null reference (Nothing in Visual Basic).</value><remarks>
            <para>Passwords are case sensitive.</para>
            <para> When a database is created, the password for the DBA user ID is set to sql. </para>
        </remarks><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.UserID"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.ReserveSize">
            <summary>
            <para><i><b>UL Ext: </b></i> Specifies the reserve file system space for storage of UltraLite persistent data. </para>
        </summary><value>A string specifying the reserve size. The default is a null reference (Nothing in Visual Basic).</value><remarks>
            <para> The values for the reserve size parameter is specified in units of bytes. Use the suffix k or K to indicate units of kilobytes and the suffix m or M to indicate megabytes. </para>
            <para> The reserve_size parameter allows you to pre-allocate the file system space required for your UltraLite database without inserting any data. Reserving file system space can improve performance slightly and also prevent out of memory failures. By default, the persistent storage file only grows when required as the application updates the database.</para>
            <para> Note that reserve_size reserves file system space, which includes the metadata in the persistent store file, and not just the raw data. The metadata overhead and data compression must be considered when deriving the required file system space from the amount of database data.</para>
            <para> The reserve_size parameter reserves space by growing the persistent store file to the given reserve size on startup, regardless of whether the file previously existed. The file is never truncated.</para>
            <para> The following parameter string ensures that the persistent store file is at least 2 MB upon startup.</para>
            <code> connParms.ReserveSize = "2m"</code>

        </remarks><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.StartLine">
            <summary>
            <para> Specifies the location and then starts the UltraLite engine. </para>
        </summary><value>A string specifying the location of the UltraLite engine executable. The default value is a null reference (Nothing in Visual Basic).</value><remarks>
            <para>Only supply a StartLine (START) connection parameter if you are connecting to an engine that is not currently running.</para>
        </remarks><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDatabaseManager.RuntimeType"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionStringBuilder.OrderedTableScans">
            <summary>
            <para>Specifies whether SQL queries without ORDER BY clauses should perform ordered table scans by default. </para>
        </summary><value>A boolean string specifying whether to use ordered table scans or not. For example, true/false, yes/no, 1/0, and so on. The default value is a null reference (Nothing in Visual Basic).</value><remarks>
		    <para>When using dynamic SQL in UltraLite, if order is not important for executing a query, UltraLite accesses the rows directly from the database pages rather than using the primary key index. This improves performance of fetching rows. To use this optimization, the query must be read only and must scan all the rows.</para>
            <para>When rows are expected in a specific order, an ORDER BY statement should be included as part of the SQL query. However, it's possible that some applications have come to rely on the behavior that defaults to returning rows in the primary key order. In this case, users should set the OrderedTableScans parameter to 1 (true, yes, on) to revert to the old behavior when iterating over a table.</para>
            <para>When OrderedTableScans is set to 1 (true, yes, on) and the user does not specify an ORDER BY clause or if a query would not benefit from an index, UltraLite defaults to using the primary key.</para>
        </remarks><exception cref="T:System.ArgumentException">
            The value contained a semicolon, or began with either a single quote or a double quote. 
        </exception>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULFactory">
            <summary>
            <para>Represents a set of methods for creating instances of the iAnywhere.Data.UltraLite provider's implementation of the data source classes.</para>
        </summary><remarks>
            <para>The ULFactory class is not available in the .NET Compact Framework 2.0.</para>
            <para>ADO.NET 2.0 adds two new classes, the System.Data.Common.DbProviderFactories class and the System.Data.Common.DbProviderFactory class, to make provider independent code easier to write. To use them with UltraLite.NET specify iAnywhere.Data.UltraLite as the provider invariant name passed to GetFactory. For example:</para>
            <code>
' Visual Basic
Dim factory As DbProviderFactory = _
    DbProviderFactories.GetFactory( "iAnywhere.Data.UltraLite" )
Dim conn As DbConnection = _
    factory.CreateConnection()
</code>
<para>The following code is the C# language equivalent:</para>
<code>
// C#
DbProviderFactory factory = 
    DbProviderFactories.GetFactory( "iAnywhere.Data.UltraLite" );
DbConnection conn = factory.CreateConnection();
</code>
            <para>In this example, conn is created as an ULConnection object.</para>
            <para>For an explanation of provider factories and generic programming in ADO.NET 2.0, see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnvs05/html/vsgenerics.asp"></a>.</para>
            <para>UltraLite.NET does not support CreateCommandBuilder(), CreateDataSourceEnumerator(), and CreatePermission().</para>

        </remarks><seealso cref="T:System.Data.Common.DbProviderFactories"/><seealso cref="T:System.Data.Common.DbProviderFactory"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULFactory.Instance">
            <summary>
            <para>Represents the singleton instance of the ULFactory class.</para>
        </summary><remarks>
            <para>The ULFactory class is not available in the .NET Compact Framework 2.0.</para>
            <para>ULFactory is a singleton class, which means only this instance of this class can exist.</para>
            <para>Normally you would not use this field directly. Instead, you get a reference to this instance of ULFactory using System.Data.Common.DbProviderFactories.GetFactory(String).</para>
        </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULFactory"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULFactory.CreateCommand">
            <summary>
            <para>Returns a strongly typed System.Data.Common.DbCommand instance.</para>
        </summary><returns>
        <para>A new ULCommand instance typed as DbCommand.</para>
        </returns><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:System.Data.Common.DbCommand"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULFactory.CreateConnection">
            <summary>
            <para>Returns a strongly typed System.Data.Common.DbConnection instance.</para>
        </summary><returns>
        <para>A new ULConnection instance typed as DbConnection.</para>
        </returns><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/><seealso cref="T:System.Data.Common.DbConnection"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULFactory.CreateCommandBuilder">
            <summary>
            <para>Returns a strongly typed System.Data.Common.DbCommandBuilder instance.</para>
        </summary><returns>
        <para>A new ULCommandBuilder instance typed as DbCommandBuilder.</para>
        </returns><seealso cref="T:iAnywhere.Data.UltraLite.ULCommandBuilder"/><seealso cref="T:System.Data.Common.DbCommandBuilder"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULFactory.CreateDataAdapter">
            <summary>
            <para>Returns a strongly typed System.Data.Common.DbDataAdapter instance.</para>
        </summary><returns>
        <para>A new ULDataAdapter instance typed as DbDataAdapter.</para>
        </returns><seealso cref="T:iAnywhere.Data.UltraLite.ULDataAdapter"/><seealso cref="T:System.Data.Common.DbDataAdapter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULFactory.CreateParameter">
            <summary>
            <para>Returns a strongly typed System.Data.Common.DbParameter instance.</para>
        </summary><returns>
        <para>A new ULParameter instance typed as DbParameter.</para>
        </returns><seealso cref="T:iAnywhere.Data.UltraLite.ULParameter"/><seealso cref="T:System.Data.Common.DbParameter"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULFactory.CreateConnectionStringBuilder">
            <summary>
            <para>Returns a strongly typed System.Data.Common.DbConnectionStringBuilder instance.</para>
        </summary><returns>
        <para>A new ULConnectionStringBuilder instance typed as DbConnectionStringBuilder.</para>
        </returns><seealso cref="T:iAnywhere.Data.UltraLite.ULConnectionStringBuilder"/><seealso cref="T:System.Data.Common.DbConnectionStringBuilder"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULFactory.CanCreateDataSourceEnumerator">
            <summary>
            <para>Returns false to indicate the UltraLite.NET does not support DbDataSourceEnumerator.</para>
        </summary><value>False to indicate that ULFactory does not implement the CreateDataSourceEnumerator() method.</value>
        </member>
    </members>
</doc>
