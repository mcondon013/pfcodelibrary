<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PFOfficeInteropObjects</name>
    </assembly>
    <members>
        <member name="T:PFOfficeInteropObjects.PFWordInterop">
            <summary>
            Routines for manipulating a Word document using the Office Interop library.
            </summary>
        </member>
        <member name="M:PFOfficeInteropObjects.PFWordInterop.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PFOfficeInteropObjects.PFWordInterop.#ctor(PFDocumentGlobals.enWordOutputFormat)">
            <summary>
            Constructor.
            </summary>
            <param name="wordOutputFormat">Set to PFWordInterop.Word2003 for an XLS file. Set to PFWordInterop.Word2007 for an XLSX file.</param>
        </member>
        <member name="M:PFOfficeInteropObjects.PFWordInterop.#ctor(PFDocumentGlobals.enWordOutputFormat,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="wordOutputFormat">Set to PFWordInterop.Word2003 for an XLS file. Set to PFWordInterop.Word2007 for an XLSX file.</param>
            <param name="documentFilePath">Full path to the output file.</param>
        </member>
        <member name="M:PFOfficeInteropObjects.PFWordInterop.#ctor(PFDocumentGlobals.enWordOutputFormat,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="wordOutputFormat">Set to PFWordInterop.Word2003 for an XLS file. Set to PFWordInterop.Word2007 for an XLSX file.</param>
            <param name="documentFilePath">Full path to the output file.</param>
            <param name="replaceExistingFile">True to overwrite existing file with same name. Otherwise, set to false to throw an error if file with same name already exists.</param>
        </member>
        <member name="M:PFOfficeInteropObjects.PFWordInterop.WriteDataToDocument(System.String)">
            <summary>
            Writes data contained in XML string to path stored in DocumentFilePath property.
            </summary>
            <param name="xmlString">String containing valid XML formatted data.</param>
            <returns></returns>
        </member>
        <member name="M:PFOfficeInteropObjects.PFWordInterop.WriteDataToDocument(System.Xml.XmlDocument)">
            <summary>
            Writes data contained in XML document object to path stored in DocumentFilePath property.
            </summary>
            <param name="xmlDoc">XML formatted document object.</param>
            <returns></returns>
        </member>
        <member name="M:PFOfficeInteropObjects.PFWordInterop.WriteDataToDocument(System.Data.DataTable)">
            <summary>
            Writes data contained in ADO.NET DataTable object to path stored in DocumentFilePath property.
            </summary>
            <param name="dt">DataTable object containing data to be imported.</param>
            <returns>True if output operation is successful. False if write fails.</returns>
        </member>
        <member name="P:PFOfficeInteropObjects.PFWordInterop.WordOutputFormat">
            <summary>
            Set to enWordVersion.Word2003 for DOC format.
            Set to enWordVersion.Word2007 for DOCX format.
            </summary>
        </member>
        <member name="P:PFOfficeInteropObjects.PFWordInterop.DocumentFilePath">
            <summary>
            Specifies path to the word document on disk.
            </summary>
        </member>
        <member name="P:PFOfficeInteropObjects.PFWordInterop.ReplaceExistingFile">
            <summary>
            If True and file already exists, the old file will be deleted and the new file created.
            If False, an error will be raised if a file by the same name already exists.
            </summary>
            <remarks>Default is True. An existing file with same name will be deleted.</remarks>
        </member>
        <member name="T:PFOfficeInteropObjects.PFExcelInterop">
            <summary>
            Routines for manipulating an Excel document using the Office Interop library.
            </summary>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.#ctor(PFDocumentGlobals.enExcelOutputFormat)">
            <summary>
            Constructor.
            </summary>
            <param name="excelOutputFormat">Set to enExcelOutputFormat.Excel2003 for an XLS file. Set to enExcelOutputFormat.Excel2007 for an XLSX file.</param>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.#ctor(PFDocumentGlobals.enExcelOutputFormat,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="excelOutputFormat">Set to enExcelOutputFormat.Excel2003 for an XLS file. Set to enExcelOutputFormat.Excel2007 for an XLSX file.</param>
            <param name="documentFilePath">Full path to the output file.</param>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.#ctor(PFDocumentGlobals.enExcelOutputFormat,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="excelOutputFormat">Set to enExcelOutputFormat.Excel2003 for an XLS file. Set to enExcelOutputFormat.Excel2007 for an XLSX file.</param>
            <param name="documentFilePath">Full path to the output file.</param>
            <param name="replaceExistingFile">True to overwrite existing file with same name. Otherwise, set to false to throw an error if file with same name already exists.</param>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.#ctor(PFDocumentGlobals.enExcelOutputFormat,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="excelOutputFormat">Set to enExcelOutputFormat.Excel2003 for an XLS file. Set to enExcelOutputFormat.Excel2007 for an XLSX file.</param>
            <param name="documentFilePath">Full path to the output file.</param>
            <param name="sheetName">Name of the Excel sheet where data is to be written to or read from.</param>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.#ctor(PFDocumentGlobals.enExcelOutputFormat,System.String,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="excelOutputFormat">Set to enExcelOutputFormat.Excel2003 for an XLS file. Set to enExcelOutputFormat.Excel2007 for an XLSX file.</param>
            <param name="documentFilePath">Full path to the output file.</param>
            <param name="sheetName">Name of the Excel sheet where data is to be written to or read from.</param>
            <param name="replaceExistingFile">True to overwrite existing file with same name. Otherwise, set to false to throw an error if file with same name already exists.</param>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.#ctor(PFDocumentGlobals.enExcelOutputFormat,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="excelOutputFormat">Set to enExcelOutputFormat.Excel2003 for an XLS file. Set to enExcelOutputFormat.Excel2007 for an XLSX file.</param>
            <param name="documentFilePath">Full path to the output file.</param>
            <param name="sheetName">Name of the Excel sheet where data is to be written to or read from.</param>
            <param name="replaceExistingFile">True to overwrite existing file with same name. Otherwise, set to false to modify contents of existing file.</param>
            <param name="replaceExistingSheet">True to overwrite existing sheet with same name. Otherwise, set to false to modify contents of existing sheet.</param>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.WriteDataToDocument(System.String)">
            <summary>
            Writes data contained in XML string to path stored in DocumentFilePath property.
            </summary>
            <param name="xmlString">String containing valid XML formatted data.</param>
            <returns>True if output operation is successful. False if write fails.</returns>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.WriteDataToDocument(System.Xml.XmlDocument)">
            <summary>
            Writes data contained in XML document object to path stored in DocumentFilePath property.
            </summary>
            <param name="xmlDoc">XML formatted document object.</param>
            <returns>True if output operation is successful. False if write fails.</returns>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.WriteDataToDocument(System.Data.DataTable)">
            <summary>
            Writes data contained in ADO.NET DataTable object to path stored in DocumentFilePath property.
            </summary>
            <param name="dt">DataTable object containing data to be imported.</param>
            <returns>True if output operation is successful. False if write fails.</returns>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.AppendDataToExistingSheet(System.Data.DataTable)">
            <summary>
            Writes data contained in ADO.NET DataTable object to path stored in DocumentFilePath property.
            </summary>
            <param name="dt">DataTable object containing data to be imported.</param>
            <returns>True if output operation is successful. False if write fails.</returns>
            <remarks>AppendDataToExistingDocument will report an error if workbook or sheet cannot be found.s.</remarks>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.WriteDataToDocumentExt(System.String)">
            <summary>
            Writes data contained in XML string to path stored in DocumentFilePath property.
            </summary>
            <param name="xmlString">String containing valid XML formatted data.</param>
            <returns>True if output operation is successful. False if write fails.</returns>
            <remarks>Ext version of WriteDataToDocument has extra logic for modifying existing documents.</remarks>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.WriteDataToDocumentExt(System.Xml.XmlDocument)">
            <summary>
            Writes data contained in XML document object to path stored in DocumentFilePath property.
            </summary>
            <param name="xmlDoc">XML formatted document object.</param>
            <returns>True if output operation is successful. False if write fails.</returns>
            <remarks>Ext version of WriteDataToDocument has extra logic for modifying existing documents.</remarks>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.WriteDataToDocumentExt(System.Data.DataTable)">
            <summary>
            Writes data contained in ADO.NET DataTable object to path stored in DocumentFilePath property.
            </summary>
            <param name="dt">DataTable object containing data to be imported.</param>
            <returns>True if output operation is successful. False if write fails.</returns>
            <remarks>Ext version of WriteDataToDocument has extra logic for modifying existing documents.</remarks>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.ExportExcelDataToDataTable(System.String,System.Boolean)">
            <summary>
            ExportDataToDataTable
            </summary>
            <param name="excelRangeName">Name given to a range of cells in the document.</param>
            <param name="columnNamesInFirstRow">If true, then export will assume first row contains column names.</param>
            <returns>DataTable object that contains the values in the given excelNameRange.</returns>
        </member>
        <member name="M:PFOfficeInteropObjects.PFExcelInterop.ExportExcelDataToDataTable(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            ExportDataToDataTable
            </summary>
            <param name="startRow">First row of Excel range.</param>
            <param name="startCol">First column of Excel range.</param>
            <param name="endRow">Last row of Excel range.</param>
            <param name="endCol">Last column of Excel range.</param>
            <param name="columnNamesInFirstRow">If true, then export will assume first row contains column names.</param>
            <returns>DataTable object that contains the values in the given range of Excel cells.</returns>
            <remarks>Row and col values are one based. e.g. 1,1 to 100,100 for a range of 100 rows and 100 columns.</remarks>
        </member>
        <member name="P:PFOfficeInteropObjects.PFExcelInterop.ExcelOutputFormat">
            <summary>
            Set to enExcelVersion.Excel2003 for an XLS file.
            Set to enExcelVersion.Excel2007 for an XLSX file.
            </summary>
        </member>
        <member name="P:PFOfficeInteropObjects.PFExcelInterop.DocumentFilePath">
            <summary>
            Full path to the document file.
            </summary>
        </member>
        <member name="P:PFOfficeInteropObjects.PFExcelInterop.SheetName">
            <summary>
            Name of Excel sheet to use. Default is Sheet1.
            </summary>
        </member>
        <member name="P:PFOfficeInteropObjects.PFExcelInterop.ReplaceExistingFile">
            <summary>
            If True and file already exists, the old file will be deleted and the new file created.
            If False, an error will be raised if a file by the same name already exists.
            </summary>
            <remarks>Default is True. An existing file with same name will be deleted.</remarks>
        </member>
        <member name="P:PFOfficeInteropObjects.PFExcelInterop.ReplaceExistingSheet">
            <summary>
            If True and sheet already exists, the old sheet will be deleted and the new sheet created.
            If False, an error will be raised if a sheet with the same name already exists.
            </summary>
            <remarks>Default is True. An existing sheet with same name will be deleted.</remarks>
        </member>
    </members>
</doc>
